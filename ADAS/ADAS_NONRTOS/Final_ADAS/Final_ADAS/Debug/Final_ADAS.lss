
Final_ADAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00001db6  00001e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008000de  008000de  00001ec8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c15  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000197e  00000000  00000000  0000700d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002db3  00000000  00000000  0000898b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000acc  00000000  00000000  0000b740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d31  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002db8  00000000  00000000  0000df3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  00010cf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_4>
      14:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_8>
      24:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_19>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	20 07       	cpc	r18, r16
      56:	25 07       	cpc	r18, r21
      58:	2c 07       	cpc	r18, r28
      5a:	33 07       	cpc	r19, r19
      5c:	3a 07       	cpc	r19, r26
      5e:	41 07       	cpc	r20, r17
      60:	48 07       	cpc	r20, r24
      62:	4f 07       	cpc	r20, r31

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 eb       	ldi	r30, 0xB6	; 182
      78:	fd e1       	ldi	r31, 0x1D	; 29
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	ae ed       	ldi	r26, 0xDE	; 222
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a0 32       	cpi	r26, 0x20	; 32
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
      9a:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Get_DoorLockState>:
	
}

SYSTEM_ACTION_STATE_t Get_DoorLockState(void)
{
	 return PUSH_BOTTUN_u8GetState(DOOR_LOCK_PORT,DOOR_LOCK_PIN);
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <PUSH_BOTTUN_u8GetState>
}
      aa:	08 95       	ret

000000ac <EXTINT0_CALLBACK>:
#include <util/delay.h>
#include "auto_detect_motion.h"
u8 TimeDelayDone=0;
u8 fire_alarm;
void EXTINT0_CALLBACK()
{
      ac:	cf 93       	push	r28
	static u8 flag=0;
	if (flag==0)
      ae:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
      b2:	81 11       	cpse	r24, r1
      b4:	0f c0       	rjmp	.+30     	; 0xd4 <EXTINT0_CALLBACK+0x28>
	{
		flag=1;
      b6:	c1 e0       	ldi	r28, 0x01	; 1
      b8:	c0 93 de 00 	sts	0x00DE, r28	; 0x8000de <__data_end>
		EXTINT_voidDisable(EXT_INT0);
      bc:	0e 94 92 05 	call	0xb24	; 0xb24 <EXTINT_voidDisable>

		Timer_voidSetBusyWait_ms(TIMER0,500);
      c0:	64 ef       	ldi	r22, 0xF4	; 244
      c2:	71 e0       	ldi	r23, 0x01	; 1
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 b8 07 	call	0xf70	; 0xf70 <Timer_voidSetBusyWait_ms>
		TimeDelayDone=1;
      ca:	c0 93 df 00 	sts	0x00DF, r28	; 0x8000df <TimeDelayDone>
		EXTINT_voidEnable(EXT_INT0);
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 17 05 	call	0xa2e	; 0xa2e <EXTINT_voidEnable>
	}
		fire_alarm=Get_DoorLockState();
      d4:	0e 94 51 00 	call	0xa2	; 0xa2 <Get_DoorLockState>
      d8:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <fire_alarm>
		flag=0;
      dc:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__data_end>
	
}
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <set_alarm>:
	 return PUSH_BOTTUN_u8GetState(DOOR_LOCK_PORT,DOOR_LOCK_PIN);
}

void set_alarm(void)
{
	if (fire_alarm==1)
      e4:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <fire_alarm>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	11 f4       	brne	.+4      	; 0xf0 <set_alarm+0xc>
	{
		Buzzer_voidSetAlarm();
      ec:	0e 94 ae 01 	call	0x35c	; 0x35c <Buzzer_voidSetAlarm>
      f0:	08 95       	ret

000000f2 <AutoLight_Func_StatSetup>:
*                                    Func_StatNotOk
*******************************************************************************/
Func_Stat_t AutoLight_Func_StatSetup()
{
	u8 retstat = 1;
	dio_vidConfigChannel(AutoLight_LED_Port,AutoLight_LED_Pin,OUTPUT);
      f2:	41 e0       	ldi	r20, 0x01	; 1
      f4:	66 e0       	ldi	r22, 0x06	; 6
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
	retstat = 0;
	return retstat;
}
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	08 95       	ret

00000100 <AutoLight_Func_StatLoop>:
AutoLight_Stat_t AutoLight_Glob_Retstat = Led_OFF;
void AutoLight_Func_StatLoop(void)
{
	u16 Loc_AutoLight_Read;

		Loc_AutoLight_Read = LDR_u16Read();
     100:	0e 94 df 02 	call	0x5be	; 0x5be <LDR_u16Read>
		if (Loc_AutoLight_Read > AutoLight_LDR_threshold)
     104:	81 32       	cpi	r24, 0x21	; 33
     106:	93 40       	sbci	r25, 0x03	; 3
     108:	90 f0       	brcs	.+36     	; 0x12e <AutoLight_Func_StatLoop+0x2e>
		{
			dio_vidWriteChannel(AutoLight_LED_Port,AutoLight_LED_Pin,STD_HIGH);
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	66 e0       	ldi	r22, 0x06	; 6
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
			
			lcd_vidGotoRowColumn(2,0);
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr("Light Activated");
     120:	8b e6       	ldi	r24, 0x6B	; 107
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
			
			AutoLight_Glob_Retstat = Led_ON;
     128:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     12c:	08 95       	ret

		}
		else
		{
			dio_vidWriteChannel(AutoLight_LED_Port,AutoLight_LED_Pin,STD_LOW);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	66 e0       	ldi	r22, 0x06	; 6
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
			
			
			lcd_vidGotoRowColumn(2,0);
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr("Light De-Activated");
     144:	8b e7       	ldi	r24, 0x7B	; 123
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
			AutoLight_Glob_Retstat = Led_OFF;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     152:	08 95       	ret

00000154 <AutoWiper_vidsetup>:
Timer2Config_t TIMER2Configdelay={TIM_Normal_Mode,TIMER2_CLK_OVR_8};
ServoMotor_Config  servo1_config={SERVO_ATTTCH_PD5};

void AutoWiper_vidsetup()
{
	RAIN_SENSOR_vidInit();
     154:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RAIN_SENSOR_vidInit>
	Servo_voidInit(&servo1_config);
     158:	81 e6       	ldi	r24, 0x61	; 97
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 49 03 	call	0x692	; 0x692 <Servo_voidInit>
	Timer_voidInitTimer2(&TIMER2Configdelay);
     160:	82 e6       	ldi	r24, 0x62	; 98
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <Timer_voidInitTimer2>
	Servo_voidWrite(&servo1_config,0);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	81 e6       	ldi	r24, 0x61	; 97
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Servo_voidWrite>
	Servo_voidWrite(&servo1_config,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e6       	ldi	r24, 0x61	; 97
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Servo_voidWrite>
     17c:	08 95       	ret

0000017e <AutoWiper_vidloop>:
}
void AutoWiper_vidloop(void)
{
	
	if (RAIN_SENSOR_voidGetState()==RAIN)
     17e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <RAIN_SENSOR_voidGetState>
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	71 f5       	brne	.+92     	; 0x1e2 <AutoWiper_vidloop+0x64>
	{

		lcd_vidGotoRowColumn(3,0);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr("Rain");
     192:	81 e9       	ldi	r24, 0x91	; 145
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
		Servo_voidWrite(&servo1_config,180);
     19a:	64 eb       	ldi	r22, 0xB4	; 180
     19c:	81 e6       	ldi	r24, 0x61	; 97
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Servo_voidWrite>
		Servo_voidWrite(&servo1_config,180);
     1a4:	64 eb       	ldi	r22, 0xB4	; 180
     1a6:	81 e6       	ldi	r24, 0x61	; 97
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Servo_voidWrite>
		Timer_voidSetBusyWait_ms(TIMER2,100);
     1ae:	64 e6       	ldi	r22, 0x64	; 100
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	0e 94 b8 07 	call	0xf70	; 0xf70 <Timer_voidSetBusyWait_ms>
		//_delay_ms(1000);
		Servo_voidWrite(&servo1_config,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e6       	ldi	r24, 0x61	; 97
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Servo_voidWrite>
		Servo_voidWrite(&servo1_config,0);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	81 e6       	ldi	r24, 0x61	; 97
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Servo_voidWrite>
		Timer_voidSetBusyWait_ms(TIMER2,100);
     1cc:	64 e6       	ldi	r22, 0x64	; 100
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 b8 07 	call	0xf70	; 0xf70 <Timer_voidSetBusyWait_ms>
		AutoWiper_Glob_AutoWiper_Current_State = 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <AutoWiper_Glob_AutoWiper_Current_State>
		AuttoWiper_Glob_Rain_flag = 1;
     1dc:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <AuttoWiper_Glob_Rain_flag>
     1e0:	0e c0       	rjmp	.+28     	; 0x1fe <AutoWiper_vidloop+0x80>
	}
	else
	{
		lcd_vidGotoRowColumn(3,0);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr("No Rain");
     1ee:	8e e8       	ldi	r24, 0x8E	; 142
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
		AutoWiper_Glob_AutoWiper_Current_State = 0;
     1f6:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <AutoWiper_Glob_AutoWiper_Current_State>
		AuttoWiper_Glob_Rain_flag = 0;
     1fa:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <AuttoWiper_Glob_Rain_flag>
	}
	AutoWiper_Glob_AutoWiper_Prev_State = AutoWiper_Glob_AutoWiper_Current_State;
     1fe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <AutoWiper_Glob_AutoWiper_Current_State>
     202:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <AutoWiper_Glob_AutoWiper_Prev_State>
     206:	08 95       	ret

00000208 <RTC_vidsetup>:


void RTC_vidsetup(void)
{
	
	RTC_Set_Time(0x10, 0x15, 0x30); 	// Set time 21:40:30	
     208:	40 e3       	ldi	r20, 0x30	; 48
     20a:	65 e1       	ldi	r22, 0x15	; 21
     20c:	80 e1       	ldi	r24, 0x10	; 16
     20e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <RTC_Set_Time>
     212:	08 95       	ret

00000214 <RTC_vidloop>:
}

void RTC_vidloop(void)
{
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <RTC_vidloop+0x6>
     21a:	1f 92       	push	r1
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	/*lcd_vidClrDislay();*/
	u8 s=0,m=0,h=0;
     220:	19 82       	std	Y+1, r1	; 0x01
     222:	1a 82       	std	Y+2, r1	; 0x02
     224:	1b 82       	std	Y+3, r1	; 0x03

			RTC_Get_Time(&h,&m,&s);
     226:	ae 01       	movw	r20, r28
     228:	4f 5f       	subi	r20, 0xFF	; 255
     22a:	5f 4f       	sbci	r21, 0xFF	; 255
     22c:	be 01       	movw	r22, r28
     22e:	6e 5f       	subi	r22, 0xFE	; 254
     230:	7f 4f       	sbci	r23, 0xFF	; 255
     232:	ce 01       	movw	r24, r28
     234:	03 96       	adiw	r24, 0x03	; 3
     236:	0e 94 1c 03 	call	0x638	; 0x638 <RTC_Get_Time>
			sprintf(buffer, "%02x:%02x:%02x", (h & 0b00011111), (m & 0b01111111), (s & 0b01111111));
     23a:	29 81       	ldd	r18, Y+1	; 0x01
     23c:	9a 81       	ldd	r25, Y+2	; 0x02
     23e:	8b 81       	ldd	r24, Y+3	; 0x03
     240:	2f 77       	andi	r18, 0x7F	; 127
     242:	1f 92       	push	r1
     244:	2f 93       	push	r18
     246:	9f 77       	andi	r25, 0x7F	; 127
     248:	1f 92       	push	r1
     24a:	9f 93       	push	r25
     24c:	8f 71       	andi	r24, 0x1F	; 31
     24e:	1f 92       	push	r1
     250:	8f 93       	push	r24
     252:	86 e9       	ldi	r24, 0x96	; 150
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	9f 93       	push	r25
     258:	8f 93       	push	r24
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	0e 94 ef 0b 	call	0x17de	; 0x17de <sprintf>
			lcd_vidGotoRowColumn(0,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr("Time is: ");
     26e:	85 ea       	ldi	r24, 0xA5	; 165
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
			lcd_vidDisplyStr(buffer);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	83 ed       	ldi	r24, 0xD3	; 211
     282:	90 e3       	ldi	r25, 0x30	; 48
     284:	21 50       	subi	r18, 0x01	; 1
     286:	80 40       	sbci	r24, 0x00	; 0
     288:	90 40       	sbci	r25, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <RTC_vidloop+0x70>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <RTC_vidloop+0x7a>
     28e:	00 00       	nop
			
			_delay_ms(1000);
	
}
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <main>:
 
 extern u8 fire_alarm;
 int main(void)
 {
	 //initializations
	 lcd_vidInit();
     2a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_vidInit>
	 //INIT BUZZAR
	 dio_vidConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	66 e0       	ldi	r22, 0x06	; 6
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
	 //INIT BUTTUN FOR CONTACTOR
	 dio_vidConfigChannel(CONTACTOR_PORT,CONTACTOR_PIN,INPUT);
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	63 e0       	ldi	r22, 0x03	; 3
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
	 //INIT BUTTON FOR LOCK DOOR
	 dio_vidConfigChannel(DOOR_LOCK_PORT,DOOR_LOCK_PIN,INPUT);
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	64 e0       	ldi	r22, 0x04	; 4
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
	 //INIT TIMER0 FOR DELAY FUNCTIONS
	 Timer_voidInitTimer0(&TIMER0DELAY_config);
     2c8:	85 e6       	ldi	r24, 0x65	; 101
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 a1 06 	call	0xd42	; 0xd42 <Timer_voidInitTimer0>
	 //init extint
	 EXTINT_voidGlobalIntEnable();
     2d0:	0e 94 a4 05 	call	0xb48	; 0xb48 <EXTINT_voidGlobalIntEnable>
	 EXTINT_voidMode(EXT_INT0,EXT_INT0_RISING_EDGE,EXTINT0_CALLBACK);
     2d4:	46 e5       	ldi	r20, 0x56	; 86
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	69 e0       	ldi	r22, 0x09	; 9
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	0e 94 29 05 	call	0xa52	; 0xa52 <EXTINT_voidMode>
	 //INIT I2C
	 I2C_Init();
     2e0:	0e 94 d3 05 	call	0xba6	; 0xba6 <I2C_Init>
	 //INIT RTC FOR TIME AND CLOCK
	 RTC_vidsetup();
     2e4:	0e 94 04 01 	call	0x208	; 0x208 <RTC_vidsetup>
	 //init autolight system
	 //init ADC
	 ADC_vidInit();
     2e8:	0e 94 ab 03 	call	0x756	; 0x756 <ADC_vidInit>
	 AutoLight_Func_StatSetup();
     2ec:	0e 94 79 00 	call	0xf2	; 0xf2 <AutoLight_Func_StatSetup>
	 //INIT AUTO WIPE SYSTEM
	 //INIT
	 AutoWiper_vidsetup();
     2f0:	0e 94 aa 00 	call	0x154	; 0x154 <AutoWiper_vidsetup>
	 //check for door lock sensor
	 //if door unlock fire the buzzer and send message via GSM
	 /* Replace with your application code */
	 while (1)
	 {
		 lcd_vidClrDislay();
     2f4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_vidClrDislay>
		 //AUTOLIGHT
		 //detect contactor lock to activate sleep mode
		 while (dio_dioLevelReadChannel(CONTACTOR_PORT,CONTACTOR_PIN)==1)
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <main+0x60>
		 {
			 // display time
			 
			 RTC_vidloop();
     2fa:	0e 94 0a 01 	call	0x214	; 0x214 <RTC_vidloop>
			 //AUTOLIGHT
			 AutoLight_Func_StatLoop();
     2fe:	0e 94 80 00 	call	0x100	; 0x100 <AutoLight_Func_StatLoop>
			 //AUTO WIPE
			 AutoWiper_vidloop();
     302:	0e 94 bf 00 	call	0x17e	; 0x17e <AutoWiper_vidloop>
	 while (1)
	 {
		 lcd_vidClrDislay();
		 //AUTOLIGHT
		 //detect contactor lock to activate sleep mode
		 while (dio_dioLevelReadChannel(CONTACTOR_PORT,CONTACTOR_PIN)==1)
     306:	63 e0       	ldi	r22, 0x03	; 3
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <dio_dioLevelReadChannel>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	a1 f3       	breq	.-24     	; 0x2fa <main+0x54>
			// while(dio_dioLevelReadChannel(CONTACTOR_PORT,CONTACTOR_PIN)==1);
		 }
		// else
		 {
			 //sleep mode
			 lcd_vidClrDislay();
     312:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_vidClrDislay>
			 lcd_vidDisplyStr("enter sleep mode -_-");
     316:	8f ea       	ldi	r24, 0xAF	; 175
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
			 EXTINT_voidEnable(EXT_INT0);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	0e 94 17 05 	call	0xa2e	; 0xa2e <EXTINT_voidEnable>
			 SLEEP_MODEvoidEnable(idle);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 96 06 	call	0xd2c	; 0xd2c <SLEEP_MODEvoidEnable>
			 asm("sleep");
     32a:	88 95       	sleep
			 MCUCR_reg&=~(1<<7);
     32c:	85 b7       	in	r24, 0x35	; 53
     32e:	8f 77       	andi	r24, 0x7F	; 127
     330:	85 bf       	out	0x35, r24	; 53
			 lcd_vidClrDislay();
     332:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_vidClrDislay>
			 lcd_vidDisplyStr("exit from sleep mode ^_^");
     336:	84 ec       	ldi	r24, 0xC4	; 196
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_vidDisplyStr>
			 //lcd_vidDispalyNumber(fire_alarm);
			 set_alarm();
     33e:	0e 94 72 00 	call	0xe4	; 0xe4 <set_alarm>
     342:	2a ea       	ldi	r18, 0xAA	; 170
     344:	36 ee       	ldi	r19, 0xE6	; 230
     346:	86 e9       	ldi	r24, 0x96	; 150
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	30 40       	sbci	r19, 0x00	; 0
     34e:	80 40       	sbci	r24, 0x00	; 0
     350:	90 40       	sbci	r25, 0x00	; 0
     352:	d9 f7       	brne	.-10     	; 0x34a <main+0xa4>
     354:	00 00       	nop
			 //send message via GSM
			 _delay_ms(10000);
			 Buzzer_voidCLRAlarm();
     356:	0e 94 b4 01 	call	0x368	; 0x368 <Buzzer_voidCLRAlarm>
			 //Timer_voidSetBusyWait_ms(TIMER0,3000);
		 }
	 }
     35a:	cc cf       	rjmp	.-104    	; 0x2f4 <main+0x4e>

0000035c <Buzzer_voidSetAlarm>:

#include "buzzar.h"
#include "../../MCAL/DIO/dio.h"
void Buzzer_voidSetAlarm(void)
{
	dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	66 e0       	ldi	r22, 0x06	; 6
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     366:	08 95       	ret

00000368 <Buzzer_voidCLRAlarm>:
}
void Buzzer_voidCLRAlarm(void)
{
	dio_vidWriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	66 e0       	ldi	r22, 0x06	; 6
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     372:	08 95       	ret

00000374 <enablePulse>:
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
     374:	41 e0       	ldi	r20, 0x01	; 1
     376:	62 e0       	ldi	r22, 0x02	; 2
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     37e:	85 e0       	ldi	r24, 0x05	; 5
     380:	8a 95       	dec	r24
     382:	f1 f7       	brne	.-4      	; 0x380 <enablePulse+0xc>
     384:	00 00       	nop
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	62 e0       	ldi	r22, 0x02	; 2
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     390:	8f e3       	ldi	r24, 0x3F	; 63
     392:	9f e1       	ldi	r25, 0x1F	; 31
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <enablePulse+0x20>
     398:	00 c0       	rjmp	.+0      	; 0x39a <enablePulse+0x26>
     39a:	00 00       	nop
     39c:	08 95       	ret

0000039e <lcd_vidSendCmd>:
     39e:	cf 93       	push	r28
     3a0:	c8 2f       	mov	r28, r24
     3a2:	8f e9       	ldi	r24, 0x9F	; 159
     3a4:	9f e0       	ldi	r25, 0x0F	; 15
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_vidSendCmd+0x8>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lcd_vidSendCmd+0xe>
     3ac:	00 00       	nop
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	63 e0       	ldi	r22, 0x03	; 3
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     3b8:	c4 fb       	bst	r28, 4
     3ba:	44 27       	eor	r20, r20
     3bc:	40 f9       	bld	r20, 0
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     3c6:	c5 fb       	bst	r28, 5
     3c8:	44 27       	eor	r20, r20
     3ca:	40 f9       	bld	r20, 0
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     3d4:	c6 fb       	bst	r28, 6
     3d6:	44 27       	eor	r20, r20
     3d8:	40 f9       	bld	r20, 0
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     3e2:	4c 2f       	mov	r20, r28
     3e4:	44 1f       	adc	r20, r20
     3e6:	44 27       	eor	r20, r20
     3e8:	44 1f       	adc	r20, r20
     3ea:	64 e0       	ldi	r22, 0x04	; 4
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     3f2:	0e 94 ba 01 	call	0x374	; 0x374 <enablePulse>
     3f6:	4c 2f       	mov	r20, r28
     3f8:	41 70       	andi	r20, 0x01	; 1
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     402:	c1 fb       	bst	r28, 1
     404:	44 27       	eor	r20, r20
     406:	40 f9       	bld	r20, 0
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     410:	c2 fb       	bst	r28, 2
     412:	44 27       	eor	r20, r20
     414:	40 f9       	bld	r20, 0
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     41e:	c3 fb       	bst	r28, 3
     420:	44 27       	eor	r20, r20
     422:	40 f9       	bld	r20, 0
     424:	64 e0       	ldi	r22, 0x04	; 4
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     42c:	0e 94 ba 01 	call	0x374	; 0x374 <enablePulse>
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <lcd_vidSendData>:
     434:	cf 93       	push	r28
     436:	c8 2f       	mov	r28, r24
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     442:	c4 fb       	bst	r28, 4
     444:	44 27       	eor	r20, r20
     446:	40 f9       	bld	r20, 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     450:	c5 fb       	bst	r28, 5
     452:	44 27       	eor	r20, r20
     454:	40 f9       	bld	r20, 0
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     45e:	c6 fb       	bst	r28, 6
     460:	44 27       	eor	r20, r20
     462:	40 f9       	bld	r20, 0
     464:	62 e0       	ldi	r22, 0x02	; 2
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     46c:	4c 2f       	mov	r20, r28
     46e:	44 1f       	adc	r20, r20
     470:	44 27       	eor	r20, r20
     472:	44 1f       	adc	r20, r20
     474:	64 e0       	ldi	r22, 0x04	; 4
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     47c:	0e 94 ba 01 	call	0x374	; 0x374 <enablePulse>
     480:	4c 2f       	mov	r20, r28
     482:	41 70       	andi	r20, 0x01	; 1
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     48c:	c1 fb       	bst	r28, 1
     48e:	44 27       	eor	r20, r20
     490:	40 f9       	bld	r20, 0
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     49a:	c2 fb       	bst	r28, 2
     49c:	44 27       	eor	r20, r20
     49e:	40 f9       	bld	r20, 0
     4a0:	62 e0       	ldi	r22, 0x02	; 2
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     4a8:	c3 fb       	bst	r28, 3
     4aa:	44 27       	eor	r20, r20
     4ac:	40 f9       	bld	r20, 0
     4ae:	64 e0       	ldi	r22, 0x04	; 4
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 44 04 	call	0x888	; 0x888 <dio_vidWriteChannel>
     4b6:	0e 94 ba 01 	call	0x374	; 0x374 <enablePulse>
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <lcd_vidGotoRowColumn>:
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	59 f0       	breq	.+22     	; 0x4d8 <lcd_vidGotoRowColumn+0x1a>
     4c2:	28 f0       	brcs	.+10     	; 0x4ce <lcd_vidGotoRowColumn+0x10>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	69 f0       	breq	.+26     	; 0x4e2 <lcd_vidGotoRowColumn+0x24>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	81 f0       	breq	.+32     	; 0x4ec <lcd_vidGotoRowColumn+0x2e>
     4cc:	08 95       	ret
     4ce:	80 e8       	ldi	r24, 0x80	; 128
     4d0:	86 0f       	add	r24, r22
     4d2:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     4d6:	08 95       	ret
     4d8:	80 ec       	ldi	r24, 0xC0	; 192
     4da:	86 0f       	add	r24, r22
     4dc:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     4e0:	08 95       	ret
     4e2:	84 e9       	ldi	r24, 0x94	; 148
     4e4:	86 0f       	add	r24, r22
     4e6:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     4ea:	08 95       	ret
     4ec:	84 ed       	ldi	r24, 0xD4	; 212
     4ee:	86 0f       	add	r24, r22
     4f0:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     4f4:	08 95       	ret

000004f6 <lcd_vidInit>:
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	63 e0       	ldi	r22, 0x03	; 3
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	62 e0       	ldi	r22, 0x02	; 2
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	62 e0       	ldi	r22, 0x02	; 2
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	89 ef       	ldi	r24, 0xF9	; 249
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	21 50       	subi	r18, 0x01	; 1
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	90 40       	sbci	r25, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <lcd_vidInit+0x42>
     540:	00 c0       	rjmp	.+0      	; 0x542 <lcd_vidInit+0x4c>
     542:	00 00       	nop
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     54a:	8f e1       	ldi	r24, 0x1F	; 31
     54c:	9e e4       	ldi	r25, 0x4E	; 78
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <lcd_vidInit+0x58>
     552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_vidInit+0x5e>
     554:	00 00       	nop
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     55c:	8f e8       	ldi	r24, 0x8F	; 143
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <lcd_vidInit+0x6a>
     564:	00 c0       	rjmp	.+0      	; 0x566 <lcd_vidInit+0x70>
     566:	00 00       	nop
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     574:	88 e2       	ldi	r24, 0x28	; 40
     576:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     57a:	8c e0       	ldi	r24, 0x0C	; 12
     57c:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_vidGotoRowColumn>
     588:	08 95       	ret

0000058a <lcd_vidDisplyChar>:
     58a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_vidSendData>
     58e:	08 95       	ret

00000590 <lcd_vidDisplyStr>:
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	03 c0       	rjmp	.+6      	; 0x59e <lcd_vidDisplyStr+0xe>
     598:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_vidDisplyChar>
     59c:	21 96       	adiw	r28, 0x01	; 1
     59e:	88 81       	ld	r24, Y
     5a0:	81 11       	cpse	r24, r1
     5a2:	fa cf       	rjmp	.-12     	; 0x598 <lcd_vidDisplyStr+0x8>
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <lcd_vidClrDislay>:
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidClrDislay(void)
{
	lcd_vidSendCmd(_LCD_CLEAR);
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_vidSendCmd>
     5b0:	8f e1       	ldi	r24, 0x1F	; 31
     5b2:	9e e4       	ldi	r25, 0x4E	; 78
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_vidClrDislay+0xa>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <lcd_vidClrDislay+0x10>
     5ba:	00 00       	nop
     5bc:	08 95       	ret

000005be <LDR_u16Read>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

u16 LDR_u16Read()
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
	u16 loc_LDRval = 0;
	loc_LDRval = ADC_u16Read(LDR_ADCchannel);
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 b6 03 	call	0x76c	; 0x76c <ADC_u16Read>
     5c8:	ec 01       	movw	r28, r24
	lcd_vidClrDislay();
     5ca:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lcd_vidClrDislay>
// 	lcd_vidDisplyStr("resistance= ");
// 	lcd_vidDispalyNumber(loc_LDRval);
	return loc_LDRval;
}
     5ce:	ce 01       	movw	r24, r28
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <PUSH_BOTTUN_u8GetState>:
 */ 

#include "push_botton.h"
PUSH_BOTTUN_STATE_t PUSH_BOTTUN_u8GetState(u8 BOTTON_PORT,u8 BOTTON_PIN)
{
	if (dio_dioLevelReadChannel(BOTTON_PORT,BOTTON_PIN)==STD_HIGH)
     5d6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <dio_dioLevelReadChannel>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <PUSH_BOTTUN_u8GetState+0xa>
	{
		return PRESSED;
	} 
	else
	{
		return NOT_PRESSED;
     5de:	80 e0       	ldi	r24, 0x00	; 0
	}
     5e0:	08 95       	ret

000005e2 <RAIN_SENSOR_vidInit>:
#include "Rain_Sensor.h"
#include "../LCD/lcd.h"

void RAIN_SENSOR_vidInit()
{
	dio_vidConfigChannel(RAIN_SENSOR_PORT,RAIN_SENSOR_PIN,INPUT);
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	67 e0       	ldi	r22, 0x07	; 7
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
     5ec:	08 95       	ret

000005ee <RAIN_SENSOR_voidGetState>:
}
u8 RAIN_SENSOR_voidGetState(void)
{
	u8 temp_state;
	temp_state=dio_dioLevelReadChannel(RAIN_SENSOR_PORT,RAIN_SENSOR_PIN);
     5ee:	67 e0       	ldi	r22, 0x07	; 7
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <dio_dioLevelReadChannel>
// 	lcd_vidClrDislay();
// 	lcd_vidDispalyNumber(temp_state);
	if (temp_state==1)
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	09 f0       	breq	.+2      	; 0x5fc <RAIN_SENSOR_voidGetState+0xe>
	{
		return RAIN;
	} 
	else
	{
		return NO_RAIN;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
	}
     5fc:	08 95       	ret

000005fe <RTC_Set_Time>:
	I2C_Write(0x04); 	// set register pointer to 4
	I2C_Write(day);  	// set day
	I2C_Write(month); 	// set month
	I2C_Write(year);  	// set year
I2C_Stop();            
}
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	c8 2f       	mov	r28, r24
     606:	d6 2f       	mov	r29, r22
     608:	14 2f       	mov	r17, r20
     60a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <I2C_Start>
     60e:	80 ed       	ldi	r24, 0xD0	; 208
     610:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
     61a:	81 2f       	mov	r24, r17
     61c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
     620:	8d 2f       	mov	r24, r29
     622:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
     626:	8c 2f       	mov	r24, r28
     628:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
     62c:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_Stop>
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <RTC_Get_Time>:

void RTC_Get_Time(/*u8 clock_ptr[]*/u8* hour, u8* mint, u8* second)
{	
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	8b 01       	movw	r16, r22
     648:	7a 01       	movw	r14, r20
	I2C_Start();
     64a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <I2C_Start>
	I2C_Write(0xD0);
     64e:	80 ed       	ldi	r24, 0xD0	; 208
     650:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
	I2C_Write(0);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
	I2C_Start();
     65a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <I2C_Start>
	I2C_Write(0xD1);
     65e:	81 ed       	ldi	r24, 0xD1	; 209
     660:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <I2C_Write>
	*second = I2C_Read(1);
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <I2C_Read>
     66a:	f7 01       	movw	r30, r14
     66c:	80 83       	st	Z, r24
	*mint= I2C_Read(1);
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <I2C_Read>
     674:	f8 01       	movw	r30, r16
     676:	80 83       	st	Z, r24
	*hour = I2C_Read(0);	
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <I2C_Read>
     67e:	88 83       	st	Y, r24
	I2C_Stop();
     680:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_Stop>
}	
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	08 95       	ret

00000692 <Servo_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void Servo_voidInit(ServoMotor_Config *ptr_usrConfig)
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
	PWM_voidInit(&__InternalDriverServoMotor__);
     698:	88 e6       	ldi	r24, 0x68	; 104
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <PWM_voidInit>
	PWM_voidSetOCPin(&__InternalDriverServoMotor__,((ptr_usrConfig->selectServoPin)&0xA0));
     6a0:	68 81       	ld	r22, Y
     6a2:	60 7a       	andi	r22, 0xA0	; 160
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	88 e6       	ldi	r24, 0x68	; 104
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 66 06 	call	0xccc	; 0xccc <PWM_voidSetOCPin>
	dio_vidConfigChannel(PORTD, ((ptr_usrConfig->selectServoPin)& 0x07), OUTPUT);
     6ae:	68 81       	ld	r22, Y
     6b0:	67 70       	andi	r22, 0x07	; 7
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 c7 03 	call	0x78e	; 0x78e <dio_vidConfigChannel>
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <Servo_voidWrite>:
void Servo_voidWrite(ServoMotor_Config *ptr_usrConfig,u8 copy_u8Angle)
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
	float getTicks; 
	switch(copy_u8Angle)
     6c6:	6a 35       	cpi	r22, 0x5A	; 90
     6c8:	81 f0       	breq	.+32     	; 0x6ea <Servo_voidWrite+0x2a>
     6ca:	28 f4       	brcc	.+10     	; 0x6d6 <Servo_voidWrite+0x16>
     6cc:	66 23       	and	r22, r22
     6ce:	41 f0       	breq	.+16     	; 0x6e0 <Servo_voidWrite+0x20>
     6d0:	6e 31       	cpi	r22, 0x1E	; 30
     6d2:	61 f1       	breq	.+88     	; 0x72c <Servo_voidWrite+0x6c>
     6d4:	19 c0       	rjmp	.+50     	; 0x708 <Servo_voidWrite+0x48>
     6d6:	68 37       	cpi	r22, 0x78	; 120
     6d8:	69 f0       	breq	.+26     	; 0x6f4 <Servo_voidWrite+0x34>
     6da:	64 3b       	cpi	r22, 0xB4	; 180
     6dc:	81 f0       	breq	.+32     	; 0x6fe <Servo_voidWrite+0x3e>
     6de:	14 c0       	rjmp	.+40     	; 0x708 <Servo_voidWrite+0x48>
	{
		case 0 : 
		getTicks = 125 ; 
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	8a ef       	ldi	r24, 0xFA	; 250
     6e6:	92 e4       	ldi	r25, 0x42	; 66
     6e8:	25 c0       	rjmp	.+74     	; 0x734 <Servo_voidWrite+0x74>
		break ;
		case 30:
		getTicks =  146; 
		break ; 
		case 90 :
		getTicks =  188 ; 
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	8c e3       	ldi	r24, 0x3C	; 60
     6f0:	93 e4       	ldi	r25, 0x43	; 67
		break ;
     6f2:	20 c0       	rjmp	.+64     	; 0x734 <Servo_voidWrite+0x74>
		case 120:
		getTicks = 208 ; 
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e5       	ldi	r24, 0x50	; 80
     6fa:	93 e4       	ldi	r25, 0x43	; 67
		break ; 
     6fc:	1b c0       	rjmp	.+54     	; 0x734 <Servo_voidWrite+0x74>
		case 180 :
		getTicks = 250 ;  
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	8a e7       	ldi	r24, 0x7A	; 122
     704:	93 e4       	ldi	r25, 0x43	; 67
		break ;
     706:	16 c0       	rjmp	.+44     	; 0x734 <Servo_voidWrite+0x74>
		default:
		{
			getTicks = ((copy_u8Angle+180.161)/1.4406); 
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 ce 0a 	call	0x159c	; 0x159c <__floatsisf>
     712:	27 e3       	ldi	r18, 0x37	; 55
     714:	39 e2       	ldi	r19, 0x29	; 41
     716:	44 e3       	ldi	r20, 0x34	; 52
     718:	53 e4       	ldi	r21, 0x43	; 67
     71a:	0e 94 bf 09 	call	0x137e	; 0x137e <__addsf3>
     71e:	25 e9       	ldi	r18, 0x95	; 149
     720:	35 e6       	ldi	r19, 0x65	; 101
     722:	48 eb       	ldi	r20, 0xB8	; 184
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divsf3>
     72a:	04 c0       	rjmp	.+8      	; 0x734 <Servo_voidWrite+0x74>
	{
		case 0 : 
		getTicks = 125 ; 
		break ;
		case 30:
		getTicks =  146; 
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	82 e1       	ldi	r24, 0x12	; 18
     732:	93 e4       	ldi	r25, 0x43	; 67
		default:
		{
			getTicks = ((copy_u8Angle+180.161)/1.4406); 
		}
	}
	PWM_voidPhaseFrequencyCorrectSetValues(&__InternalDriverServoMotor__,((ptr_usrConfig->selectServoPin)&0xA0),2499,(u16)getTicks);
     734:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
     738:	28 81       	ld	r18, Y
     73a:	20 7a       	andi	r18, 0xA0	; 160
     73c:	e2 2f       	mov	r30, r18
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	9b 01       	movw	r18, r22
     742:	43 ec       	ldi	r20, 0xC3	; 195
     744:	59 e0       	ldi	r21, 0x09	; 9
     746:	bf 01       	movw	r22, r30
     748:	88 e6       	ldi	r24, 0x68	; 104
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <PWM_voidPhaseFrequencyCorrectSetValues>
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <ADC_vidInit>:
*                                    Func_StatNotOk
*******************************************************************************/
Func_Stat_t ADC_vidInit()
{
	Func_Stat_t retstat = 1;
	ADMUX |= (1<<REFS1) | (1<<REFS0); //Internal Voltage Reference
     756:	87 b1       	in	r24, 0x07	; 7
     758:	80 6c       	ori	r24, 0xC0	; 192
     75a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);//Enable ADC 
     75c:	86 b1       	in	r24, 0x06	; 6
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	86 b9       	out	0x06, r24	; 6
		break;
		case ADC_Prescaler_64:
		ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
		break;
		case ADC_Prescaler_128:
		ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     762:	86 b1       	in	r24, 0x06	; 6
     764:	87 60       	ori	r24, 0x07	; 7
     766:	86 b9       	out	0x06, r24	; 6
		break;
	}
	retstat = 0;

return retstat;
}
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	08 95       	ret

0000076c <ADC_u16Read>:
u16 ADC_u16Read(ADC_channelnum_t channelId)
{
	u16 loc_ADCconvres = 0;
	ADMUX = (ADMUX & 0b11100000)|(channelId & 0b00011111); //first part to maintain ADMUX value in init and clear the 5 LSB OF ADMUX to be ready to be set by channel ID then the second part take channel id and make & with 000 to ensure that these bits won't be changed by channel ID and the rest is set by channelID
     76c:	97 b1       	in	r25, 0x07	; 7
     76e:	90 7e       	andi	r25, 0xE0	; 224
     770:	8f 71       	andi	r24, 0x1F	; 31
     772:	89 2b       	or	r24, r25
     774:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); //start conversion
     776:	86 b1       	in	r24, 0x06	; 6
     778:	80 64       	ori	r24, 0x40	; 64
     77a:	86 b9       	out	0x06, r24	; 6
	while( CHECK_BIT(ADCSRA,ADIF) == 0);//wait until conversion is complete
     77c:	34 9b       	sbis	0x06, 4	; 6
     77e:	fe cf       	rjmp	.-4      	; 0x77c <ADC_u16Read+0x10>
	loc_ADCconvres = ADCL; // store in ADCL "Data reg"
     780:	24 b1       	in	r18, 0x04	; 4
	loc_ADCconvres |= (ADCH<<8);//store in ADCH
     782:	85 b1       	in	r24, 0x05	; 5
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	98 2f       	mov	r25, r24
     788:	88 27       	eor	r24, r24
	return loc_ADCconvres;
	
     78a:	82 2b       	or	r24, r18
     78c:	08 95       	ret

0000078e <dio_vidConfigChannel>:

	case DIO_PORTD:
		// Clear Bits 
		DIO_PORTD_REG &= ~(mask);			
		// Set Values by Mask 
		DIO_PORTD_REG |= (value & mask);
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	21 f1       	breq	.+72     	; 0x7da <dio_vidConfigChannel+0x4c>
     792:	30 f0       	brcs	.+12     	; 0x7a0 <dio_vidConfigChannel+0x12>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	f1 f1       	breq	.+124    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	09 f4       	brne	.+2      	; 0x79e <dio_vidConfigChannel+0x10>
     79c:	58 c0       	rjmp	.+176    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     79e:	08 95       	ret
     7a0:	41 30       	cpi	r20, 0x01	; 1
     7a2:	59 f4       	brne	.+22     	; 0x7ba <dio_vidConfigChannel+0x2c>
     7a4:	2a b3       	in	r18, 0x1a	; 26
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <dio_vidConfigChannel+0x22>
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	6a 95       	dec	r22
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <dio_vidConfigChannel+0x1e>
     7b4:	82 2b       	or	r24, r18
     7b6:	8a bb       	out	0x1a, r24	; 26
     7b8:	08 95       	ret
     7ba:	2a b3       	in	r18, 0x1a	; 26
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <dio_vidConfigChannel+0x38>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	6a 95       	dec	r22
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <dio_vidConfigChannel+0x34>
     7ca:	80 95       	com	r24
     7cc:	92 2f       	mov	r25, r18
     7ce:	98 23       	and	r25, r24
     7d0:	9a bb       	out	0x1a, r25	; 26
     7d2:	9b b3       	in	r25, 0x1b	; 27
     7d4:	89 23       	and	r24, r25
     7d6:	8b bb       	out	0x1b, r24	; 27
     7d8:	08 95       	ret
     7da:	41 30       	cpi	r20, 0x01	; 1
     7dc:	59 f4       	brne	.+22     	; 0x7f4 <dio_vidConfigChannel+0x66>
     7de:	27 b3       	in	r18, 0x17	; 23
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <dio_vidConfigChannel+0x5c>
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	6a 95       	dec	r22
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <dio_vidConfigChannel+0x58>
     7ee:	82 2b       	or	r24, r18
     7f0:	87 bb       	out	0x17, r24	; 23
     7f2:	08 95       	ret
     7f4:	27 b3       	in	r18, 0x17	; 23
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	6a 95       	dec	r22
     802:	e2 f7       	brpl	.-8      	; 0x7fc <dio_vidConfigChannel+0x6e>
     804:	80 95       	com	r24
     806:	92 2f       	mov	r25, r18
     808:	98 23       	and	r25, r24
     80a:	97 bb       	out	0x17, r25	; 23
     80c:	98 b3       	in	r25, 0x18	; 24
     80e:	89 23       	and	r24, r25
     810:	88 bb       	out	0x18, r24	; 24
     812:	08 95       	ret
     814:	41 30       	cpi	r20, 0x01	; 1
     816:	59 f4       	brne	.+22     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     818:	24 b3       	in	r18, 0x14	; 20
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	6a 95       	dec	r22
     826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     828:	82 2b       	or	r24, r18
     82a:	84 bb       	out	0x14, r24	; 20
     82c:	08 95       	ret
     82e:	24 b3       	in	r18, 0x14	; 20
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	6a 95       	dec	r22
     83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83e:	80 95       	com	r24
     840:	92 2f       	mov	r25, r18
     842:	98 23       	and	r25, r24
     844:	94 bb       	out	0x14, r25	; 20
     846:	95 b3       	in	r25, 0x15	; 21
     848:	89 23       	and	r24, r25
     84a:	85 bb       	out	0x15, r24	; 21
     84c:	08 95       	ret
     84e:	41 30       	cpi	r20, 0x01	; 1
     850:	59 f4       	brne	.+22     	; 0x868 <__stack+0x9>
     852:	21 b3       	in	r18, 0x11	; 17
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	6a 95       	dec	r22
     860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     862:	82 2b       	or	r24, r18
     864:	81 bb       	out	0x11, r24	; 17
     866:	08 95       	ret
     868:	21 b3       	in	r18, 0x11	; 17
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	6a 95       	dec	r22
     876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
     878:	80 95       	com	r24
     87a:	92 2f       	mov	r25, r18
     87c:	98 23       	and	r25, r24
     87e:	91 bb       	out	0x11, r25	; 17
     880:	92 b3       	in	r25, 0x12	; 18
     882:	89 23       	and	r24, r25
     884:	82 bb       	out	0x12, r24	; 18
     886:	08 95       	ret

00000888 <dio_vidWriteChannel>:
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	01 f1       	breq	.+64     	; 0x8cc <dio_vidWriteChannel+0x44>
     88c:	30 f0       	brcs	.+12     	; 0x89a <dio_vidWriteChannel+0x12>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	b1 f1       	breq	.+108    	; 0x8fe <dio_vidWriteChannel+0x76>
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	09 f4       	brne	.+2      	; 0x898 <dio_vidWriteChannel+0x10>
     896:	4c c0       	rjmp	.+152    	; 0x930 <dio_vidWriteChannel+0xa8>
     898:	08 95       	ret
     89a:	41 11       	cpse	r20, r1
     89c:	0c c0       	rjmp	.+24     	; 0x8b6 <dio_vidWriteChannel+0x2e>
     89e:	2b b3       	in	r18, 0x1b	; 27
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <dio_vidWriteChannel+0x22>
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	6a 95       	dec	r22
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <dio_vidWriteChannel+0x1e>
     8ae:	80 95       	com	r24
     8b0:	82 23       	and	r24, r18
     8b2:	8b bb       	out	0x1b, r24	; 27
     8b4:	08 95       	ret
     8b6:	2b b3       	in	r18, 0x1b	; 27
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <dio_vidWriteChannel+0x3a>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	6a 95       	dec	r22
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <dio_vidWriteChannel+0x36>
     8c6:	82 2b       	or	r24, r18
     8c8:	8b bb       	out	0x1b, r24	; 27
     8ca:	08 95       	ret
     8cc:	41 11       	cpse	r20, r1
     8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <dio_vidWriteChannel+0x60>
     8d0:	28 b3       	in	r18, 0x18	; 24
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <dio_vidWriteChannel+0x54>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	6a 95       	dec	r22
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <dio_vidWriteChannel+0x50>
     8e0:	80 95       	com	r24
     8e2:	82 23       	and	r24, r18
     8e4:	88 bb       	out	0x18, r24	; 24
     8e6:	08 95       	ret
     8e8:	28 b3       	in	r18, 0x18	; 24
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <dio_vidWriteChannel+0x6c>
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	6a 95       	dec	r22
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <dio_vidWriteChannel+0x68>
     8f8:	82 2b       	or	r24, r18
     8fa:	88 bb       	out	0x18, r24	; 24
     8fc:	08 95       	ret
     8fe:	41 11       	cpse	r20, r1
     900:	0c c0       	rjmp	.+24     	; 0x91a <dio_vidWriteChannel+0x92>
     902:	25 b3       	in	r18, 0x15	; 21
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	02 c0       	rjmp	.+4      	; 0x90e <dio_vidWriteChannel+0x86>
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	6a 95       	dec	r22
     910:	e2 f7       	brpl	.-8      	; 0x90a <dio_vidWriteChannel+0x82>
     912:	80 95       	com	r24
     914:	82 23       	and	r24, r18
     916:	85 bb       	out	0x15, r24	; 21
     918:	08 95       	ret
     91a:	25 b3       	in	r18, 0x15	; 21
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <dio_vidWriteChannel+0x9e>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	6a 95       	dec	r22
     928:	e2 f7       	brpl	.-8      	; 0x922 <dio_vidWriteChannel+0x9a>
     92a:	82 2b       	or	r24, r18
     92c:	85 bb       	out	0x15, r24	; 21
     92e:	08 95       	ret
     930:	41 11       	cpse	r20, r1
     932:	0c c0       	rjmp	.+24     	; 0x94c <dio_vidWriteChannel+0xc4>
     934:	22 b3       	in	r18, 0x12	; 18
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	02 c0       	rjmp	.+4      	; 0x940 <dio_vidWriteChannel+0xb8>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	6a 95       	dec	r22
     942:	e2 f7       	brpl	.-8      	; 0x93c <dio_vidWriteChannel+0xb4>
     944:	80 95       	com	r24
     946:	82 23       	and	r24, r18
     948:	82 bb       	out	0x12, r24	; 18
     94a:	08 95       	ret
     94c:	22 b3       	in	r18, 0x12	; 18
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <dio_vidWriteChannel+0xd0>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	6a 95       	dec	r22
     95a:	e2 f7       	brpl	.-8      	; 0x954 <dio_vidWriteChannel+0xcc>
     95c:	82 2b       	or	r24, r18
     95e:	82 bb       	out	0x12, r24	; 18
     960:	08 95       	ret

00000962 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	89 f0       	breq	.+34     	; 0x988 <dio_vidFlipChannel+0x26>
     966:	28 f0       	brcs	.+10     	; 0x972 <dio_vidFlipChannel+0x10>
     968:	82 30       	cpi	r24, 0x02	; 2
     96a:	c9 f0       	breq	.+50     	; 0x99e <dio_vidFlipChannel+0x3c>
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	11 f1       	breq	.+68     	; 0x9b4 <dio_vidFlipChannel+0x52>
     970:	08 95       	ret
	{
	case DIO_PORTA:
		TOG_BIT(DIO_PORTA_REG,channel);
     972:	2b b3       	in	r18, 0x1b	; 27
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 c0       	rjmp	.+4      	; 0x97e <dio_vidFlipChannel+0x1c>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	6a 95       	dec	r22
     980:	e2 f7       	brpl	.-8      	; 0x97a <dio_vidFlipChannel+0x18>
     982:	82 27       	eor	r24, r18
     984:	8b bb       	out	0x1b, r24	; 27
		break;
     986:	08 95       	ret

	case DIO_PORTB:
		TOG_BIT(DIO_PORTB_REG,channel);
     988:	28 b3       	in	r18, 0x18	; 24
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	02 c0       	rjmp	.+4      	; 0x994 <dio_vidFlipChannel+0x32>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	6a 95       	dec	r22
     996:	e2 f7       	brpl	.-8      	; 0x990 <dio_vidFlipChannel+0x2e>
     998:	82 27       	eor	r24, r18
     99a:	88 bb       	out	0x18, r24	; 24
		break;
     99c:	08 95       	ret

	case DIO_PORTC:
		TOG_BIT(DIO_PORTC_REG,channel);
     99e:	25 b3       	in	r18, 0x15	; 21
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <dio_vidFlipChannel+0x48>
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	6a 95       	dec	r22
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <dio_vidFlipChannel+0x44>
     9ae:	82 27       	eor	r24, r18
     9b0:	85 bb       	out	0x15, r24	; 21
		break;
     9b2:	08 95       	ret

	case DIO_PORTD:
		TOG_BIT(DIO_PORTD_REG,channel);
     9b4:	22 b3       	in	r18, 0x12	; 18
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <dio_vidFlipChannel+0x5e>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	6a 95       	dec	r22
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <dio_vidFlipChannel+0x5a>
     9c4:	82 27       	eor	r24, r18
     9c6:	82 bb       	out	0x12, r24	; 18
     9c8:	08 95       	ret

000009ca <dio_dioLevelReadChannel>:
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
	// Check Input Range
	if(channel >= DIO_PIN0 && channel <= DIO_PIN7)
     9ca:	68 30       	cpi	r22, 0x08	; 8
     9cc:	60 f5       	brcc	.+88     	; 0xa26 <dio_dioLevelReadChannel+0x5c>
	{
		switch(port)
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	79 f0       	breq	.+30     	; 0x9f0 <dio_dioLevelReadChannel+0x26>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <dio_dioLevelReadChannel+0x14>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	a9 f0       	breq	.+42     	; 0xa02 <dio_dioLevelReadChannel+0x38>
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	e1 f0       	breq	.+56     	; 0xa14 <dio_dioLevelReadChannel+0x4a>
     9dc:	26 c0       	rjmp	.+76     	; 0xa2a <dio_dioLevelReadChannel+0x60>
		{
			case DIO_PORTA :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINA_REG,channel);
     9de:	89 b3       	in	r24, 0x19	; 25
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <dio_dioLevelReadChannel+0x1e>
     9e4:	95 95       	asr	r25
     9e6:	87 95       	ror	r24
     9e8:	6a 95       	dec	r22
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <dio_dioLevelReadChannel+0x1a>
     9ec:	81 70       	andi	r24, 0x01	; 1
				break ;
     9ee:	08 95       	ret
			case DIO_PORTB : 
				LOC_u8PinValue =   CHECK_BIT(DIO_PINB_REG,channel);
     9f0:	86 b3       	in	r24, 0x16	; 22
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <dio_dioLevelReadChannel+0x30>
     9f6:	95 95       	asr	r25
     9f8:	87 95       	ror	r24
     9fa:	6a 95       	dec	r22
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <dio_dioLevelReadChannel+0x2c>
     9fe:	81 70       	andi	r24, 0x01	; 1
				break ;
     a00:	08 95       	ret
			case DIO_PORTC :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINC_REG,channel);
     a02:	83 b3       	in	r24, 0x13	; 19
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <dio_dioLevelReadChannel+0x42>
     a08:	95 95       	asr	r25
     a0a:	87 95       	ror	r24
     a0c:	6a 95       	dec	r22
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <dio_dioLevelReadChannel+0x3e>
     a10:	81 70       	andi	r24, 0x01	; 1
				break ;
     a12:	08 95       	ret
			case DIO_PORTD :
				LOC_u8PinValue =   CHECK_BIT(DIO_PIND_REG,channel);
     a14:	80 b3       	in	r24, 0x10	; 16
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <dio_dioLevelReadChannel+0x54>
     a1a:	95 95       	asr	r25
     a1c:	87 95       	ror	r24
     a1e:	6a 95       	dec	r22
     a20:	e2 f7       	brpl	.-8      	; 0xa1a <dio_dioLevelReadChannel+0x50>
     a22:	81 70       	andi	r24, 0x01	; 1
				break ;
     a24:	08 95       	ret
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret
     a2a:	81 e0       	ldi	r24, 0x01	; 1
				break ;
			default : break;
		}
	}
	return LOC_u8PinValue; 
}
     a2c:	08 95       	ret

00000a2e <EXTINT_voidEnable>:
	SET_BIT(SREG,SREG_GIE);
}
void EXTINT_voidGlobalIntDisable(void)
{
	/*	ENABLE GLOBAL INTTERUPT	*/
	CLR_BIT(SREG,SREG_GIE);
     a2e:	8f 30       	cpi	r24, 0x0F	; 15
     a30:	41 f0       	breq	.+16     	; 0xa42 <EXTINT_voidEnable+0x14>
     a32:	8e 31       	cpi	r24, 0x1E	; 30
     a34:	51 f0       	breq	.+20     	; 0xa4a <EXTINT_voidEnable+0x1c>
     a36:	81 11       	cpse	r24, r1
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <EXTINT_voidEnable+0x22>
     a3a:	8b b7       	in	r24, 0x3b	; 59
     a3c:	80 64       	ori	r24, 0x40	; 64
     a3e:	8b bf       	out	0x3b, r24	; 59
     a40:	08 95       	ret
     a42:	8b b7       	in	r24, 0x3b	; 59
     a44:	80 68       	ori	r24, 0x80	; 128
     a46:	8b bf       	out	0x3b, r24	; 59
     a48:	08 95       	ret
     a4a:	8b b7       	in	r24, 0x3b	; 59
     a4c:	80 62       	ori	r24, 0x20	; 32
     a4e:	8b bf       	out	0x3b, r24	; 59
     a50:	08 95       	ret

00000a52 <EXTINT_voidMode>:
     a52:	8f 30       	cpi	r24, 0x0F	; 15
     a54:	99 f1       	breq	.+102    	; 0xabc <EXTINT_voidMode+0x6a>
     a56:	8e 31       	cpi	r24, 0x1E	; 30
     a58:	09 f4       	brne	.+2      	; 0xa5c <EXTINT_voidMode+0xa>
     a5a:	57 c0       	rjmp	.+174    	; 0xb0a <EXTINT_voidMode+0xb8>
     a5c:	81 11       	cpse	r24, r1
     a5e:	61 c0       	rjmp	.+194    	; 0xb22 <EXTINT_voidMode+0xd0>
     a60:	41 15       	cp	r20, r1
     a62:	51 05       	cpc	r21, r1
     a64:	21 f0       	breq	.+8      	; 0xa6e <EXTINT_voidMode+0x1c>
     a66:	50 93 e3 00 	sts	0x00E3, r21	; 0x8000e3 <Callback_INT0+0x1>
     a6a:	40 93 e2 00 	sts	0x00E2, r20	; 0x8000e2 <Callback_INT0>
     a6e:	66 30       	cpi	r22, 0x06	; 6
     a70:	81 f0       	breq	.+32     	; 0xa92 <EXTINT_voidMode+0x40>
     a72:	18 f4       	brcc	.+6      	; 0xa7a <EXTINT_voidMode+0x28>
     a74:	63 30       	cpi	r22, 0x03	; 3
     a76:	31 f0       	breq	.+12     	; 0xa84 <EXTINT_voidMode+0x32>
     a78:	08 95       	ret
     a7a:	69 30       	cpi	r22, 0x09	; 9
     a7c:	89 f0       	breq	.+34     	; 0xaa0 <EXTINT_voidMode+0x4e>
     a7e:	6c 30       	cpi	r22, 0x0C	; 12
     a80:	b1 f0       	breq	.+44     	; 0xaae <EXTINT_voidMode+0x5c>
     a82:	08 95       	ret
     a84:	85 b7       	in	r24, 0x35	; 53
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	85 bf       	out	0x35, r24	; 53
     a8a:	85 b7       	in	r24, 0x35	; 53
     a8c:	8d 7f       	andi	r24, 0xFD	; 253
     a8e:	85 bf       	out	0x35, r24	; 53
     a90:	08 95       	ret
     a92:	85 b7       	in	r24, 0x35	; 53
     a94:	8e 7f       	andi	r24, 0xFE	; 254
     a96:	85 bf       	out	0x35, r24	; 53
     a98:	85 b7       	in	r24, 0x35	; 53
     a9a:	82 60       	ori	r24, 0x02	; 2
     a9c:	85 bf       	out	0x35, r24	; 53
     a9e:	08 95       	ret
     aa0:	85 b7       	in	r24, 0x35	; 53
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	85 bf       	out	0x35, r24	; 53
     aa6:	85 b7       	in	r24, 0x35	; 53
     aa8:	82 60       	ori	r24, 0x02	; 2
     aaa:	85 bf       	out	0x35, r24	; 53
     aac:	08 95       	ret
     aae:	85 b7       	in	r24, 0x35	; 53
     ab0:	8d 7f       	andi	r24, 0xFD	; 253
     ab2:	85 bf       	out	0x35, r24	; 53
     ab4:	85 b7       	in	r24, 0x35	; 53
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	85 bf       	out	0x35, r24	; 53
     aba:	08 95       	ret
     abc:	65 31       	cpi	r22, 0x15	; 21
     abe:	81 f0       	breq	.+32     	; 0xae0 <EXTINT_voidMode+0x8e>
     ac0:	18 f4       	brcc	.+6      	; 0xac8 <EXTINT_voidMode+0x76>
     ac2:	62 31       	cpi	r22, 0x12	; 18
     ac4:	31 f0       	breq	.+12     	; 0xad2 <EXTINT_voidMode+0x80>
     ac6:	08 95       	ret
     ac8:	68 31       	cpi	r22, 0x18	; 24
     aca:	89 f0       	breq	.+34     	; 0xaee <EXTINT_voidMode+0x9c>
     acc:	6b 31       	cpi	r22, 0x1B	; 27
     ace:	b1 f0       	breq	.+44     	; 0xafc <EXTINT_voidMode+0xaa>
     ad0:	08 95       	ret
     ad2:	85 b7       	in	r24, 0x35	; 53
     ad4:	8b 7f       	andi	r24, 0xFB	; 251
     ad6:	85 bf       	out	0x35, r24	; 53
     ad8:	85 b7       	in	r24, 0x35	; 53
     ada:	87 7f       	andi	r24, 0xF7	; 247
     adc:	85 bf       	out	0x35, r24	; 53
     ade:	08 95       	ret
     ae0:	85 b7       	in	r24, 0x35	; 53
     ae2:	8b 7f       	andi	r24, 0xFB	; 251
     ae4:	85 bf       	out	0x35, r24	; 53
     ae6:	85 b7       	in	r24, 0x35	; 53
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	85 bf       	out	0x35, r24	; 53
     aec:	08 95       	ret
     aee:	85 b7       	in	r24, 0x35	; 53
     af0:	84 60       	ori	r24, 0x04	; 4
     af2:	85 bf       	out	0x35, r24	; 53
     af4:	85 b7       	in	r24, 0x35	; 53
     af6:	88 60       	ori	r24, 0x08	; 8
     af8:	85 bf       	out	0x35, r24	; 53
     afa:	08 95       	ret
     afc:	85 b7       	in	r24, 0x35	; 53
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	85 bf       	out	0x35, r24	; 53
     b02:	85 b7       	in	r24, 0x35	; 53
     b04:	84 60       	ori	r24, 0x04	; 4
     b06:	85 bf       	out	0x35, r24	; 53
     b08:	08 95       	ret
     b0a:	61 32       	cpi	r22, 0x21	; 33
     b0c:	19 f0       	breq	.+6      	; 0xb14 <EXTINT_voidMode+0xc2>
     b0e:	64 32       	cpi	r22, 0x24	; 36
     b10:	29 f0       	breq	.+10     	; 0xb1c <EXTINT_voidMode+0xca>
     b12:	08 95       	ret
     b14:	84 b7       	in	r24, 0x34	; 52
     b16:	8f 7b       	andi	r24, 0xBF	; 191
     b18:	84 bf       	out	0x34, r24	; 52
     b1a:	08 95       	ret
     b1c:	84 b7       	in	r24, 0x34	; 52
     b1e:	80 64       	ori	r24, 0x40	; 64
     b20:	84 bf       	out	0x34, r24	; 52
     b22:	08 95       	ret

00000b24 <EXTINT_voidDisable>:
     b24:	8f 30       	cpi	r24, 0x0F	; 15
     b26:	41 f0       	breq	.+16     	; 0xb38 <EXTINT_voidDisable+0x14>
     b28:	8e 31       	cpi	r24, 0x1E	; 30
     b2a:	51 f0       	breq	.+20     	; 0xb40 <EXTINT_voidDisable+0x1c>
     b2c:	81 11       	cpse	r24, r1
     b2e:	0b c0       	rjmp	.+22     	; 0xb46 <EXTINT_voidDisable+0x22>
     b30:	8b b7       	in	r24, 0x3b	; 59
     b32:	8f 7b       	andi	r24, 0xBF	; 191
     b34:	8b bf       	out	0x3b, r24	; 59
     b36:	08 95       	ret
     b38:	8b b7       	in	r24, 0x3b	; 59
     b3a:	8f 77       	andi	r24, 0x7F	; 127
     b3c:	8b bf       	out	0x3b, r24	; 59
     b3e:	08 95       	ret
     b40:	8b b7       	in	r24, 0x3b	; 59
     b42:	8f 7d       	andi	r24, 0xDF	; 223
     b44:	8b bf       	out	0x3b, r24	; 59
     b46:	08 95       	ret

00000b48 <EXTINT_voidGlobalIntEnable>:
     b48:	8f b7       	in	r24, 0x3f	; 63
     b4a:	80 68       	ori	r24, 0x80	; 128
     b4c:	8f bf       	out	0x3f, r24	; 63
     b4e:	08 95       	ret

00000b50 <__vector_1>:
	
		
}*/

ISR(INT0_vect)
{
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	dio_vidFlipChannel(DIO_PORTA,DIO_PIN6);
     b72:	66 e0       	ldi	r22, 0x06	; 6
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	0e 94 b1 04 	call	0x962	; 0x962 <dio_vidFlipChannel>
	Callback_INT0();
     b7a:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <Callback_INT0>
     b7e:	f0 91 e3 00 	lds	r31, 0x00E3	; 0x8000e3 <Callback_INT0+0x1>
     b82:	09 95       	icall
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <I2C_Init>:

#include "I2C.h"

void I2C_Init(void)
{
	I2C_TWSR_REG=0x00;  // set prescaler bits  to zero
     ba6:	11 b8       	out	0x01, r1	; 1
	I2C_TWBR_REG=32;    // SCL freq. is 100k for XTAL=8M
     ba8:	80 e2       	ldi	r24, 0x20	; 32
     baa:	80 b9       	out	0x00, r24	; 0
	I2C_TWCR_REG=0x04;
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	86 bf       	out	0x36, r24	; 54
     bb0:	08 95       	ret

00000bb2 <I2C_Start>:
} // enable TWI module

void I2C_Start(void){
	I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);
     bb2:	84 ea       	ldi	r24, 0xA4	; 164
     bb4:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR_REG & (1<<TWINT))); 
     bb6:	06 b6       	in	r0, 0x36	; 54
     bb8:	07 fe       	sbrs	r0, 7
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <I2C_Start+0x4>
}
     bbc:	08 95       	ret

00000bbe <I2C_Stop>:

void I2C_Stop(void){
I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     bbe:	84 e9       	ldi	r24, 0x94	; 148
     bc0:	86 bf       	out	0x36, r24	; 54
     bc2:	08 95       	ret

00000bc4 <I2C_Write>:
}

void I2C_Write(unsigned char data){
	I2C_TWDR_REG = data;
     bc4:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN) ;
     bc6:	84 e8       	ldi	r24, 0x84	; 132
     bc8:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR_REG & (1<<TWINT) ) ) ;
     bca:	06 b6       	in	r0, 0x36	; 54
     bcc:	07 fe       	sbrs	r0, 7
     bce:	fd cf       	rjmp	.-6      	; 0xbca <I2C_Write+0x6>
}
     bd0:	08 95       	ret

00000bd2 <I2C_Read>:

u8 I2C_Read(unsigned char ack)
{
	I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN)|(ack<<TWEA) ;
     bd2:	20 e4       	ldi	r18, 0x40	; 64
     bd4:	82 9f       	mul	r24, r18
     bd6:	c0 01       	movw	r24, r0
     bd8:	11 24       	eor	r1, r1
     bda:	84 68       	ori	r24, 0x84	; 132
     bdc:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR_REG & (1<<TWINT) ) ) ; 
     bde:	06 b6       	in	r0, 0x36	; 54
     be0:	07 fe       	sbrs	r0, 7
     be2:	fd cf       	rjmp	.-6      	; 0xbde <I2C_Read+0xc>
	return I2C_TWDR_REG; 
     be4:	83 b1       	in	r24, 0x03	; 3
}
     be6:	08 95       	ret

00000be8 <PWM_voidInit>:
      
    else
    {
        // <TODO ERROR> DC OUT OF RANGE
    }
}
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	89 f0       	breq	.+34     	; 0xc12 <PWM_voidInit+0x2a>
     bf0:	20 f0       	brcs	.+8      	; 0xbfa <PWM_voidInit+0x12>
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <PWM_voidInit+0x10>
     bf6:	5e c0       	rjmp	.+188    	; 0xcb4 <PWM_voidInit+0xcc>
     bf8:	08 95       	ret
     bfa:	93 b7       	in	r25, 0x33	; 51
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	89 2b       	or	r24, r25
     c00:	83 bf       	out	0x33, r24	; 51
     c02:	83 b7       	in	r24, 0x33	; 51
     c04:	88 7f       	andi	r24, 0xF8	; 248
     c06:	83 bf       	out	0x33, r24	; 51
     c08:	93 b7       	in	r25, 0x33	; 51
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	89 2b       	or	r24, r25
     c0e:	83 bf       	out	0x33, r24	; 51
     c10:	08 95       	ret
     c12:	9f b5       	in	r25, 0x2f	; 47
     c14:	81 81       	ldd	r24, Z+1	; 0x01
     c16:	83 70       	andi	r24, 0x03	; 3
     c18:	89 2b       	or	r24, r25
     c1a:	8f bd       	out	0x2f, r24	; 47
     c1c:	2e b5       	in	r18, 0x2e	; 46
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	96 95       	lsr	r25
     c22:	96 95       	lsr	r25
     c24:	89 2f       	mov	r24, r25
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 2b       	or	r24, r18
     c36:	8e bd       	out	0x2e, r24	; 46
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	c1 f0       	breq	.+48     	; 0xc6e <PWM_voidInit+0x86>
     c3e:	28 f4       	brcc	.+10     	; 0xc4a <PWM_voidInit+0x62>
     c40:	88 23       	and	r24, r24
     c42:	49 f0       	breq	.+18     	; 0xc56 <PWM_voidInit+0x6e>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	61 f0       	breq	.+24     	; 0xc60 <PWM_voidInit+0x78>
     c48:	2d c0       	rjmp	.+90     	; 0xca4 <PWM_voidInit+0xbc>
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	f1 f0       	breq	.+60     	; 0xc8a <PWM_voidInit+0xa2>
     c4e:	b0 f0       	brcs	.+44     	; 0xc7c <PWM_voidInit+0x94>
     c50:	85 30       	cpi	r24, 0x05	; 5
     c52:	11 f1       	breq	.+68     	; 0xc98 <PWM_voidInit+0xb0>
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <PWM_voidInit+0xbc>
     c56:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <TIMER1_Prescaler+0x1>
     c5a:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <TIMER1_Prescaler>
     c5e:	22 c0       	rjmp	.+68     	; 0xca4 <PWM_voidInit+0xbc>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <TIMER1_Prescaler+0x1>
     c68:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <TIMER1_Prescaler>
     c6c:	1b c0       	rjmp	.+54     	; 0xca4 <PWM_voidInit+0xbc>
     c6e:	88 e0       	ldi	r24, 0x08	; 8
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <TIMER1_Prescaler+0x1>
     c76:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <TIMER1_Prescaler>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <PWM_voidInit+0xbc>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <TIMER1_Prescaler+0x1>
     c84:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <TIMER1_Prescaler>
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <PWM_voidInit+0xbc>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <TIMER1_Prescaler+0x1>
     c92:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <TIMER1_Prescaler>
     c96:	06 c0       	rjmp	.+12     	; 0xca4 <PWM_voidInit+0xbc>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	94 e0       	ldi	r25, 0x04	; 4
     c9c:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <TIMER1_Prescaler+0x1>
     ca0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <TIMER1_Prescaler>
     ca4:	8e b5       	in	r24, 0x2e	; 46
     ca6:	88 7f       	andi	r24, 0xF8	; 248
     ca8:	8e bd       	out	0x2e, r24	; 46
     caa:	9e b5       	in	r25, 0x2e	; 46
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	89 2b       	or	r24, r25
     cb0:	8e bd       	out	0x2e, r24	; 46
     cb2:	08 95       	ret
     cb4:	95 b5       	in	r25, 0x25	; 37
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	89 2b       	or	r24, r25
     cba:	85 bd       	out	0x25, r24	; 37
     cbc:	85 b5       	in	r24, 0x25	; 37
     cbe:	88 7f       	andi	r24, 0xF8	; 248
     cc0:	85 bd       	out	0x25, r24	; 37
     cc2:	95 b5       	in	r25, 0x25	; 37
     cc4:	82 81       	ldd	r24, Z+2	; 0x02
     cc6:	89 2b       	or	r24, r25
     cc8:	85 bd       	out	0x25, r24	; 37
     cca:	08 95       	ret

00000ccc <PWM_voidSetOCPin>:
     ccc:	fc 01       	movw	r30, r24
     cce:	80 81       	ld	r24, Z
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	41 f0       	breq	.+16     	; 0xce4 <PWM_voidSetOCPin+0x18>
     cd4:	18 f0       	brcs	.+6      	; 0xcdc <PWM_voidSetOCPin+0x10>
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	49 f0       	breq	.+18     	; 0xcec <PWM_voidSetOCPin+0x20>
     cda:	08 95       	ret
     cdc:	83 b7       	in	r24, 0x33	; 51
     cde:	68 2b       	or	r22, r24
     ce0:	63 bf       	out	0x33, r22	; 51
     ce2:	08 95       	ret
     ce4:	8f b5       	in	r24, 0x2f	; 47
     ce6:	68 2b       	or	r22, r24
     ce8:	6f bd       	out	0x2f, r22	; 47
     cea:	08 95       	ret
     cec:	85 b5       	in	r24, 0x25	; 37
     cee:	68 2b       	or	r22, r24
     cf0:	65 bd       	out	0x25, r22	; 37
     cf2:	08 95       	ret

00000cf4 <PWM_voidPhaseFrequencyCorrectSetValues>:
else
{
    // ANTI GLITCH DISABLED 
    // GOTO ANTI GLITCH MODE BY 
    // SET WGM13 = 1    WGM12=0    WGM11=0      WGM10=0 
    SET_BIT(TIM_TCCR1B,TCCR1B_WGM13);
     cf4:	8e b5       	in	r24, 0x2e	; 46
     cf6:	80 61       	ori	r24, 0x10	; 16
     cf8:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TIM_TCCR1B,TCCR1B_WGM12);
     cfa:	8e b5       	in	r24, 0x2e	; 46
     cfc:	87 7f       	andi	r24, 0xF7	; 247
     cfe:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TIM_TCCR1A,TCCR1A_WGM10);
     d00:	8f b5       	in	r24, 0x2f	; 47
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TIM_TCCR1A,TCCR1A_WGM11);
     d06:	8f b5       	in	r24, 0x2f	; 47
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8f bd       	out	0x2f, r24	; 47
    // Calculation and set OCR1A as a Top NOT This Freq During Up-Down Count so we need Half of it to calc TOP val
    TIM_ICR1 = copy_u16TopValue ;
     d0c:	57 bd       	out	0x27, r21	; 39
     d0e:	46 bd       	out	0x26, r20	; 38
    /*	CHK WHICH PIN USED	*/
    if(setOCpinMode == PWM1_PD4_FM_NON_INVERTING ||setOCpinMode == PWM1_PD4_FM_INVERTING )
     d10:	60 32       	cpi	r22, 0x20	; 32
     d12:	11 f0       	breq	.+4      	; 0xd18 <PWM_voidPhaseFrequencyCorrectSetValues+0x24>
     d14:	60 33       	cpi	r22, 0x30	; 48
     d16:	19 f4       	brne	.+6      	; 0xd1e <PWM_voidPhaseFrequencyCorrectSetValues+0x2a>
    {
            TIM_OCR1B = copy_u16CompValue ; 				
     d18:	39 bd       	out	0x29, r19	; 41
     d1a:	28 bd       	out	0x28, r18	; 40
     d1c:	08 95       	ret

    }
    else if (setOCpinMode == PWM1_PD5_FM_NON_INVERTING ||setOCpinMode == PWM1_PD5_FM_INVERTING)
     d1e:	60 38       	cpi	r22, 0x80	; 128
     d20:	11 f0       	breq	.+4      	; 0xd26 <PWM_voidPhaseFrequencyCorrectSetValues+0x32>
     d22:	60 3c       	cpi	r22, 0xC0	; 192
     d24:	11 f4       	brne	.+4      	; 0xd2a <PWM_voidPhaseFrequencyCorrectSetValues+0x36>
    {
        TIM_OCR1A = copy_u16CompValue ; 				
     d26:	3b bd       	out	0x2b, r19	; 43
     d28:	2a bd       	out	0x2a, r18	; 42
     d2a:	08 95       	ret

00000d2c <SLEEP_MODEvoidEnable>:
#include "SLEEP_MODE.h"


void SLEEP_MODEvoidEnable(u8 mode)
{
		MCUCR_reg|=(mode<<4);
     d2c:	25 b7       	in	r18, 0x35	; 53
     d2e:	30 e1       	ldi	r19, 0x10	; 16
     d30:	83 9f       	mul	r24, r19
     d32:	c0 01       	movw	r24, r0
     d34:	11 24       	eor	r1, r1
     d36:	82 2b       	or	r24, r18
     d38:	85 bf       	out	0x35, r24	; 53
		MCUCR_reg|=(1<<7);
     d3a:	85 b7       	in	r24, 0x35	; 53
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	85 bf       	out	0x35, r24	; 53
     d40:	08 95       	ret

00000d42 <Timer_voidInitTimer0>:
        // <TODO ERROR> This Feature supported only for timer1
    }
}
void Timer_voidGetFlagsRegStatus(u8 * ptr_u8Reg)
{
	* ptr_u8Reg = TIM_TIFR ; 
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	e1 f1       	breq	.+120    	; 0xdbe <Timer_voidInitTimer0+0x7c>
     d46:	13 be       	out	0x33, r1	; 51
     d48:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <GLOBAL_ptrToTimer0UserConf+0x1>
     d4c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <GLOBAL_ptrToTimer0UserConf>
     d50:	23 b7       	in	r18, 0x33	; 51
     d52:	fc 01       	movw	r30, r24
     d54:	80 81       	ld	r24, Z
     d56:	82 2b       	or	r24, r18
     d58:	83 bf       	out	0x33, r24	; 51
     d5a:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <GLOBAL_ptrToTimer0UserConf>
     d5e:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <GLOBAL_ptrToTimer0UserConf+0x1>
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	b9 f0       	breq	.+46     	; 0xd96 <Timer_voidInitTimer0+0x54>
     d68:	28 f4       	brcc	.+10     	; 0xd74 <Timer_voidInitTimer0+0x32>
     d6a:	88 23       	and	r24, r24
     d6c:	41 f0       	breq	.+16     	; 0xd7e <Timer_voidInitTimer0+0x3c>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	59 f0       	breq	.+22     	; 0xd88 <Timer_voidInitTimer0+0x46>
     d72:	08 95       	ret
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	b1 f0       	breq	.+44     	; 0xda4 <Timer_voidInitTimer0+0x62>
     d78:	85 30       	cpi	r24, 0x05	; 5
     d7a:	d9 f0       	breq	.+54     	; 0xdb2 <Timer_voidInitTimer0+0x70>
     d7c:	08 95       	ret
     d7e:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <Timer0Prescaler+0x1>
     d82:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <Timer0Prescaler>
     d86:	08 95       	ret
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Timer0Prescaler+0x1>
     d90:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Timer0Prescaler>
     d94:	08 95       	ret
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Timer0Prescaler+0x1>
     d9e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Timer0Prescaler>
     da2:	08 95       	ret
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Timer0Prescaler+0x1>
     dac:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Timer0Prescaler>
     db0:	08 95       	ret
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	94 e0       	ldi	r25, 0x04	; 4
     db6:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <Timer0Prescaler+0x1>
     dba:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <Timer0Prescaler>
     dbe:	08 95       	ret

00000dc0 <Timer_voidInitTimer2>:
     dc0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     dc4:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	09 f4       	brne	.+2      	; 0xdce <Timer_voidInitTimer2+0xe>
     dcc:	6e c0       	rjmp	.+220    	; 0xeaa <Timer_voidInitTimer2+0xea>
     dce:	fc 01       	movw	r30, r24
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <Timer_voidInitTimer2+0x4a>
     dd6:	89 b7       	in	r24, 0x39	; 57
     dd8:	8f 77       	andi	r24, 0x7F	; 127
     dda:	89 bf       	out	0x39, r24	; 57
     ddc:	89 b7       	in	r24, 0x39	; 57
     dde:	8f 7b       	andi	r24, 0xBF	; 191
     de0:	89 bf       	out	0x39, r24	; 57
     de2:	82 b5       	in	r24, 0x22	; 34
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	82 bd       	out	0x22, r24	; 34
     de8:	14 bc       	out	0x24, r1	; 36
     dea:	15 bc       	out	0x25, r1	; 37
     dec:	82 b5       	in	r24, 0x22	; 34
     dee:	85 70       	andi	r24, 0x05	; 5
     df0:	e9 f7       	brne	.-6      	; 0xdec <Timer_voidInitTimer2+0x2c>
     df2:	95 b5       	in	r25, 0x25	; 37
     df4:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     df8:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	89 2b       	or	r24, r25
     e00:	85 bd       	out	0x25, r24	; 37
     e02:	02 b4       	in	r0, 0x22	; 34
     e04:	00 fc       	sbrc	r0, 0
     e06:	fd cf       	rjmp	.-6      	; 0xe02 <Timer_voidInitTimer2+0x42>
     e08:	0c c0       	rjmp	.+24     	; 0xe22 <Timer_voidInitTimer2+0x62>
     e0a:	15 bc       	out	0x25, r1	; 37
     e0c:	95 b5       	in	r25, 0x25	; 37
     e0e:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     e12:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	89 2b       	or	r24, r25
     e1a:	85 bd       	out	0x25, r24	; 37
     e1c:	82 b5       	in	r24, 0x22	; 34
     e1e:	87 7f       	andi	r24, 0xF7	; 247
     e20:	82 bd       	out	0x22, r24	; 34
     e22:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     e26:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     e2a:	e1 81       	ldd	r30, Z+1	; 0x01
     e2c:	8e 2f       	mov	r24, r30
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	88 30       	cpi	r24, 0x08	; 8
     e32:	91 05       	cpc	r25, r1
     e34:	d0 f5       	brcc	.+116    	; 0xeaa <Timer_voidInitTimer2+0xea>
     e36:	fc 01       	movw	r30, r24
     e38:	e6 5d       	subi	r30, 0xD6	; 214
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__tablejump2__>
     e40:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <Timer2Prescaler+0x1>
     e44:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <Timer2Prescaler>
     e48:	08 95       	ret
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     e52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     e56:	08 95       	ret
     e58:	88 e0       	ldi	r24, 0x08	; 8
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     e60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     e64:	08 95       	ret
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     e6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     e72:	08 95       	ret
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     e7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     e80:	08 95       	ret
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     e8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     e8e:	08 95       	ret
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     e98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     e9c:	08 95       	ret
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer2Prescaler+0x1>
     ea6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer2Prescaler>
     eaa:	08 95       	ret

00000eac <Timer_voidStartTimer>:
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	b1 f0       	breq	.+44     	; 0xedc <Timer_voidStartTimer+0x30>
     eb0:	18 f0       	brcs	.+6      	; 0xeb8 <Timer_voidStartTimer+0xc>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	29 f1       	breq	.+74     	; 0xf00 <Timer_voidStartTimer+0x54>
     eb6:	08 95       	ret
     eb8:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <GLOBAL_ptrToTimer0UserConf>
     ebc:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <GLOBAL_ptrToTimer0UserConf+0x1>
     ec0:	89 2b       	or	r24, r25
     ec2:	c9 f1       	breq	.+114    	; 0xf36 <Timer_voidStartTimer+0x8a>
     ec4:	83 b7       	in	r24, 0x33	; 51
     ec6:	88 7f       	andi	r24, 0xF8	; 248
     ec8:	83 bf       	out	0x33, r24	; 51
     eca:	93 b7       	in	r25, 0x33	; 51
     ecc:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <GLOBAL_ptrToTimer0UserConf>
     ed0:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <GLOBAL_ptrToTimer0UserConf+0x1>
     ed4:	81 81       	ldd	r24, Z+1	; 0x01
     ed6:	89 2b       	or	r24, r25
     ed8:	83 bf       	out	0x33, r24	; 51
     eda:	08 95       	ret
     edc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <GLOBAL_ptrToTimer1UserConf>
     ee0:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <GLOBAL_ptrToTimer1UserConf+0x1>
     ee4:	89 2b       	or	r24, r25
     ee6:	39 f1       	breq	.+78     	; 0xf36 <Timer_voidStartTimer+0x8a>
     ee8:	8e b5       	in	r24, 0x2e	; 46
     eea:	88 7f       	andi	r24, 0xF8	; 248
     eec:	8e bd       	out	0x2e, r24	; 46
     eee:	9e b5       	in	r25, 0x2e	; 46
     ef0:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <GLOBAL_ptrToTimer1UserConf>
     ef4:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <GLOBAL_ptrToTimer1UserConf+0x1>
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	89 2b       	or	r24, r25
     efc:	8e bd       	out	0x2e, r24	; 46
     efe:	08 95       	ret
     f00:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     f04:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     f08:	89 2b       	or	r24, r25
     f0a:	a9 f0       	breq	.+42     	; 0xf36 <Timer_voidStartTimer+0x8a>
     f0c:	85 b5       	in	r24, 0x25	; 37
     f0e:	88 7f       	andi	r24, 0xF8	; 248
     f10:	85 bd       	out	0x25, r24	; 37
     f12:	95 b5       	in	r25, 0x25	; 37
     f14:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     f18:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	89 2b       	or	r24, r25
     f20:	85 bd       	out	0x25, r24	; 37
     f22:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     f26:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     f2a:	80 81       	ld	r24, Z
     f2c:	88 23       	and	r24, r24
     f2e:	19 f0       	breq	.+6      	; 0xf36 <Timer_voidStartTimer+0x8a>
     f30:	02 b4       	in	r0, 0x22	; 34
     f32:	00 fc       	sbrc	r0, 0
     f34:	fd cf       	rjmp	.-6      	; 0xf30 <Timer_voidStartTimer+0x84>
     f36:	08 95       	ret

00000f38 <Timer_voidStopTimer>:
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	41 f0       	breq	.+16     	; 0xf4c <Timer_voidStopTimer+0x14>
     f3c:	18 f0       	brcs	.+6      	; 0xf44 <Timer_voidStopTimer+0xc>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	49 f0       	breq	.+18     	; 0xf54 <Timer_voidStopTimer+0x1c>
     f42:	08 95       	ret
     f44:	83 b7       	in	r24, 0x33	; 51
     f46:	88 7f       	andi	r24, 0xF8	; 248
     f48:	83 bf       	out	0x33, r24	; 51
     f4a:	08 95       	ret
     f4c:	8e b5       	in	r24, 0x2e	; 46
     f4e:	88 7f       	andi	r24, 0xF8	; 248
     f50:	8e bd       	out	0x2e, r24	; 46
     f52:	08 95       	ret
     f54:	85 b5       	in	r24, 0x25	; 37
     f56:	88 7f       	andi	r24, 0xF8	; 248
     f58:	85 bd       	out	0x25, r24	; 37
     f5a:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
     f5e:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
     f62:	80 81       	ld	r24, Z
     f64:	88 23       	and	r24, r24
     f66:	19 f0       	breq	.+6      	; 0xf6e <Timer_voidStopTimer+0x36>
     f68:	02 b4       	in	r0, 0x22	; 34
     f6a:	00 fc       	sbrc	r0, 0
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <Timer_voidStopTimer+0x30>
     f6e:	08 95       	ret

00000f70 <Timer_voidSetBusyWait_ms>:
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	cf 93       	push	r28
     f82:	7b 01       	movw	r14, r22
     f84:	88 23       	and	r24, r24
     f86:	21 f0       	breq	.+8      	; 0xf90 <Timer_voidSetBusyWait_ms+0x20>
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f4       	brne	.+2      	; 0xf8e <Timer_voidSetBusyWait_ms+0x1e>
     f8c:	5b c0       	rjmp	.+182    	; 0x1044 <Timer_voidSetBusyWait_ms+0xd4>
     f8e:	d5 c0       	rjmp	.+426    	; 0x113a <Timer_voidSetBusyWait_ms+0x1ca>
     f90:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <Timer0Prescaler>
     f94:	70 91 fb 00 	lds	r23, 0x00FB	; 0x8000fb <Timer0Prescaler+0x1>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__floatunsisf>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	8a e7       	ldi	r24, 0x7A	; 122
     faa:	96 e4       	ldi	r25, 0x46	; 70
     fac:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divsf3>
     fb0:	4b 01       	movw	r8, r22
     fb2:	5c 01       	movw	r10, r24
     fb4:	b7 01       	movw	r22, r14
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__floatunsisf>
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	c5 01       	movw	r24, r10
     fc4:	b4 01       	movw	r22, r8
     fc6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     fca:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
     fce:	6b 01       	movw	r12, r22
     fd0:	7c 01       	movw	r14, r24
     fd2:	c9 b7       	in	r28, 0x39	; 57
     fd4:	c1 70       	andi	r28, 0x01	; 1
     fd6:	89 b7       	in	r24, 0x39	; 57
     fd8:	8b 7f       	andi	r24, 0xFB	; 251
     fda:	89 bf       	out	0x39, r24	; 57
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 9c 07 	call	0xf38	; 0xf38 <Timer_voidStopTimer>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 56 07 	call	0xeac	; 0xeac <Timer_voidStartTimer>
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	c8 16       	cp	r12, r24
     fec:	d1 04       	cpc	r13, r1
     fee:	e1 04       	cpc	r14, r1
     ff0:	f1 04       	cpc	r15, r1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <Timer_voidSetBusyWait_ms+0x86>
     ff4:	20 f4       	brcc	.+8      	; 0xffe <Timer_voidSetBusyWait_ms+0x8e>
     ff6:	82 b7       	in	r24, 0x32	; 50
     ff8:	8c 15       	cp	r24, r12
     ffa:	e8 f3       	brcs	.-6      	; 0xff6 <Timer_voidSetBusyWait_ms+0x86>
     ffc:	1f c0       	rjmp	.+62     	; 0x103c <Timer_voidSetBusyWait_ms+0xcc>
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	2f ef       	ldi	r18, 0xFF	; 255
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 c7 0b 	call	0x178e	; 0x178e <__udivmodsi4>
    100e:	69 01       	movw	r12, r18
    1010:	7a 01       	movw	r14, r20
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	dc 01       	movw	r26, r24
    1018:	08 c0       	rjmp	.+16     	; 0x102a <Timer_voidSetBusyWait_ms+0xba>
    101a:	08 b6       	in	r0, 0x38	; 56
    101c:	00 fe       	sbrs	r0, 0
    101e:	fd cf       	rjmp	.-6      	; 0x101a <Timer_voidSetBusyWait_ms+0xaa>
    1020:	31 e0       	ldi	r19, 0x01	; 1
    1022:	38 bf       	out	0x38, r19	; 56
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	a1 1d       	adc	r26, r1
    1028:	b1 1d       	adc	r27, r1
    102a:	b7 01       	movw	r22, r14
    102c:	a6 01       	movw	r20, r12
    102e:	66 27       	eor	r22, r22
    1030:	77 27       	eor	r23, r23
    1032:	84 17       	cp	r24, r20
    1034:	95 07       	cpc	r25, r21
    1036:	a6 07       	cpc	r26, r22
    1038:	b7 07       	cpc	r27, r23
    103a:	78 f3       	brcs	.-34     	; 0x101a <Timer_voidSetBusyWait_ms+0xaa>
    103c:	89 b7       	in	r24, 0x39	; 57
    103e:	c8 2b       	or	r28, r24
    1040:	c9 bf       	out	0x39, r28	; 57
    1042:	7b c0       	rjmp	.+246    	; 0x113a <Timer_voidSetBusyWait_ms+0x1ca>
    1044:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <GLOBAL_ptrToTimer2UserConf>
    1048:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <GLOBAL_ptrToTimer2UserConf+0x1>
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	41 f0       	breq	.+16     	; 0x1062 <Timer_voidSetBusyWait_ms+0xf2>
    1052:	0f 2e       	mov	r0, r31
    1054:	81 2c       	mov	r8, r1
    1056:	91 2c       	mov	r9, r1
    1058:	a1 2c       	mov	r10, r1
    105a:	f2 e4       	ldi	r31, 0x42	; 66
    105c:	bf 2e       	mov	r11, r31
    105e:	f0 2d       	mov	r31, r0
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <Timer_voidSetBusyWait_ms+0x102>
    1062:	0f 2e       	mov	r0, r31
    1064:	81 2c       	mov	r8, r1
    1066:	91 2c       	mov	r9, r1
    1068:	fa e7       	ldi	r31, 0x7A	; 122
    106a:	af 2e       	mov	r10, r31
    106c:	f6 e4       	ldi	r31, 0x46	; 70
    106e:	bf 2e       	mov	r11, r31
    1070:	f0 2d       	mov	r31, r0
    1072:	60 91 e8 00 	lds	r22, 0x00E8	; 0x8000e8 <Timer2Prescaler>
    1076:	70 91 e9 00 	lds	r23, 0x00E9	; 0x8000e9 <Timer2Prescaler+0x1>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__floatunsisf>
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	c5 01       	movw	r24, r10
    1088:	b4 01       	movw	r22, r8
    108a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divsf3>
    108e:	4b 01       	movw	r8, r22
    1090:	5c 01       	movw	r10, r24
    1092:	b7 01       	movw	r22, r14
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__floatunsisf>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	c5 01       	movw	r24, r10
    10a2:	b4 01       	movw	r22, r8
    10a4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
    10a8:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
    10ac:	6b 01       	movw	r12, r22
    10ae:	7c 01       	movw	r14, r24
    10b0:	89 b7       	in	r24, 0x39	; 57
    10b2:	86 fb       	bst	r24, 6
    10b4:	cc 27       	eor	r28, r28
    10b6:	c0 f9       	bld	r28, 0
    10b8:	89 b7       	in	r24, 0x39	; 57
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	89 bf       	out	0x39, r24	; 57
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	0e 94 9c 07 	call	0xf38	; 0xf38 <Timer_voidStopTimer>
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	0e 94 56 07 	call	0xeac	; 0xeac <Timer_voidStartTimer>
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	c8 16       	cp	r12, r24
    10ce:	d1 04       	cpc	r13, r1
    10d0:	e1 04       	cpc	r14, r1
    10d2:	f1 04       	cpc	r15, r1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <Timer_voidSetBusyWait_ms+0x168>
    10d6:	20 f4       	brcc	.+8      	; 0x10e0 <Timer_voidSetBusyWait_ms+0x170>
    10d8:	84 b5       	in	r24, 0x24	; 36
    10da:	8c 15       	cp	r24, r12
    10dc:	e8 f3       	brcs	.-6      	; 0x10d8 <Timer_voidSetBusyWait_ms+0x168>
    10de:	1f c0       	rjmp	.+62     	; 0x111e <Timer_voidSetBusyWait_ms+0x1ae>
    10e0:	c7 01       	movw	r24, r14
    10e2:	b6 01       	movw	r22, r12
    10e4:	2f ef       	ldi	r18, 0xFF	; 255
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	0e 94 c7 0b 	call	0x178e	; 0x178e <__udivmodsi4>
    10f0:	69 01       	movw	r12, r18
    10f2:	7a 01       	movw	r14, r20
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	dc 01       	movw	r26, r24
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <Timer_voidSetBusyWait_ms+0x19c>
    10fc:	08 b6       	in	r0, 0x38	; 56
    10fe:	06 fe       	sbrs	r0, 6
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <Timer_voidSetBusyWait_ms+0x18c>
    1102:	30 e4       	ldi	r19, 0x40	; 64
    1104:	38 bf       	out	0x38, r19	; 56
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	a1 1d       	adc	r26, r1
    110a:	b1 1d       	adc	r27, r1
    110c:	b7 01       	movw	r22, r14
    110e:	a6 01       	movw	r20, r12
    1110:	66 27       	eor	r22, r22
    1112:	77 27       	eor	r23, r23
    1114:	84 17       	cp	r24, r20
    1116:	95 07       	cpc	r25, r21
    1118:	a6 07       	cpc	r26, r22
    111a:	b7 07       	cpc	r27, r23
    111c:	78 f3       	brcs	.-34     	; 0x10fc <Timer_voidSetBusyWait_ms+0x18c>
    111e:	29 b7       	in	r18, 0x39	; 57
    1120:	8c 2f       	mov	r24, r28
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	00 24       	eor	r0, r0
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	07 94       	ror	r0
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	07 94       	ror	r0
    1132:	98 2f       	mov	r25, r24
    1134:	80 2d       	mov	r24, r0
    1136:	82 2b       	or	r24, r18
    1138:	89 bf       	out	0x39, r24	; 57
    113a:	cf 91       	pop	r28
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	9f 90       	pop	r9
    114a:	8f 90       	pop	r8
    114c:	08 95       	ret

0000114e <__vector_19>:
}
/******************************************************************************
* Private Function Definitions
*******************************************************************************/
void __vector_19(void)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	2f 93       	push	r18
    115a:	3f 93       	push	r19
    115c:	4f 93       	push	r20
    115e:	5f 93       	push	r21
    1160:	6f 93       	push	r22
    1162:	7f 93       	push	r23
    1164:	8f 93       	push	r24
    1166:	9f 93       	push	r25
    1168:	af 93       	push	r26
    116a:	bf 93       	push	r27
    116c:	ef 93       	push	r30
    116e:	ff 93       	push	r31
    static u16 copy_u16NumberofOverflows = 0 ;  
    if(Global_u8Timer0Interval == PERIODIC)
    1170:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <Global_u8Timer0Interval>
    1174:	81 11       	cpse	r24, r1
    1176:	1b c0       	rjmp	.+54     	; 0x11ae <__vector_19+0x60>
    {
        // Default 
       if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
    1178:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <copy_u16NumberofOverflows.2017>
    117c:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <copy_u16NumberofOverflows.2017+0x1>
    1180:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <Global_u16NumberOfOverflowsInCTC>
    1184:	30 91 f8 00 	lds	r19, 0x00F8	; 0x8000f8 <Global_u16NumberOfOverflowsInCTC+0x1>
    1188:	82 17       	cp	r24, r18
    118a:	93 07       	cpc	r25, r19
    118c:	30 f4       	brcc	.+12     	; 0x119a <__vector_19+0x4c>
        {
            copy_u16NumberofOverflows++  ;     
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <copy_u16NumberofOverflows.2017+0x1>
    1194:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <copy_u16NumberofOverflows.2017>
    1198:	3a c0       	rjmp	.+116    	; 0x120e <__vector_19+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Periodic(); 
    119a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <TIMER0_CTC_CallBack_Periodic>
    119e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <TIMER0_CTC_CallBack_Periodic+0x1>
    11a2:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
    11a4:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <copy_u16NumberofOverflows.2017+0x1>
    11a8:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <copy_u16NumberofOverflows.2017>
    11ac:	30 c0       	rjmp	.+96     	; 0x120e <__vector_19+0xc0>
        }   
    }
    else if(Global_u8Timer0Interval == SINGLE)
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	f1 f4       	brne	.+60     	; 0x11ee <__vector_19+0xa0>
    {
        //Single 
        if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
    11b2:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <copy_u16NumberofOverflows.2017>
    11b6:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <copy_u16NumberofOverflows.2017+0x1>
    11ba:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <Global_u16NumberOfOverflowsInCTC>
    11be:	30 91 f8 00 	lds	r19, 0x00F8	; 0x8000f8 <Global_u16NumberOfOverflowsInCTC+0x1>
    11c2:	82 17       	cp	r24, r18
    11c4:	93 07       	cpc	r25, r19
    11c6:	30 f4       	brcc	.+12     	; 0x11d4 <__vector_19+0x86>
        {
            copy_u16NumberofOverflows++  ;     
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <copy_u16NumberofOverflows.2017+0x1>
    11ce:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <copy_u16NumberofOverflows.2017>
    11d2:	1d c0       	rjmp	.+58     	; 0x120e <__vector_19+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Single(); 
    11d4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <TIMER0_CTC_CallBack_Single>
    11d8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <TIMER0_CTC_CallBack_Single+0x1>
    11dc:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
    11de:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <copy_u16NumberofOverflows.2017+0x1>
    11e2:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <copy_u16NumberofOverflows.2017>
			Timer_voidStopTimer(TIMER0);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 9c 07 	call	0xf38	; 0xf38 <Timer_voidStopTimer>
    11ec:	10 c0       	rjmp	.+32     	; 0x120e <__vector_19+0xc0>
        }
    }
    else
    {
        // PWM Mode
        if(Global_u8PWM_State == PWM_HIGH_PER)
    11ee:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <Global_u8PWM_State>
    11f2:	81 11       	cpse	r24, r1
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <__vector_19+0xb6>
        {
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Toff ;
    11f6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <Global_u8PWM_Toff>
    11fa:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_LOW_PER ; 
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Global_u8PWM_State>
    1202:	05 c0       	rjmp	.+10     	; 0x120e <__vector_19+0xc0>
        }
        else
        {            
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Ton ;
    1204:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <Global_u8PWM_Ton>
    1208:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_HIGH_PER ;
    120a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <Global_u8PWM_State>
        }
    }
    //Clear Compare Match Interrupt Fag
    TIM_TIFR = (1<<TIFR_OCF0);
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	88 bf       	out	0x38, r24	; 56
}
    1212:	ff 91       	pop	r31
    1214:	ef 91       	pop	r30
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	7f 91       	pop	r23
    1220:	6f 91       	pop	r22
    1222:	5f 91       	pop	r21
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_9>:

void __vector_9(void)
{
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	TIMER0_OV_CallBack();
    1256:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <TIMER0_OV_CallBack>
    125a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <TIMER0_OV_CallBack+0x1>
    125e:	09 95       	icall


    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV0);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	88 bf       	out	0x38, r24	; 56
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_8>:
        }
    }
    return (copy_u16MaxCounterVal- 20 + LOC_u8Index ) ;
}
void __vector_8(void)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    TIMER1_OV_CallBack(); 
    12a8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <TIMER1_OV_CallBack>
    12ac:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <TIMER1_OV_CallBack+0x1>
    12b0:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV1);
    12b2:	84 e0       	ldi	r24, 0x04	; 4
    12b4:	88 bf       	out	0x38, r24	; 56
}
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_4>:
void __vector_4(void)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
    TIMER2_OV_CallBack(); 
    12fa:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <TIMER2_OV_CallBack>
    12fe:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <TIMER2_OV_CallBack+0x1>
    1302:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV2);
    1304:	80 e4       	ldi	r24, 0x40	; 64
    1306:	88 bf       	out	0x38, r24	; 56
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	bf 91       	pop	r27
    130e:	af 91       	pop	r26
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	7f 91       	pop	r23
    1316:	6f 91       	pop	r22
    1318:	5f 91       	pop	r21
    131a:	4f 91       	pop	r20
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_5>:
void __vector_5(void)
{
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	4f 93       	push	r20
    133a:	5f 93       	push	r21
    133c:	6f 93       	push	r22
    133e:	7f 93       	push	r23
    1340:	8f 93       	push	r24
    1342:	9f 93       	push	r25
    1344:	af 93       	push	r26
    1346:	bf 93       	push	r27
    1348:	ef 93       	push	r30
    134a:	ff 93       	push	r31
	TIMER1_IC_Callback();
    134c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <TIMER1_IC_Callback>
    1350:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <TIMER1_IC_Callback+0x1>
    1354:	09 95       	icall
    TIM_TIFR=(1<<TIFR_ICF1);
    1356:	80 e2       	ldi	r24, 0x20	; 32
    1358:	88 bf       	out	0x38, r24	; 56
}
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__subsf3>:
    137c:	50 58       	subi	r21, 0x80	; 128

0000137e <__addsf3>:
    137e:	bb 27       	eor	r27, r27
    1380:	aa 27       	eor	r26, r26
    1382:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__addsf3x>
    1386:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_round>
    138a:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_pscA>
    138e:	38 f0       	brcs	.+14     	; 0x139e <__addsf3+0x20>
    1390:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_pscB>
    1394:	20 f0       	brcs	.+8      	; 0x139e <__addsf3+0x20>
    1396:	39 f4       	brne	.+14     	; 0x13a6 <__addsf3+0x28>
    1398:	9f 3f       	cpi	r25, 0xFF	; 255
    139a:	19 f4       	brne	.+6      	; 0x13a2 <__addsf3+0x24>
    139c:	26 f4       	brtc	.+8      	; 0x13a6 <__addsf3+0x28>
    139e:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_nan>
    13a2:	0e f4       	brtc	.+2      	; 0x13a6 <__addsf3+0x28>
    13a4:	e0 95       	com	r30
    13a6:	e7 fb       	bst	r30, 7
    13a8:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_inf>

000013ac <__addsf3x>:
    13ac:	e9 2f       	mov	r30, r25
    13ae:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_split3>
    13b2:	58 f3       	brcs	.-42     	; 0x138a <__addsf3+0xc>
    13b4:	ba 17       	cp	r27, r26
    13b6:	62 07       	cpc	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	84 07       	cpc	r24, r20
    13bc:	95 07       	cpc	r25, r21
    13be:	20 f0       	brcs	.+8      	; 0x13c8 <__addsf3x+0x1c>
    13c0:	79 f4       	brne	.+30     	; 0x13e0 <__addsf3x+0x34>
    13c2:	a6 f5       	brtc	.+104    	; 0x142c <__addsf3x+0x80>
    13c4:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__fp_zero>
    13c8:	0e f4       	brtc	.+2      	; 0x13cc <__addsf3x+0x20>
    13ca:	e0 95       	com	r30
    13cc:	0b 2e       	mov	r0, r27
    13ce:	ba 2f       	mov	r27, r26
    13d0:	a0 2d       	mov	r26, r0
    13d2:	0b 01       	movw	r0, r22
    13d4:	b9 01       	movw	r22, r18
    13d6:	90 01       	movw	r18, r0
    13d8:	0c 01       	movw	r0, r24
    13da:	ca 01       	movw	r24, r20
    13dc:	a0 01       	movw	r20, r0
    13de:	11 24       	eor	r1, r1
    13e0:	ff 27       	eor	r31, r31
    13e2:	59 1b       	sub	r21, r25
    13e4:	99 f0       	breq	.+38     	; 0x140c <__addsf3x+0x60>
    13e6:	59 3f       	cpi	r21, 0xF9	; 249
    13e8:	50 f4       	brcc	.+20     	; 0x13fe <__addsf3x+0x52>
    13ea:	50 3e       	cpi	r21, 0xE0	; 224
    13ec:	68 f1       	brcs	.+90     	; 0x1448 <__addsf3x+0x9c>
    13ee:	1a 16       	cp	r1, r26
    13f0:	f0 40       	sbci	r31, 0x00	; 0
    13f2:	a2 2f       	mov	r26, r18
    13f4:	23 2f       	mov	r18, r19
    13f6:	34 2f       	mov	r19, r20
    13f8:	44 27       	eor	r20, r20
    13fa:	58 5f       	subi	r21, 0xF8	; 248
    13fc:	f3 cf       	rjmp	.-26     	; 0x13e4 <__addsf3x+0x38>
    13fe:	46 95       	lsr	r20
    1400:	37 95       	ror	r19
    1402:	27 95       	ror	r18
    1404:	a7 95       	ror	r26
    1406:	f0 40       	sbci	r31, 0x00	; 0
    1408:	53 95       	inc	r21
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__addsf3x+0x52>
    140c:	7e f4       	brtc	.+30     	; 0x142c <__addsf3x+0x80>
    140e:	1f 16       	cp	r1, r31
    1410:	ba 0b       	sbc	r27, r26
    1412:	62 0b       	sbc	r22, r18
    1414:	73 0b       	sbc	r23, r19
    1416:	84 0b       	sbc	r24, r20
    1418:	ba f0       	brmi	.+46     	; 0x1448 <__addsf3x+0x9c>
    141a:	91 50       	subi	r25, 0x01	; 1
    141c:	a1 f0       	breq	.+40     	; 0x1446 <__addsf3x+0x9a>
    141e:	ff 0f       	add	r31, r31
    1420:	bb 1f       	adc	r27, r27
    1422:	66 1f       	adc	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	88 1f       	adc	r24, r24
    1428:	c2 f7       	brpl	.-16     	; 0x141a <__addsf3x+0x6e>
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <__addsf3x+0x9c>
    142c:	ba 0f       	add	r27, r26
    142e:	62 1f       	adc	r22, r18
    1430:	73 1f       	adc	r23, r19
    1432:	84 1f       	adc	r24, r20
    1434:	48 f4       	brcc	.+18     	; 0x1448 <__addsf3x+0x9c>
    1436:	87 95       	ror	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	b7 95       	ror	r27
    143e:	f7 95       	ror	r31
    1440:	9e 3f       	cpi	r25, 0xFE	; 254
    1442:	08 f0       	brcs	.+2      	; 0x1446 <__addsf3x+0x9a>
    1444:	b0 cf       	rjmp	.-160    	; 0x13a6 <__addsf3+0x28>
    1446:	93 95       	inc	r25
    1448:	88 0f       	add	r24, r24
    144a:	08 f0       	brcs	.+2      	; 0x144e <__addsf3x+0xa2>
    144c:	99 27       	eor	r25, r25
    144e:	ee 0f       	add	r30, r30
    1450:	97 95       	ror	r25
    1452:	87 95       	ror	r24
    1454:	08 95       	ret

00001456 <__divsf3>:
    1456:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3x>
    145a:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_round>
    145e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_pscB>
    1462:	58 f0       	brcs	.+22     	; 0x147a <__divsf3+0x24>
    1464:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_pscA>
    1468:	40 f0       	brcs	.+16     	; 0x147a <__divsf3+0x24>
    146a:	29 f4       	brne	.+10     	; 0x1476 <__divsf3+0x20>
    146c:	5f 3f       	cpi	r21, 0xFF	; 255
    146e:	29 f0       	breq	.+10     	; 0x147a <__divsf3+0x24>
    1470:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_inf>
    1474:	51 11       	cpse	r21, r1
    1476:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__fp_szero>
    147a:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_nan>

0000147e <__divsf3x>:
    147e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_split3>
    1482:	68 f3       	brcs	.-38     	; 0x145e <__divsf3+0x8>

00001484 <__divsf3_pse>:
    1484:	99 23       	and	r25, r25
    1486:	b1 f3       	breq	.-20     	; 0x1474 <__divsf3+0x1e>
    1488:	55 23       	and	r21, r21
    148a:	91 f3       	breq	.-28     	; 0x1470 <__divsf3+0x1a>
    148c:	95 1b       	sub	r25, r21
    148e:	55 0b       	sbc	r21, r21
    1490:	bb 27       	eor	r27, r27
    1492:	aa 27       	eor	r26, r26
    1494:	62 17       	cp	r22, r18
    1496:	73 07       	cpc	r23, r19
    1498:	84 07       	cpc	r24, r20
    149a:	38 f0       	brcs	.+14     	; 0x14aa <__divsf3_pse+0x26>
    149c:	9f 5f       	subi	r25, 0xFF	; 255
    149e:	5f 4f       	sbci	r21, 0xFF	; 255
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	44 1f       	adc	r20, r20
    14a6:	aa 1f       	adc	r26, r26
    14a8:	a9 f3       	breq	.-22     	; 0x1494 <__divsf3_pse+0x10>
    14aa:	35 d0       	rcall	.+106    	; 0x1516 <__divsf3_pse+0x92>
    14ac:	0e 2e       	mov	r0, r30
    14ae:	3a f0       	brmi	.+14     	; 0x14be <__divsf3_pse+0x3a>
    14b0:	e0 e8       	ldi	r30, 0x80	; 128
    14b2:	32 d0       	rcall	.+100    	; 0x1518 <__divsf3_pse+0x94>
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	50 40       	sbci	r21, 0x00	; 0
    14b8:	e6 95       	lsr	r30
    14ba:	00 1c       	adc	r0, r0
    14bc:	ca f7       	brpl	.-14     	; 0x14b0 <__divsf3_pse+0x2c>
    14be:	2b d0       	rcall	.+86     	; 0x1516 <__divsf3_pse+0x92>
    14c0:	fe 2f       	mov	r31, r30
    14c2:	29 d0       	rcall	.+82     	; 0x1516 <__divsf3_pse+0x92>
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	bb 1f       	adc	r27, r27
    14cc:	26 17       	cp	r18, r22
    14ce:	37 07       	cpc	r19, r23
    14d0:	48 07       	cpc	r20, r24
    14d2:	ab 07       	cpc	r26, r27
    14d4:	b0 e8       	ldi	r27, 0x80	; 128
    14d6:	09 f0       	breq	.+2      	; 0x14da <__divsf3_pse+0x56>
    14d8:	bb 0b       	sbc	r27, r27
    14da:	80 2d       	mov	r24, r0
    14dc:	bf 01       	movw	r22, r30
    14de:	ff 27       	eor	r31, r31
    14e0:	93 58       	subi	r25, 0x83	; 131
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	3a f0       	brmi	.+14     	; 0x14f4 <__divsf3_pse+0x70>
    14e6:	9e 3f       	cpi	r25, 0xFE	; 254
    14e8:	51 05       	cpc	r21, r1
    14ea:	78 f0       	brcs	.+30     	; 0x150a <__divsf3_pse+0x86>
    14ec:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_inf>
    14f0:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__fp_szero>
    14f4:	5f 3f       	cpi	r21, 0xFF	; 255
    14f6:	e4 f3       	brlt	.-8      	; 0x14f0 <__divsf3_pse+0x6c>
    14f8:	98 3e       	cpi	r25, 0xE8	; 232
    14fa:	d4 f3       	brlt	.-12     	; 0x14f0 <__divsf3_pse+0x6c>
    14fc:	86 95       	lsr	r24
    14fe:	77 95       	ror	r23
    1500:	67 95       	ror	r22
    1502:	b7 95       	ror	r27
    1504:	f7 95       	ror	r31
    1506:	9f 5f       	subi	r25, 0xFF	; 255
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__divsf3_pse+0x78>
    150a:	88 0f       	add	r24, r24
    150c:	91 1d       	adc	r25, r1
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret
    1516:	e1 e0       	ldi	r30, 0x01	; 1
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	bb 1f       	adc	r27, r27
    1520:	62 17       	cp	r22, r18
    1522:	73 07       	cpc	r23, r19
    1524:	84 07       	cpc	r24, r20
    1526:	ba 07       	cpc	r27, r26
    1528:	20 f0       	brcs	.+8      	; 0x1532 <__divsf3_pse+0xae>
    152a:	62 1b       	sub	r22, r18
    152c:	73 0b       	sbc	r23, r19
    152e:	84 0b       	sbc	r24, r20
    1530:	ba 0b       	sbc	r27, r26
    1532:	ee 1f       	adc	r30, r30
    1534:	88 f7       	brcc	.-30     	; 0x1518 <__divsf3_pse+0x94>
    1536:	e0 95       	com	r30
    1538:	08 95       	ret

0000153a <__fixunssfsi>:
    153a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_splitA>
    153e:	88 f0       	brcs	.+34     	; 0x1562 <__fixunssfsi+0x28>
    1540:	9f 57       	subi	r25, 0x7F	; 127
    1542:	98 f0       	brcs	.+38     	; 0x156a <__fixunssfsi+0x30>
    1544:	b9 2f       	mov	r27, r25
    1546:	99 27       	eor	r25, r25
    1548:	b7 51       	subi	r27, 0x17	; 23
    154a:	b0 f0       	brcs	.+44     	; 0x1578 <__fixunssfsi+0x3e>
    154c:	e1 f0       	breq	.+56     	; 0x1586 <__fixunssfsi+0x4c>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	1a f0       	brmi	.+6      	; 0x155e <__fixunssfsi+0x24>
    1558:	ba 95       	dec	r27
    155a:	c9 f7       	brne	.-14     	; 0x154e <__fixunssfsi+0x14>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <__fixunssfsi+0x4c>
    155e:	b1 30       	cpi	r27, 0x01	; 1
    1560:	91 f0       	breq	.+36     	; 0x1586 <__fixunssfsi+0x4c>
    1562:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__fp_zero>
    1566:	b1 e0       	ldi	r27, 0x01	; 1
    1568:	08 95       	ret
    156a:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__fp_zero>
    156e:	67 2f       	mov	r22, r23
    1570:	78 2f       	mov	r23, r24
    1572:	88 27       	eor	r24, r24
    1574:	b8 5f       	subi	r27, 0xF8	; 248
    1576:	39 f0       	breq	.+14     	; 0x1586 <__fixunssfsi+0x4c>
    1578:	b9 3f       	cpi	r27, 0xF9	; 249
    157a:	cc f3       	brlt	.-14     	; 0x156e <__fixunssfsi+0x34>
    157c:	86 95       	lsr	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b3 95       	inc	r27
    1584:	d9 f7       	brne	.-10     	; 0x157c <__fixunssfsi+0x42>
    1586:	3e f4       	brtc	.+14     	; 0x1596 <__fixunssfsi+0x5c>
    1588:	90 95       	com	r25
    158a:	80 95       	com	r24
    158c:	70 95       	com	r23
    158e:	61 95       	neg	r22
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__floatunsisf>:
    1598:	e8 94       	clt
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <__floatsisf+0x12>

0000159c <__floatsisf>:
    159c:	97 fb       	bst	r25, 7
    159e:	3e f4       	brtc	.+14     	; 0x15ae <__floatsisf+0x12>
    15a0:	90 95       	com	r25
    15a2:	80 95       	com	r24
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	99 23       	and	r25, r25
    15b0:	a9 f0       	breq	.+42     	; 0x15dc <__floatsisf+0x40>
    15b2:	f9 2f       	mov	r31, r25
    15b4:	96 e9       	ldi	r25, 0x96	; 150
    15b6:	bb 27       	eor	r27, r27
    15b8:	93 95       	inc	r25
    15ba:	f6 95       	lsr	r31
    15bc:	87 95       	ror	r24
    15be:	77 95       	ror	r23
    15c0:	67 95       	ror	r22
    15c2:	b7 95       	ror	r27
    15c4:	f1 11       	cpse	r31, r1
    15c6:	f8 cf       	rjmp	.-16     	; 0x15b8 <__floatsisf+0x1c>
    15c8:	fa f4       	brpl	.+62     	; 0x1608 <__floatsisf+0x6c>
    15ca:	bb 0f       	add	r27, r27
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <__floatsisf+0x36>
    15ce:	60 ff       	sbrs	r22, 0
    15d0:	1b c0       	rjmp	.+54     	; 0x1608 <__floatsisf+0x6c>
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8f 4f       	sbci	r24, 0xFF	; 255
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	16 c0       	rjmp	.+44     	; 0x1608 <__floatsisf+0x6c>
    15dc:	88 23       	and	r24, r24
    15de:	11 f0       	breq	.+4      	; 0x15e4 <__floatsisf+0x48>
    15e0:	96 e9       	ldi	r25, 0x96	; 150
    15e2:	11 c0       	rjmp	.+34     	; 0x1606 <__floatsisf+0x6a>
    15e4:	77 23       	and	r23, r23
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <__floatsisf+0x54>
    15e8:	9e e8       	ldi	r25, 0x8E	; 142
    15ea:	87 2f       	mov	r24, r23
    15ec:	76 2f       	mov	r23, r22
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <__floatsisf+0x5e>
    15f0:	66 23       	and	r22, r22
    15f2:	71 f0       	breq	.+28     	; 0x1610 <__floatsisf+0x74>
    15f4:	96 e8       	ldi	r25, 0x86	; 134
    15f6:	86 2f       	mov	r24, r22
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	2a f0       	brmi	.+10     	; 0x1608 <__floatsisf+0x6c>
    15fe:	9a 95       	dec	r25
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	da f7       	brpl	.-10     	; 0x15fe <__floatsisf+0x62>
    1608:	88 0f       	add	r24, r24
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	97 f9       	bld	r25, 7
    1610:	08 95       	ret

00001612 <__fp_inf>:
    1612:	97 f9       	bld	r25, 7
    1614:	9f 67       	ori	r25, 0x7F	; 127
    1616:	80 e8       	ldi	r24, 0x80	; 128
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	08 95       	ret

0000161e <__fp_nan>:
    161e:	9f ef       	ldi	r25, 0xFF	; 255
    1620:	80 ec       	ldi	r24, 0xC0	; 192
    1622:	08 95       	ret

00001624 <__fp_pscA>:
    1624:	00 24       	eor	r0, r0
    1626:	0a 94       	dec	r0
    1628:	16 16       	cp	r1, r22
    162a:	17 06       	cpc	r1, r23
    162c:	18 06       	cpc	r1, r24
    162e:	09 06       	cpc	r0, r25
    1630:	08 95       	ret

00001632 <__fp_pscB>:
    1632:	00 24       	eor	r0, r0
    1634:	0a 94       	dec	r0
    1636:	12 16       	cp	r1, r18
    1638:	13 06       	cpc	r1, r19
    163a:	14 06       	cpc	r1, r20
    163c:	05 06       	cpc	r0, r21
    163e:	08 95       	ret

00001640 <__fp_round>:
    1640:	09 2e       	mov	r0, r25
    1642:	03 94       	inc	r0
    1644:	00 0c       	add	r0, r0
    1646:	11 f4       	brne	.+4      	; 0x164c <__fp_round+0xc>
    1648:	88 23       	and	r24, r24
    164a:	52 f0       	brmi	.+20     	; 0x1660 <__fp_round+0x20>
    164c:	bb 0f       	add	r27, r27
    164e:	40 f4       	brcc	.+16     	; 0x1660 <__fp_round+0x20>
    1650:	bf 2b       	or	r27, r31
    1652:	11 f4       	brne	.+4      	; 0x1658 <__fp_round+0x18>
    1654:	60 ff       	sbrs	r22, 0
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <__fp_round+0x20>
    1658:	6f 5f       	subi	r22, 0xFF	; 255
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	8f 4f       	sbci	r24, 0xFF	; 255
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	08 95       	ret

00001662 <__fp_split3>:
    1662:	57 fd       	sbrc	r21, 7
    1664:	90 58       	subi	r25, 0x80	; 128
    1666:	44 0f       	add	r20, r20
    1668:	55 1f       	adc	r21, r21
    166a:	59 f0       	breq	.+22     	; 0x1682 <__fp_splitA+0x10>
    166c:	5f 3f       	cpi	r21, 0xFF	; 255
    166e:	71 f0       	breq	.+28     	; 0x168c <__fp_splitA+0x1a>
    1670:	47 95       	ror	r20

00001672 <__fp_splitA>:
    1672:	88 0f       	add	r24, r24
    1674:	97 fb       	bst	r25, 7
    1676:	99 1f       	adc	r25, r25
    1678:	61 f0       	breq	.+24     	; 0x1692 <__fp_splitA+0x20>
    167a:	9f 3f       	cpi	r25, 0xFF	; 255
    167c:	79 f0       	breq	.+30     	; 0x169c <__fp_splitA+0x2a>
    167e:	87 95       	ror	r24
    1680:	08 95       	ret
    1682:	12 16       	cp	r1, r18
    1684:	13 06       	cpc	r1, r19
    1686:	14 06       	cpc	r1, r20
    1688:	55 1f       	adc	r21, r21
    168a:	f2 cf       	rjmp	.-28     	; 0x1670 <__fp_split3+0xe>
    168c:	46 95       	lsr	r20
    168e:	f1 df       	rcall	.-30     	; 0x1672 <__fp_splitA>
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <__fp_splitA+0x30>
    1692:	16 16       	cp	r1, r22
    1694:	17 06       	cpc	r1, r23
    1696:	18 06       	cpc	r1, r24
    1698:	99 1f       	adc	r25, r25
    169a:	f1 cf       	rjmp	.-30     	; 0x167e <__fp_splitA+0xc>
    169c:	86 95       	lsr	r24
    169e:	71 05       	cpc	r23, r1
    16a0:	61 05       	cpc	r22, r1
    16a2:	08 94       	sec
    16a4:	08 95       	ret

000016a6 <__fp_zero>:
    16a6:	e8 94       	clt

000016a8 <__fp_szero>:
    16a8:	bb 27       	eor	r27, r27
    16aa:	66 27       	eor	r22, r22
    16ac:	77 27       	eor	r23, r23
    16ae:	cb 01       	movw	r24, r22
    16b0:	97 f9       	bld	r25, 7
    16b2:	08 95       	ret

000016b4 <__mulsf3>:
    16b4:	0e 94 6d 0b 	call	0x16da	; 0x16da <__mulsf3x>
    16b8:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_round>
    16bc:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_pscA>
    16c0:	38 f0       	brcs	.+14     	; 0x16d0 <__mulsf3+0x1c>
    16c2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_pscB>
    16c6:	20 f0       	brcs	.+8      	; 0x16d0 <__mulsf3+0x1c>
    16c8:	95 23       	and	r25, r21
    16ca:	11 f0       	breq	.+4      	; 0x16d0 <__mulsf3+0x1c>
    16cc:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_inf>
    16d0:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_nan>
    16d4:	11 24       	eor	r1, r1
    16d6:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__fp_szero>

000016da <__mulsf3x>:
    16da:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_split3>
    16de:	70 f3       	brcs	.-36     	; 0x16bc <__mulsf3+0x8>

000016e0 <__mulsf3_pse>:
    16e0:	95 9f       	mul	r25, r21
    16e2:	c1 f3       	breq	.-16     	; 0x16d4 <__mulsf3+0x20>
    16e4:	95 0f       	add	r25, r21
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	55 1f       	adc	r21, r21
    16ea:	62 9f       	mul	r22, r18
    16ec:	f0 01       	movw	r30, r0
    16ee:	72 9f       	mul	r23, r18
    16f0:	bb 27       	eor	r27, r27
    16f2:	f0 0d       	add	r31, r0
    16f4:	b1 1d       	adc	r27, r1
    16f6:	63 9f       	mul	r22, r19
    16f8:	aa 27       	eor	r26, r26
    16fa:	f0 0d       	add	r31, r0
    16fc:	b1 1d       	adc	r27, r1
    16fe:	aa 1f       	adc	r26, r26
    1700:	64 9f       	mul	r22, r20
    1702:	66 27       	eor	r22, r22
    1704:	b0 0d       	add	r27, r0
    1706:	a1 1d       	adc	r26, r1
    1708:	66 1f       	adc	r22, r22
    170a:	82 9f       	mul	r24, r18
    170c:	22 27       	eor	r18, r18
    170e:	b0 0d       	add	r27, r0
    1710:	a1 1d       	adc	r26, r1
    1712:	62 1f       	adc	r22, r18
    1714:	73 9f       	mul	r23, r19
    1716:	b0 0d       	add	r27, r0
    1718:	a1 1d       	adc	r26, r1
    171a:	62 1f       	adc	r22, r18
    171c:	83 9f       	mul	r24, r19
    171e:	a0 0d       	add	r26, r0
    1720:	61 1d       	adc	r22, r1
    1722:	22 1f       	adc	r18, r18
    1724:	74 9f       	mul	r23, r20
    1726:	33 27       	eor	r19, r19
    1728:	a0 0d       	add	r26, r0
    172a:	61 1d       	adc	r22, r1
    172c:	23 1f       	adc	r18, r19
    172e:	84 9f       	mul	r24, r20
    1730:	60 0d       	add	r22, r0
    1732:	21 1d       	adc	r18, r1
    1734:	82 2f       	mov	r24, r18
    1736:	76 2f       	mov	r23, r22
    1738:	6a 2f       	mov	r22, r26
    173a:	11 24       	eor	r1, r1
    173c:	9f 57       	subi	r25, 0x7F	; 127
    173e:	50 40       	sbci	r21, 0x00	; 0
    1740:	9a f0       	brmi	.+38     	; 0x1768 <__mulsf3_pse+0x88>
    1742:	f1 f0       	breq	.+60     	; 0x1780 <__mulsf3_pse+0xa0>
    1744:	88 23       	and	r24, r24
    1746:	4a f0       	brmi	.+18     	; 0x175a <__mulsf3_pse+0x7a>
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	bb 1f       	adc	r27, r27
    174e:	66 1f       	adc	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	91 50       	subi	r25, 0x01	; 1
    1756:	50 40       	sbci	r21, 0x00	; 0
    1758:	a9 f7       	brne	.-22     	; 0x1744 <__mulsf3_pse+0x64>
    175a:	9e 3f       	cpi	r25, 0xFE	; 254
    175c:	51 05       	cpc	r21, r1
    175e:	80 f0       	brcs	.+32     	; 0x1780 <__mulsf3_pse+0xa0>
    1760:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_inf>
    1764:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__fp_szero>
    1768:	5f 3f       	cpi	r21, 0xFF	; 255
    176a:	e4 f3       	brlt	.-8      	; 0x1764 <__mulsf3_pse+0x84>
    176c:	98 3e       	cpi	r25, 0xE8	; 232
    176e:	d4 f3       	brlt	.-12     	; 0x1764 <__mulsf3_pse+0x84>
    1770:	86 95       	lsr	r24
    1772:	77 95       	ror	r23
    1774:	67 95       	ror	r22
    1776:	b7 95       	ror	r27
    1778:	f7 95       	ror	r31
    177a:	e7 95       	ror	r30
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	c1 f7       	brne	.-16     	; 0x1770 <__mulsf3_pse+0x90>
    1780:	fe 2b       	or	r31, r30
    1782:	88 0f       	add	r24, r24
    1784:	91 1d       	adc	r25, r1
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <__udivmodsi4>:
    178e:	a1 e2       	ldi	r26, 0x21	; 33
    1790:	1a 2e       	mov	r1, r26
    1792:	aa 1b       	sub	r26, r26
    1794:	bb 1b       	sub	r27, r27
    1796:	fd 01       	movw	r30, r26
    1798:	0d c0       	rjmp	.+26     	; 0x17b4 <__udivmodsi4_ep>

0000179a <__udivmodsi4_loop>:
    179a:	aa 1f       	adc	r26, r26
    179c:	bb 1f       	adc	r27, r27
    179e:	ee 1f       	adc	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	a2 17       	cp	r26, r18
    17a4:	b3 07       	cpc	r27, r19
    17a6:	e4 07       	cpc	r30, r20
    17a8:	f5 07       	cpc	r31, r21
    17aa:	20 f0       	brcs	.+8      	; 0x17b4 <__udivmodsi4_ep>
    17ac:	a2 1b       	sub	r26, r18
    17ae:	b3 0b       	sbc	r27, r19
    17b0:	e4 0b       	sbc	r30, r20
    17b2:	f5 0b       	sbc	r31, r21

000017b4 <__udivmodsi4_ep>:
    17b4:	66 1f       	adc	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	1a 94       	dec	r1
    17be:	69 f7       	brne	.-38     	; 0x179a <__udivmodsi4_loop>
    17c0:	60 95       	com	r22
    17c2:	70 95       	com	r23
    17c4:	80 95       	com	r24
    17c6:	90 95       	com	r25
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	bd 01       	movw	r22, r26
    17ce:	cf 01       	movw	r24, r30
    17d0:	08 95       	ret

000017d2 <__tablejump2__>:
    17d2:	ee 0f       	add	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	05 90       	lpm	r0, Z+
    17d8:	f4 91       	lpm	r31, Z
    17da:	e0 2d       	mov	r30, r0
    17dc:	09 94       	ijmp

000017de <sprintf>:
    17de:	ae e0       	ldi	r26, 0x0E	; 14
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 ef       	ldi	r30, 0xF5	; 245
    17e4:	fb e0       	ldi	r31, 0x0B	; 11
    17e6:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__prologue_saves__+0x1c>
    17ea:	0d 89       	ldd	r16, Y+21	; 0x15
    17ec:	1e 89       	ldd	r17, Y+22	; 0x16
    17ee:	86 e0       	ldi	r24, 0x06	; 6
    17f0:	8c 83       	std	Y+4, r24	; 0x04
    17f2:	1a 83       	std	Y+2, r17	; 0x02
    17f4:	09 83       	std	Y+1, r16	; 0x01
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	9f e7       	ldi	r25, 0x7F	; 127
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	ae 01       	movw	r20, r28
    1800:	47 5e       	subi	r20, 0xE7	; 231
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	6f 89       	ldd	r22, Y+23	; 0x17
    1806:	78 8d       	ldd	r23, Y+24	; 0x18
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	0e 94 11 0c 	call	0x1822	; 0x1822 <vfprintf>
    1810:	ef 81       	ldd	r30, Y+7	; 0x07
    1812:	f8 85       	ldd	r31, Y+8	; 0x08
    1814:	e0 0f       	add	r30, r16
    1816:	f1 1f       	adc	r31, r17
    1818:	10 82       	st	Z, r1
    181a:	2e 96       	adiw	r28, 0x0e	; 14
    181c:	e4 e0       	ldi	r30, 0x04	; 4
    181e:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__epilogue_restores__+0x1c>

00001822 <vfprintf>:
    1822:	ab e0       	ldi	r26, 0x0B	; 11
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e1       	ldi	r30, 0x17	; 23
    1828:	fc e0       	ldi	r31, 0x0C	; 12
    182a:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__>
    182e:	6c 01       	movw	r12, r24
    1830:	7b 01       	movw	r14, r22
    1832:	8a 01       	movw	r16, r20
    1834:	fc 01       	movw	r30, r24
    1836:	17 82       	std	Z+7, r1	; 0x07
    1838:	16 82       	std	Z+6, r1	; 0x06
    183a:	83 81       	ldd	r24, Z+3	; 0x03
    183c:	81 ff       	sbrs	r24, 1
    183e:	cc c1       	rjmp	.+920    	; 0x1bd8 <vfprintf+0x3b6>
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	3c 01       	movw	r6, r24
    1846:	f6 01       	movw	r30, r12
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	f7 01       	movw	r30, r14
    184c:	93 fd       	sbrc	r25, 3
    184e:	85 91       	lpm	r24, Z+
    1850:	93 ff       	sbrs	r25, 3
    1852:	81 91       	ld	r24, Z+
    1854:	7f 01       	movw	r14, r30
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <vfprintf+0x3a>
    185a:	ba c1       	rjmp	.+884    	; 0x1bd0 <vfprintf+0x3ae>
    185c:	85 32       	cpi	r24, 0x25	; 37
    185e:	39 f4       	brne	.+14     	; 0x186e <vfprintf+0x4c>
    1860:	93 fd       	sbrc	r25, 3
    1862:	85 91       	lpm	r24, Z+
    1864:	93 ff       	sbrs	r25, 3
    1866:	81 91       	ld	r24, Z+
    1868:	7f 01       	movw	r14, r30
    186a:	85 32       	cpi	r24, 0x25	; 37
    186c:	29 f4       	brne	.+10     	; 0x1878 <vfprintf+0x56>
    186e:	b6 01       	movw	r22, r12
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1876:	e7 cf       	rjmp	.-50     	; 0x1846 <vfprintf+0x24>
    1878:	91 2c       	mov	r9, r1
    187a:	21 2c       	mov	r2, r1
    187c:	31 2c       	mov	r3, r1
    187e:	ff e1       	ldi	r31, 0x1F	; 31
    1880:	f3 15       	cp	r31, r3
    1882:	d8 f0       	brcs	.+54     	; 0x18ba <vfprintf+0x98>
    1884:	8b 32       	cpi	r24, 0x2B	; 43
    1886:	79 f0       	breq	.+30     	; 0x18a6 <vfprintf+0x84>
    1888:	38 f4       	brcc	.+14     	; 0x1898 <vfprintf+0x76>
    188a:	80 32       	cpi	r24, 0x20	; 32
    188c:	79 f0       	breq	.+30     	; 0x18ac <vfprintf+0x8a>
    188e:	83 32       	cpi	r24, 0x23	; 35
    1890:	a1 f4       	brne	.+40     	; 0x18ba <vfprintf+0x98>
    1892:	23 2d       	mov	r18, r3
    1894:	20 61       	ori	r18, 0x10	; 16
    1896:	1d c0       	rjmp	.+58     	; 0x18d2 <vfprintf+0xb0>
    1898:	8d 32       	cpi	r24, 0x2D	; 45
    189a:	61 f0       	breq	.+24     	; 0x18b4 <vfprintf+0x92>
    189c:	80 33       	cpi	r24, 0x30	; 48
    189e:	69 f4       	brne	.+26     	; 0x18ba <vfprintf+0x98>
    18a0:	23 2d       	mov	r18, r3
    18a2:	21 60       	ori	r18, 0x01	; 1
    18a4:	16 c0       	rjmp	.+44     	; 0x18d2 <vfprintf+0xb0>
    18a6:	83 2d       	mov	r24, r3
    18a8:	82 60       	ori	r24, 0x02	; 2
    18aa:	38 2e       	mov	r3, r24
    18ac:	e3 2d       	mov	r30, r3
    18ae:	e4 60       	ori	r30, 0x04	; 4
    18b0:	3e 2e       	mov	r3, r30
    18b2:	2a c0       	rjmp	.+84     	; 0x1908 <vfprintf+0xe6>
    18b4:	f3 2d       	mov	r31, r3
    18b6:	f8 60       	ori	r31, 0x08	; 8
    18b8:	1d c0       	rjmp	.+58     	; 0x18f4 <vfprintf+0xd2>
    18ba:	37 fc       	sbrc	r3, 7
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <vfprintf+0xf6>
    18be:	20 ed       	ldi	r18, 0xD0	; 208
    18c0:	28 0f       	add	r18, r24
    18c2:	2a 30       	cpi	r18, 0x0A	; 10
    18c4:	40 f0       	brcs	.+16     	; 0x18d6 <vfprintf+0xb4>
    18c6:	8e 32       	cpi	r24, 0x2E	; 46
    18c8:	b9 f4       	brne	.+46     	; 0x18f8 <vfprintf+0xd6>
    18ca:	36 fc       	sbrc	r3, 6
    18cc:	81 c1       	rjmp	.+770    	; 0x1bd0 <vfprintf+0x3ae>
    18ce:	23 2d       	mov	r18, r3
    18d0:	20 64       	ori	r18, 0x40	; 64
    18d2:	32 2e       	mov	r3, r18
    18d4:	19 c0       	rjmp	.+50     	; 0x1908 <vfprintf+0xe6>
    18d6:	36 fe       	sbrs	r3, 6
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0xc4>
    18da:	8a e0       	ldi	r24, 0x0A	; 10
    18dc:	98 9e       	mul	r9, r24
    18de:	20 0d       	add	r18, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	92 2e       	mov	r9, r18
    18e4:	11 c0       	rjmp	.+34     	; 0x1908 <vfprintf+0xe6>
    18e6:	ea e0       	ldi	r30, 0x0A	; 10
    18e8:	2e 9e       	mul	r2, r30
    18ea:	20 0d       	add	r18, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	22 2e       	mov	r2, r18
    18f0:	f3 2d       	mov	r31, r3
    18f2:	f0 62       	ori	r31, 0x20	; 32
    18f4:	3f 2e       	mov	r3, r31
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <vfprintf+0xe6>
    18f8:	8c 36       	cpi	r24, 0x6C	; 108
    18fa:	21 f4       	brne	.+8      	; 0x1904 <vfprintf+0xe2>
    18fc:	83 2d       	mov	r24, r3
    18fe:	80 68       	ori	r24, 0x80	; 128
    1900:	38 2e       	mov	r3, r24
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0xe6>
    1904:	88 36       	cpi	r24, 0x68	; 104
    1906:	41 f4       	brne	.+16     	; 0x1918 <vfprintf+0xf6>
    1908:	f7 01       	movw	r30, r14
    190a:	93 fd       	sbrc	r25, 3
    190c:	85 91       	lpm	r24, Z+
    190e:	93 ff       	sbrs	r25, 3
    1910:	81 91       	ld	r24, Z+
    1912:	7f 01       	movw	r14, r30
    1914:	81 11       	cpse	r24, r1
    1916:	b3 cf       	rjmp	.-154    	; 0x187e <vfprintf+0x5c>
    1918:	98 2f       	mov	r25, r24
    191a:	9f 7d       	andi	r25, 0xDF	; 223
    191c:	95 54       	subi	r25, 0x45	; 69
    191e:	93 30       	cpi	r25, 0x03	; 3
    1920:	28 f4       	brcc	.+10     	; 0x192c <vfprintf+0x10a>
    1922:	0c 5f       	subi	r16, 0xFC	; 252
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	9f e3       	ldi	r25, 0x3F	; 63
    1928:	99 83       	std	Y+1, r25	; 0x01
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <vfprintf+0x124>
    192c:	83 36       	cpi	r24, 0x63	; 99
    192e:	31 f0       	breq	.+12     	; 0x193c <vfprintf+0x11a>
    1930:	83 37       	cpi	r24, 0x73	; 115
    1932:	71 f0       	breq	.+28     	; 0x1950 <vfprintf+0x12e>
    1934:	83 35       	cpi	r24, 0x53	; 83
    1936:	09 f0       	breq	.+2      	; 0x193a <vfprintf+0x118>
    1938:	59 c0       	rjmp	.+178    	; 0x19ec <vfprintf+0x1ca>
    193a:	21 c0       	rjmp	.+66     	; 0x197e <vfprintf+0x15c>
    193c:	f8 01       	movw	r30, r16
    193e:	80 81       	ld	r24, Z
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	0e 5f       	subi	r16, 0xFE	; 254
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	88 24       	eor	r8, r8
    1948:	83 94       	inc	r8
    194a:	91 2c       	mov	r9, r1
    194c:	53 01       	movw	r10, r6
    194e:	13 c0       	rjmp	.+38     	; 0x1976 <vfprintf+0x154>
    1950:	28 01       	movw	r4, r16
    1952:	f2 e0       	ldi	r31, 0x02	; 2
    1954:	4f 0e       	add	r4, r31
    1956:	51 1c       	adc	r5, r1
    1958:	f8 01       	movw	r30, r16
    195a:	a0 80       	ld	r10, Z
    195c:	b1 80       	ldd	r11, Z+1	; 0x01
    195e:	36 fe       	sbrs	r3, 6
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <vfprintf+0x146>
    1962:	69 2d       	mov	r22, r9
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x14a>
    1968:	6f ef       	ldi	r22, 0xFF	; 255
    196a:	7f ef       	ldi	r23, 0xFF	; 255
    196c:	c5 01       	movw	r24, r10
    196e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <strnlen>
    1972:	4c 01       	movw	r8, r24
    1974:	82 01       	movw	r16, r4
    1976:	f3 2d       	mov	r31, r3
    1978:	ff 77       	andi	r31, 0x7F	; 127
    197a:	3f 2e       	mov	r3, r31
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <vfprintf+0x188>
    197e:	28 01       	movw	r4, r16
    1980:	22 e0       	ldi	r18, 0x02	; 2
    1982:	42 0e       	add	r4, r18
    1984:	51 1c       	adc	r5, r1
    1986:	f8 01       	movw	r30, r16
    1988:	a0 80       	ld	r10, Z
    198a:	b1 80       	ldd	r11, Z+1	; 0x01
    198c:	36 fe       	sbrs	r3, 6
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <vfprintf+0x174>
    1990:	69 2d       	mov	r22, r9
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x178>
    1996:	6f ef       	ldi	r22, 0xFF	; 255
    1998:	7f ef       	ldi	r23, 0xFF	; 255
    199a:	c5 01       	movw	r24, r10
    199c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <strnlen_P>
    19a0:	4c 01       	movw	r8, r24
    19a2:	f3 2d       	mov	r31, r3
    19a4:	f0 68       	ori	r31, 0x80	; 128
    19a6:	3f 2e       	mov	r3, r31
    19a8:	82 01       	movw	r16, r4
    19aa:	33 fc       	sbrc	r3, 3
    19ac:	1b c0       	rjmp	.+54     	; 0x19e4 <vfprintf+0x1c2>
    19ae:	82 2d       	mov	r24, r2
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	88 16       	cp	r8, r24
    19b4:	99 06       	cpc	r9, r25
    19b6:	b0 f4       	brcc	.+44     	; 0x19e4 <vfprintf+0x1c2>
    19b8:	b6 01       	movw	r22, r12
    19ba:	80 e2       	ldi	r24, 0x20	; 32
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    19c2:	2a 94       	dec	r2
    19c4:	f4 cf       	rjmp	.-24     	; 0x19ae <vfprintf+0x18c>
    19c6:	f5 01       	movw	r30, r10
    19c8:	37 fc       	sbrc	r3, 7
    19ca:	85 91       	lpm	r24, Z+
    19cc:	37 fe       	sbrs	r3, 7
    19ce:	81 91       	ld	r24, Z+
    19d0:	5f 01       	movw	r10, r30
    19d2:	b6 01       	movw	r22, r12
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    19da:	21 10       	cpse	r2, r1
    19dc:	2a 94       	dec	r2
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	82 1a       	sub	r8, r18
    19e2:	91 08       	sbc	r9, r1
    19e4:	81 14       	cp	r8, r1
    19e6:	91 04       	cpc	r9, r1
    19e8:	71 f7       	brne	.-36     	; 0x19c6 <vfprintf+0x1a4>
    19ea:	e8 c0       	rjmp	.+464    	; 0x1bbc <vfprintf+0x39a>
    19ec:	84 36       	cpi	r24, 0x64	; 100
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <vfprintf+0x1d2>
    19f0:	89 36       	cpi	r24, 0x69	; 105
    19f2:	41 f5       	brne	.+80     	; 0x1a44 <vfprintf+0x222>
    19f4:	f8 01       	movw	r30, r16
    19f6:	37 fe       	sbrs	r3, 7
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <vfprintf+0x1e6>
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0c 5f       	subi	r16, 0xFC	; 252
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <vfprintf+0x1f6>
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	07 2e       	mov	r0, r23
    1a0e:	00 0c       	add	r0, r0
    1a10:	88 0b       	sbc	r24, r24
    1a12:	99 0b       	sbc	r25, r25
    1a14:	0e 5f       	subi	r16, 0xFE	; 254
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	f3 2d       	mov	r31, r3
    1a1a:	ff 76       	andi	r31, 0x6F	; 111
    1a1c:	3f 2e       	mov	r3, r31
    1a1e:	97 ff       	sbrs	r25, 7
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <vfprintf+0x212>
    1a22:	90 95       	com	r25
    1a24:	80 95       	com	r24
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	f0 68       	ori	r31, 0x80	; 128
    1a32:	3f 2e       	mov	r3, r31
    1a34:	2a e0       	ldi	r18, 0x0A	; 10
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	a3 01       	movw	r20, r6
    1a3a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__ultoa_invert>
    1a3e:	88 2e       	mov	r8, r24
    1a40:	86 18       	sub	r8, r6
    1a42:	45 c0       	rjmp	.+138    	; 0x1ace <vfprintf+0x2ac>
    1a44:	85 37       	cpi	r24, 0x75	; 117
    1a46:	31 f4       	brne	.+12     	; 0x1a54 <vfprintf+0x232>
    1a48:	23 2d       	mov	r18, r3
    1a4a:	2f 7e       	andi	r18, 0xEF	; 239
    1a4c:	b2 2e       	mov	r11, r18
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	25 c0       	rjmp	.+74     	; 0x1a9e <vfprintf+0x27c>
    1a54:	93 2d       	mov	r25, r3
    1a56:	99 7f       	andi	r25, 0xF9	; 249
    1a58:	b9 2e       	mov	r11, r25
    1a5a:	8f 36       	cpi	r24, 0x6F	; 111
    1a5c:	c1 f0       	breq	.+48     	; 0x1a8e <vfprintf+0x26c>
    1a5e:	18 f4       	brcc	.+6      	; 0x1a66 <vfprintf+0x244>
    1a60:	88 35       	cpi	r24, 0x58	; 88
    1a62:	79 f0       	breq	.+30     	; 0x1a82 <vfprintf+0x260>
    1a64:	b5 c0       	rjmp	.+362    	; 0x1bd0 <vfprintf+0x3ae>
    1a66:	80 37       	cpi	r24, 0x70	; 112
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <vfprintf+0x24e>
    1a6a:	88 37       	cpi	r24, 0x78	; 120
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <vfprintf+0x254>
    1a6e:	b0 c0       	rjmp	.+352    	; 0x1bd0 <vfprintf+0x3ae>
    1a70:	e9 2f       	mov	r30, r25
    1a72:	e0 61       	ori	r30, 0x10	; 16
    1a74:	be 2e       	mov	r11, r30
    1a76:	b4 fe       	sbrs	r11, 4
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <vfprintf+0x272>
    1a7a:	fb 2d       	mov	r31, r11
    1a7c:	f4 60       	ori	r31, 0x04	; 4
    1a7e:	bf 2e       	mov	r11, r31
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <vfprintf+0x272>
    1a82:	34 fe       	sbrs	r3, 4
    1a84:	0a c0       	rjmp	.+20     	; 0x1a9a <vfprintf+0x278>
    1a86:	29 2f       	mov	r18, r25
    1a88:	26 60       	ori	r18, 0x06	; 6
    1a8a:	b2 2e       	mov	r11, r18
    1a8c:	06 c0       	rjmp	.+12     	; 0x1a9a <vfprintf+0x278>
    1a8e:	28 e0       	ldi	r18, 0x08	; 8
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <vfprintf+0x27c>
    1a94:	20 e1       	ldi	r18, 0x10	; 16
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x27c>
    1a9a:	20 e1       	ldi	r18, 0x10	; 16
    1a9c:	32 e0       	ldi	r19, 0x02	; 2
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	b7 fe       	sbrs	r11, 7
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <vfprintf+0x290>
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfprintf+0x29c>
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 5f       	subi	r16, 0xFE	; 254
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	a3 01       	movw	r20, r6
    1ac0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__ultoa_invert>
    1ac4:	88 2e       	mov	r8, r24
    1ac6:	86 18       	sub	r8, r6
    1ac8:	fb 2d       	mov	r31, r11
    1aca:	ff 77       	andi	r31, 0x7F	; 127
    1acc:	3f 2e       	mov	r3, r31
    1ace:	36 fe       	sbrs	r3, 6
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <vfprintf+0x2ca>
    1ad2:	23 2d       	mov	r18, r3
    1ad4:	2e 7f       	andi	r18, 0xFE	; 254
    1ad6:	a2 2e       	mov	r10, r18
    1ad8:	89 14       	cp	r8, r9
    1ada:	58 f4       	brcc	.+22     	; 0x1af2 <vfprintf+0x2d0>
    1adc:	34 fe       	sbrs	r3, 4
    1ade:	0b c0       	rjmp	.+22     	; 0x1af6 <vfprintf+0x2d4>
    1ae0:	32 fc       	sbrc	r3, 2
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <vfprintf+0x2d4>
    1ae4:	83 2d       	mov	r24, r3
    1ae6:	8e 7e       	andi	r24, 0xEE	; 238
    1ae8:	a8 2e       	mov	r10, r24
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <vfprintf+0x2d4>
    1aec:	b8 2c       	mov	r11, r8
    1aee:	a3 2c       	mov	r10, r3
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <vfprintf+0x2d6>
    1af2:	b8 2c       	mov	r11, r8
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <vfprintf+0x2d6>
    1af6:	b9 2c       	mov	r11, r9
    1af8:	a4 fe       	sbrs	r10, 4
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <vfprintf+0x2f8>
    1afc:	fe 01       	movw	r30, r28
    1afe:	e8 0d       	add	r30, r8
    1b00:	f1 1d       	adc	r31, r1
    1b02:	80 81       	ld	r24, Z
    1b04:	80 33       	cpi	r24, 0x30	; 48
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <vfprintf+0x2ee>
    1b08:	9a 2d       	mov	r25, r10
    1b0a:	99 7e       	andi	r25, 0xE9	; 233
    1b0c:	a9 2e       	mov	r10, r25
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <vfprintf+0x300>
    1b10:	a2 fe       	sbrs	r10, 2
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <vfprintf+0x2fe>
    1b14:	b3 94       	inc	r11
    1b16:	b3 94       	inc	r11
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <vfprintf+0x300>
    1b1a:	8a 2d       	mov	r24, r10
    1b1c:	86 78       	andi	r24, 0x86	; 134
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <vfprintf+0x300>
    1b20:	b3 94       	inc	r11
    1b22:	a3 fc       	sbrc	r10, 3
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <vfprintf+0x326>
    1b26:	a0 fe       	sbrs	r10, 0
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0x314>
    1b2a:	b2 14       	cp	r11, r2
    1b2c:	88 f4       	brcc	.+34     	; 0x1b50 <vfprintf+0x32e>
    1b2e:	28 0c       	add	r2, r8
    1b30:	92 2c       	mov	r9, r2
    1b32:	9b 18       	sub	r9, r11
    1b34:	0e c0       	rjmp	.+28     	; 0x1b52 <vfprintf+0x330>
    1b36:	b2 14       	cp	r11, r2
    1b38:	60 f4       	brcc	.+24     	; 0x1b52 <vfprintf+0x330>
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	80 e2       	ldi	r24, 0x20	; 32
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1b44:	b3 94       	inc	r11
    1b46:	f7 cf       	rjmp	.-18     	; 0x1b36 <vfprintf+0x314>
    1b48:	b2 14       	cp	r11, r2
    1b4a:	18 f4       	brcc	.+6      	; 0x1b52 <vfprintf+0x330>
    1b4c:	2b 18       	sub	r2, r11
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0x332>
    1b50:	98 2c       	mov	r9, r8
    1b52:	21 2c       	mov	r2, r1
    1b54:	a4 fe       	sbrs	r10, 4
    1b56:	10 c0       	rjmp	.+32     	; 0x1b78 <vfprintf+0x356>
    1b58:	b6 01       	movw	r22, r12
    1b5a:	80 e3       	ldi	r24, 0x30	; 48
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1b62:	a2 fe       	sbrs	r10, 2
    1b64:	17 c0       	rjmp	.+46     	; 0x1b94 <vfprintf+0x372>
    1b66:	a1 fc       	sbrc	r10, 1
    1b68:	03 c0       	rjmp	.+6      	; 0x1b70 <vfprintf+0x34e>
    1b6a:	88 e7       	ldi	r24, 0x78	; 120
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x352>
    1b70:	88 e5       	ldi	r24, 0x58	; 88
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	b6 01       	movw	r22, r12
    1b76:	0c c0       	rjmp	.+24     	; 0x1b90 <vfprintf+0x36e>
    1b78:	8a 2d       	mov	r24, r10
    1b7a:	86 78       	andi	r24, 0x86	; 134
    1b7c:	59 f0       	breq	.+22     	; 0x1b94 <vfprintf+0x372>
    1b7e:	a1 fe       	sbrs	r10, 1
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <vfprintf+0x364>
    1b82:	8b e2       	ldi	r24, 0x2B	; 43
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <vfprintf+0x366>
    1b86:	80 e2       	ldi	r24, 0x20	; 32
    1b88:	a7 fc       	sbrc	r10, 7
    1b8a:	8d e2       	ldi	r24, 0x2D	; 45
    1b8c:	b6 01       	movw	r22, r12
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1b94:	89 14       	cp	r8, r9
    1b96:	38 f4       	brcc	.+14     	; 0x1ba6 <vfprintf+0x384>
    1b98:	b6 01       	movw	r22, r12
    1b9a:	80 e3       	ldi	r24, 0x30	; 48
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1ba2:	9a 94       	dec	r9
    1ba4:	f7 cf       	rjmp	.-18     	; 0x1b94 <vfprintf+0x372>
    1ba6:	8a 94       	dec	r8
    1ba8:	f3 01       	movw	r30, r6
    1baa:	e8 0d       	add	r30, r8
    1bac:	f1 1d       	adc	r31, r1
    1bae:	80 81       	ld	r24, Z
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1bb8:	81 10       	cpse	r8, r1
    1bba:	f5 cf       	rjmp	.-22     	; 0x1ba6 <vfprintf+0x384>
    1bbc:	22 20       	and	r2, r2
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <vfprintf+0x3a0>
    1bc0:	42 ce       	rjmp	.-892    	; 0x1846 <vfprintf+0x24>
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	80 e2       	ldi	r24, 0x20	; 32
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <fputc>
    1bcc:	2a 94       	dec	r2
    1bce:	f6 cf       	rjmp	.-20     	; 0x1bbc <vfprintf+0x39a>
    1bd0:	f6 01       	movw	r30, r12
    1bd2:	86 81       	ldd	r24, Z+6	; 0x06
    1bd4:	97 81       	ldd	r25, Z+7	; 0x07
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <vfprintf+0x3ba>
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	9f ef       	ldi	r25, 0xFF	; 255
    1bdc:	2b 96       	adiw	r28, 0x0b	; 11
    1bde:	e2 e1       	ldi	r30, 0x12	; 18
    1be0:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__>

00001be4 <strnlen_P>:
    1be4:	fc 01       	movw	r30, r24
    1be6:	05 90       	lpm	r0, Z+
    1be8:	61 50       	subi	r22, 0x01	; 1
    1bea:	70 40       	sbci	r23, 0x00	; 0
    1bec:	01 10       	cpse	r0, r1
    1bee:	d8 f7       	brcc	.-10     	; 0x1be6 <strnlen_P+0x2>
    1bf0:	80 95       	com	r24
    1bf2:	90 95       	com	r25
    1bf4:	8e 0f       	add	r24, r30
    1bf6:	9f 1f       	adc	r25, r31
    1bf8:	08 95       	ret

00001bfa <strnlen>:
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	61 50       	subi	r22, 0x01	; 1
    1bfe:	70 40       	sbci	r23, 0x00	; 0
    1c00:	01 90       	ld	r0, Z+
    1c02:	01 10       	cpse	r0, r1
    1c04:	d8 f7       	brcc	.-10     	; 0x1bfc <strnlen+0x2>
    1c06:	80 95       	com	r24
    1c08:	90 95       	com	r25
    1c0a:	8e 0f       	add	r24, r30
    1c0c:	9f 1f       	adc	r25, r31
    1c0e:	08 95       	ret

00001c10 <fputc>:
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	fb 01       	movw	r30, r22
    1c1a:	23 81       	ldd	r18, Z+3	; 0x03
    1c1c:	21 fd       	sbrc	r18, 1
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <fputc+0x16>
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	9f ef       	ldi	r25, 0xFF	; 255
    1c24:	2c c0       	rjmp	.+88     	; 0x1c7e <fputc+0x6e>
    1c26:	22 ff       	sbrs	r18, 2
    1c28:	16 c0       	rjmp	.+44     	; 0x1c56 <fputc+0x46>
    1c2a:	46 81       	ldd	r20, Z+6	; 0x06
    1c2c:	57 81       	ldd	r21, Z+7	; 0x07
    1c2e:	24 81       	ldd	r18, Z+4	; 0x04
    1c30:	35 81       	ldd	r19, Z+5	; 0x05
    1c32:	42 17       	cp	r20, r18
    1c34:	53 07       	cpc	r21, r19
    1c36:	44 f4       	brge	.+16     	; 0x1c48 <fputc+0x38>
    1c38:	a0 81       	ld	r26, Z
    1c3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c3c:	9d 01       	movw	r18, r26
    1c3e:	2f 5f       	subi	r18, 0xFF	; 255
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	31 83       	std	Z+1, r19	; 0x01
    1c44:	20 83       	st	Z, r18
    1c46:	8c 93       	st	X, r24
    1c48:	26 81       	ldd	r18, Z+6	; 0x06
    1c4a:	37 81       	ldd	r19, Z+7	; 0x07
    1c4c:	2f 5f       	subi	r18, 0xFF	; 255
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	37 83       	std	Z+7, r19	; 0x07
    1c52:	26 83       	std	Z+6, r18	; 0x06
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <fputc+0x6e>
    1c56:	8b 01       	movw	r16, r22
    1c58:	ec 01       	movw	r28, r24
    1c5a:	fb 01       	movw	r30, r22
    1c5c:	00 84       	ldd	r0, Z+8	; 0x08
    1c5e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c60:	e0 2d       	mov	r30, r0
    1c62:	09 95       	icall
    1c64:	89 2b       	or	r24, r25
    1c66:	e1 f6       	brne	.-72     	; 0x1c20 <fputc+0x10>
    1c68:	d8 01       	movw	r26, r16
    1c6a:	16 96       	adiw	r26, 0x06	; 6
    1c6c:	8d 91       	ld	r24, X+
    1c6e:	9c 91       	ld	r25, X
    1c70:	17 97       	sbiw	r26, 0x07	; 7
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	17 96       	adiw	r26, 0x07	; 7
    1c76:	9c 93       	st	X, r25
    1c78:	8e 93       	st	-X, r24
    1c7a:	16 97       	sbiw	r26, 0x06	; 6
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <__ultoa_invert>:
    1c88:	fa 01       	movw	r30, r20
    1c8a:	aa 27       	eor	r26, r26
    1c8c:	28 30       	cpi	r18, 0x08	; 8
    1c8e:	51 f1       	breq	.+84     	; 0x1ce4 <__ultoa_invert+0x5c>
    1c90:	20 31       	cpi	r18, 0x10	; 16
    1c92:	81 f1       	breq	.+96     	; 0x1cf4 <__ultoa_invert+0x6c>
    1c94:	e8 94       	clt
    1c96:	6f 93       	push	r22
    1c98:	6e 7f       	andi	r22, 0xFE	; 254
    1c9a:	6e 5f       	subi	r22, 0xFE	; 254
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	af 4f       	sbci	r26, 0xFF	; 255
    1ca4:	b1 e0       	ldi	r27, 0x01	; 1
    1ca6:	3e d0       	rcall	.+124    	; 0x1d24 <__ultoa_invert+0x9c>
    1ca8:	b4 e0       	ldi	r27, 0x04	; 4
    1caa:	3c d0       	rcall	.+120    	; 0x1d24 <__ultoa_invert+0x9c>
    1cac:	67 0f       	add	r22, r23
    1cae:	78 1f       	adc	r23, r24
    1cb0:	89 1f       	adc	r24, r25
    1cb2:	9a 1f       	adc	r25, r26
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	68 0f       	add	r22, r24
    1cb8:	79 1f       	adc	r23, r25
    1cba:	8a 1f       	adc	r24, r26
    1cbc:	91 1d       	adc	r25, r1
    1cbe:	a1 1d       	adc	r26, r1
    1cc0:	6a 0f       	add	r22, r26
    1cc2:	71 1d       	adc	r23, r1
    1cc4:	81 1d       	adc	r24, r1
    1cc6:	91 1d       	adc	r25, r1
    1cc8:	a1 1d       	adc	r26, r1
    1cca:	20 d0       	rcall	.+64     	; 0x1d0c <__ultoa_invert+0x84>
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <__ultoa_invert+0x48>
    1cce:	68 94       	set
    1cd0:	3f 91       	pop	r19
    1cd2:	2a e0       	ldi	r18, 0x0A	; 10
    1cd4:	26 9f       	mul	r18, r22
    1cd6:	11 24       	eor	r1, r1
    1cd8:	30 19       	sub	r19, r0
    1cda:	30 5d       	subi	r19, 0xD0	; 208
    1cdc:	31 93       	st	Z+, r19
    1cde:	de f6       	brtc	.-74     	; 0x1c96 <__ultoa_invert+0xe>
    1ce0:	cf 01       	movw	r24, r30
    1ce2:	08 95       	ret
    1ce4:	46 2f       	mov	r20, r22
    1ce6:	47 70       	andi	r20, 0x07	; 7
    1ce8:	40 5d       	subi	r20, 0xD0	; 208
    1cea:	41 93       	st	Z+, r20
    1cec:	b3 e0       	ldi	r27, 0x03	; 3
    1cee:	0f d0       	rcall	.+30     	; 0x1d0e <__ultoa_invert+0x86>
    1cf0:	c9 f7       	brne	.-14     	; 0x1ce4 <__ultoa_invert+0x5c>
    1cf2:	f6 cf       	rjmp	.-20     	; 0x1ce0 <__ultoa_invert+0x58>
    1cf4:	46 2f       	mov	r20, r22
    1cf6:	4f 70       	andi	r20, 0x0F	; 15
    1cf8:	40 5d       	subi	r20, 0xD0	; 208
    1cfa:	4a 33       	cpi	r20, 0x3A	; 58
    1cfc:	18 f0       	brcs	.+6      	; 0x1d04 <__ultoa_invert+0x7c>
    1cfe:	49 5d       	subi	r20, 0xD9	; 217
    1d00:	31 fd       	sbrc	r19, 1
    1d02:	40 52       	subi	r20, 0x20	; 32
    1d04:	41 93       	st	Z+, r20
    1d06:	02 d0       	rcall	.+4      	; 0x1d0c <__ultoa_invert+0x84>
    1d08:	a9 f7       	brne	.-22     	; 0x1cf4 <__ultoa_invert+0x6c>
    1d0a:	ea cf       	rjmp	.-44     	; 0x1ce0 <__ultoa_invert+0x58>
    1d0c:	b4 e0       	ldi	r27, 0x04	; 4
    1d0e:	a6 95       	lsr	r26
    1d10:	97 95       	ror	r25
    1d12:	87 95       	ror	r24
    1d14:	77 95       	ror	r23
    1d16:	67 95       	ror	r22
    1d18:	ba 95       	dec	r27
    1d1a:	c9 f7       	brne	.-14     	; 0x1d0e <__ultoa_invert+0x86>
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	61 05       	cpc	r22, r1
    1d20:	71 05       	cpc	r23, r1
    1d22:	08 95       	ret
    1d24:	9b 01       	movw	r18, r22
    1d26:	ac 01       	movw	r20, r24
    1d28:	0a 2e       	mov	r0, r26
    1d2a:	06 94       	lsr	r0
    1d2c:	57 95       	ror	r21
    1d2e:	47 95       	ror	r20
    1d30:	37 95       	ror	r19
    1d32:	27 95       	ror	r18
    1d34:	ba 95       	dec	r27
    1d36:	c9 f7       	brne	.-14     	; 0x1d2a <__ultoa_invert+0xa2>
    1d38:	62 0f       	add	r22, r18
    1d3a:	73 1f       	adc	r23, r19
    1d3c:	84 1f       	adc	r24, r20
    1d3e:	95 1f       	adc	r25, r21
    1d40:	a0 1d       	adc	r26, r0
    1d42:	08 95       	ret

00001d44 <__prologue_saves__>:
    1d44:	2f 92       	push	r2
    1d46:	3f 92       	push	r3
    1d48:	4f 92       	push	r4
    1d4a:	5f 92       	push	r5
    1d4c:	6f 92       	push	r6
    1d4e:	7f 92       	push	r7
    1d50:	8f 92       	push	r8
    1d52:	9f 92       	push	r9
    1d54:	af 92       	push	r10
    1d56:	bf 92       	push	r11
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	ca 1b       	sub	r28, r26
    1d6e:	db 0b       	sbc	r29, r27
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	09 94       	ijmp

00001d7c <__epilogue_restores__>:
    1d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d7e:	39 88       	ldd	r3, Y+17	; 0x11
    1d80:	48 88       	ldd	r4, Y+16	; 0x10
    1d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d90:	c8 84       	ldd	r12, Y+8	; 0x08
    1d92:	df 80       	ldd	r13, Y+7	; 0x07
    1d94:	ee 80       	ldd	r14, Y+6	; 0x06
    1d96:	fd 80       	ldd	r15, Y+5	; 0x05
    1d98:	0c 81       	ldd	r16, Y+4	; 0x04
    1d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1da0:	ce 0f       	add	r28, r30
    1da2:	d1 1d       	adc	r29, r1
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	ed 01       	movw	r28, r26
    1db0:	08 95       	ret

00001db2 <_exit>:
    1db2:	f8 94       	cli

00001db4 <__stop_program>:
    1db4:	ff cf       	rjmp	.-2      	; 0x1db4 <__stop_program>
