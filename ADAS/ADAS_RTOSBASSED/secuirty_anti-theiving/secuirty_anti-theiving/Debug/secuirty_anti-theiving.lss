
secuirty_anti-theiving.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003116  000031aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006aa  0080012a  0080012a  00003274  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000032d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000788  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008764  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021dc  00000000  00000000  0000c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000051cf  00000000  00000000  0000e3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001514  00000000  00000000  000135a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003086  00000000  00000000  00014ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e9d  00000000  00000000  00017b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0001e9db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__vector_4>
      14:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_7>
      20:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__vector_8>
      24:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_19>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	77 12       	cpse	r7, r23
      56:	7c 12       	cpse	r7, r28
      58:	83 12       	cpse	r8, r19
      5a:	8a 12       	cpse	r8, r26
      5c:	91 12       	cpse	r9, r17
      5e:	98 12       	cpse	r9, r24
      60:	9f 12       	cpse	r9, r31
      62:	a6 12       	cpse	r10, r22

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e1       	ldi	r30, 0x16	; 22
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	27 e0       	ldi	r18, 0x07	; 7
      88:	aa e2       	ldi	r26, 0x2A	; 42
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a4 3d       	cpi	r26, 0xD4	; 212
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
      9a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Get_DoorLockState>:

void set_alarm(void)
{
	if (fire_alarm==1)
	{
		Buzzer_voidSetAlarm();
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <PUSH_BOTTUN_u8GetState>
      aa:	08 95       	ret

000000ac <Get_VIDContactState>:
// }

SYSTEM_ACTION_STATE_t Get_VIDContactState(void)
{
	
	return PUSH_BOTTUN_u8GetState(CONTACTOR_PORT,CONTACTOR_PIN);
      ac:	63 e0       	ldi	r22, 0x03	; 3
      ae:	83 e0       	ldi	r24, 0x03	; 3
      b0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <PUSH_BOTTUN_u8GetState>


}
      b4:	08 95       	ret

000000b6 <AutoLight_Func_StatSetup>:
#include "semphr.h"
extern SemaphoreHandle_t  LCDSemaphore;
void AutoLight_Func_StatSetup()
{

	dio_vidConfigChannel(AutoLight_LED_Port,AutoLight_LED_Pin,OUTPUT);
      b6:	41 e0       	ldi	r20, 0x01	; 1
      b8:	66 e0       	ldi	r22, 0x06	; 6
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
      c0:	08 95       	ret

000000c2 <AutoLight_Func_StatLoop>:
void AutoLight_Func_StatLoop(void *pvParameters)
{
	u16 Loc_AutoLight_Read;
	while(1)
	{
		if (Get_VIDContactState()==1)
      c2:	0e 94 56 00 	call	0xac	; 0xac <Get_VIDContactState>
      c6:	01 97       	sbiw	r24, 0x01	; 1
      c8:	e1 f7       	brne	.-8      	; 0xc2 <AutoLight_Func_StatLoop>
		{
			Loc_AutoLight_Read = LDR_u16Read();
      ca:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LDR_u16Read>
			if (Loc_AutoLight_Read > AutoLight_LDR_threshold)
      ce:	81 32       	cpi	r24, 0x21	; 33
      d0:	93 40       	sbci	r25, 0x03	; 3
      d2:	28 f1       	brcs	.+74     	; 0x11e <AutoLight_Func_StatLoop+0x5c>
			{
				dio_vidWriteChannel(AutoLight_LED_Port,AutoLight_LED_Pin,STD_HIGH);
      d4:	41 e0       	ldi	r20, 0x01	; 1
      d6:	66 e0       	ldi	r22, 0x06	; 6
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
				xSemaphoreTake(LCDSemaphore,100);
      de:	64 e6       	ldi	r22, 0x64	; 100
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
      e6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
      ea:	0e 94 45 07 	call	0xe8a	; 0xe8a <xQueueSemaphoreTake>
				lcd_vidGotoRowColumn(2,0);
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_vidGotoRowColumn>
				lcd_vidDisplyStr("Light Activated");
      fa:	89 e6       	ldi	r24, 0x69	; 105
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
				xSemaphoreGive(LCDSemaphore);
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     110:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     114:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
				AutoLight_Glob_Retstat = Led_ON;
     118:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     11c:	d2 cf       	rjmp	.-92     	; 0xc2 <AutoLight_Func_StatLoop>

			}
			else
			{
				xSemaphoreTake(LCDSemaphore,100);
     11e:	64 e6       	ldi	r22, 0x64	; 100
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     126:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     12a:	0e 94 45 07 	call	0xe8a	; 0xe8a <xQueueSemaphoreTake>
				dio_vidWriteChannel(AutoLight_LED_Port,AutoLight_LED_Pin,STD_LOW);	
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	66 e0       	ldi	r22, 0x06	; 6
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
				lcd_vidGotoRowColumn(2,0);
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_vidGotoRowColumn>
				xSemaphoreGive(LCDSemaphore);
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	40 e0       	ldi	r20, 0x00	; 0
     148:	50 e0       	ldi	r21, 0x00	; 0
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     152:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     156:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
				lcd_vidDisplyStr("Light De-Activated");
     15a:	89 e7       	ldi	r24, 0x79	; 121
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
				AutoLight_Glob_Retstat = Led_OFF;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     168:	ac cf       	rjmp	.-168    	; 0xc2 <AutoLight_Func_StatLoop>

0000016a <AutoWiper_vidsetup>:
ServoMotor_Config  servo1_config={SERVO_ATTTCH_PD5};
extern u8 contactor_state;
extern SemaphoreHandle_t  LCDSemaphore;
void AutoWiper_vidsetup()
{
	 RAIN_SENSOR_vidInit();
     16a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <RAIN_SENSOR_vidInit>
	Servo_voidInit(&servo1_config);
     16e:	81 e6       	ldi	r24, 0x61	; 97
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <Servo_voidInit>
	Timer_voidInitTimer2(&TIMER2Configdelay);
     176:	82 e6       	ldi	r24, 0x62	; 98
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 37 12 	call	0x246e	; 0x246e <Timer_voidInitTimer2>
	Servo_voidWrite(&servo1_config,0);
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	81 e6       	ldi	r24, 0x61	; 97
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <Servo_voidWrite>
	Servo_voidWrite(&servo1_config,0);
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	81 e6       	ldi	r24, 0x61	; 97
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <Servo_voidWrite>
     192:	08 95       	ret

00000194 <AutoWiper_vidloop>:
}
void AutoWiper_vidloop(void *pvParameters)
{
	while(1)
	{
		if (Get_VIDContactState()==1)
     194:	0e 94 56 00 	call	0xac	; 0xac <Get_VIDContactState>
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	09 f0       	breq	.+2      	; 0x19e <AutoWiper_vidloop+0xa>
     19c:	69 c0       	rjmp	.+210    	; 0x270 <AutoWiper_vidloop+0xdc>
		{
			if (RAIN_SENSOR_voidGetState()==RAIN)
     19e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <RAIN_SENSOR_voidGetState>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <AutoWiper_vidloop+0x14>
     1a6:	3f c0       	rjmp	.+126    	; 0x226 <AutoWiper_vidloop+0x92>
			{
                 xSemaphoreTake(LCDSemaphore,100);
     1a8:	64 e6       	ldi	r22, 0x64	; 100
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     1b0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     1b4:	0e 94 45 07 	call	0xe8a	; 0xe8a <xQueueSemaphoreTake>
				lcd_vidGotoRowColumn(3,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_vidGotoRowColumn>
				lcd_vidDisplyStr("Rain");
     1c4:	8f e8       	ldi	r24, 0x8F	; 143
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
				xSemaphoreGive(LCDSemaphore);
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     1da:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     1de:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
				Servo_voidWrite(&servo1_config,180);
     1e2:	64 eb       	ldi	r22, 0xB4	; 180
     1e4:	81 e6       	ldi	r24, 0x61	; 97
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <Servo_voidWrite>
				Servo_voidWrite(&servo1_config,180);
     1ec:	64 eb       	ldi	r22, 0xB4	; 180
     1ee:	81 e6       	ldi	r24, 0x61	; 97
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <Servo_voidWrite>
				vTaskDelay(100);
     1f6:	84 e6       	ldi	r24, 0x64	; 100
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
				//_delay_ms(1000);
				Servo_voidWrite(&servo1_config,0);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	81 e6       	ldi	r24, 0x61	; 97
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <Servo_voidWrite>
				Servo_voidWrite(&servo1_config,0);
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	81 e6       	ldi	r24, 0x61	; 97
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <Servo_voidWrite>
				vTaskDelay(100);
     212:	84 e6       	ldi	r24, 0x64	; 100
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
				//Timer_voidSetBusyWait_ms(TIMER2,100);
				AutoWiper_Glob_AutoWiper_Current_State = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <AutoWiper_Glob_AutoWiper_Current_State>
				AuttoWiper_Glob_Rain_flag = 1;
     220:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <AuttoWiper_Glob_Rain_flag>
     224:	21 c0       	rjmp	.+66     	; 0x268 <AutoWiper_vidloop+0xd4>
			}
			else
			{
				xSemaphoreTake(LCDSemaphore,100);
     226:	64 e6       	ldi	r22, 0x64	; 100
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     22e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     232:	0e 94 45 07 	call	0xe8a	; 0xe8a <xQueueSemaphoreTake>
				lcd_vidGotoRowColumn(3,0);
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_vidGotoRowColumn>
				lcd_vidDisplyStr("No Rain");
     242:	8c e8       	ldi	r24, 0x8C	; 140
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
				xSemaphoreGive(LCDSemaphore);
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     258:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     25c:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
				AutoWiper_Glob_AutoWiper_Current_State = 0;
     260:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <AutoWiper_Glob_AutoWiper_Current_State>
				AuttoWiper_Glob_Rain_flag = 0;
     264:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <AuttoWiper_Glob_Rain_flag>
			}
			AutoWiper_Glob_AutoWiper_Prev_State = AutoWiper_Glob_AutoWiper_Current_State;
     268:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <AutoWiper_Glob_AutoWiper_Current_State>
     26c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <AutoWiper_Glob_AutoWiper_Prev_State>
		}
		vTaskDelay(100);
     270:	84 e6       	ldi	r24, 0x64	; 100
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
		/*lcd_vidClrDislay();*/
	}
     278:	8d cf       	rjmp	.-230    	; 0x194 <AutoWiper_vidloop>

0000027a <RTC_vidsetup>:
void RTC_vidsetup()
{
	/*lcd_vidInit();*/
	u8 minute,day;
	u8* clock_ptr;
	RTC_Set_Time(0x02, 0x05, 0x55); 	// Set time 21:40:30
     27a:	45 e5       	ldi	r20, 0x55	; 85
     27c:	65 e0       	ldi	r22, 0x05	; 5
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <RTC_Set_Time>
	RTC_Set_Date(0x25, 0x12, 0x11); 	// Set date 25-12-2010
     284:	41 e1       	ldi	r20, 0x11	; 17
     286:	62 e1       	ldi	r22, 0x12	; 18
     288:	85 e2       	ldi	r24, 0x25	; 37
     28a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <RTC_Set_Date>
     28e:	08 95       	ret

00000290 <RTC_vidloop>:
}
void RTC_vidloop(void *pvParameters)
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	00 d0       	rcall	.+0      	; 0x296 <RTC_vidloop+0x6>
     296:	1f 92       	push	r1
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
	/*lcd_vidClrDislay();*/
	u8 s=0,m=0,h=0;
     29c:	19 82       	std	Y+1, r1	; 0x01
     29e:	1a 82       	std	Y+2, r1	; 0x02
     2a0:	1b 82       	std	Y+3, r1	; 0x03
	while(1)
	{
		if (Get_VIDContactState()==1)
     2a2:	0e 94 56 00 	call	0xac	; 0xac <Get_VIDContactState>
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	89 f5       	brne	.+98     	; 0x30c <RTC_vidloop+0x7c>
		{
				RTC_Get_Time(&h,&m,&s);	
     2aa:	ae 01       	movw	r20, r28
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	be 01       	movw	r22, r28
     2b2:	6e 5f       	subi	r22, 0xFE	; 254
     2b4:	7f 4f       	sbci	r23, 0xFF	; 255
     2b6:	ce 01       	movw	r24, r28
     2b8:	03 96       	adiw	r24, 0x03	; 3
     2ba:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <RTC_Get_Time>
				sprintf(buffer, "%02x:%02x:%02x", (h & 0b00011111), (m & 0b01111111), (s & 0b01111111));
     2be:	29 81       	ldd	r18, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
     2c4:	2f 77       	andi	r18, 0x7F	; 127
     2c6:	1f 92       	push	r1
     2c8:	2f 93       	push	r18
     2ca:	9f 77       	andi	r25, 0x7F	; 127
     2cc:	1f 92       	push	r1
     2ce:	9f 93       	push	r25
     2d0:	8f 71       	andi	r24, 0x1F	; 31
     2d2:	1f 92       	push	r1
     2d4:	8f 93       	push	r24
     2d6:	84 e9       	ldi	r24, 0x94	; 148
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9f 93       	push	r25
     2dc:	8f 93       	push	r24
     2de:	84 eb       	ldi	r24, 0xB4	; 180
     2e0:	97 e0       	ldi	r25, 0x07	; 7
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <sprintf>
				lcd_vidGotoRowColumn(0,0);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_vidGotoRowColumn>
				lcd_vidDisplyStr("Time is: ");
     2f2:	83 ea       	ldi	r24, 0xA3	; 163
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
				lcd_vidDisplyStr(buffer);
     2fa:	84 eb       	ldi	r24, 0xB4	; 180
     2fc:	97 e0       	ldi	r25, 0x07	; 7
     2fe:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
		}
   vTaskDelay(60);
     30c:	8c e3       	ldi	r24, 0x3C	; 60
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
	}
     314:	c6 cf       	rjmp	.-116    	; 0x2a2 <RTC_vidloop+0x12>

00000316 <EXTINT0_CALLBACK>:
				MCUCR_reg&=~(1<<7);
				xSemaphoreTake(LCDSemaphore,100);
				lcd_vidClrDislay();
				lcd_vidDisplyStr("exit from sleep mode ^_^");
				xSemaphoreGive(LCDSemaphore);
					set_alarm();
     316:	cf 93       	push	r28
     318:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <flag.2951>
     31c:	81 11       	cpse	r24, r1
     31e:	0e c0       	rjmp	.+28     	; 0x33c <EXTINT0_CALLBACK+0x26>
     320:	c1 e0       	ldi	r28, 0x01	; 1
     322:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <flag.2951>
     326:	0e 94 2c 11 	call	0x2258	; 0x2258 <EXTINT_voidDisable>
     32a:	84 ef       	ldi	r24, 0xF4	; 244
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
     332:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__data_end>
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 b1 10 	call	0x2162	; 0x2162 <EXTINT_voidEnable>
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <ButtonSemaphore>
     34a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <ButtonSemaphore+0x1>
     34e:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
     352:	0e 94 51 00 	call	0xa2	; 0xa2 <Get_DoorLockState>
     356:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <fire_alarm>
     35a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <flag.2951>
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <ENABLE_Sleep_Mode>:
     362:	0e 94 56 00 	call	0xac	; 0xac <Get_VIDContactState>
     366:	81 11       	cpse	r24, r1
     368:	fc cf       	rjmp	.-8      	; 0x362 <ENABLE_Sleep_Mode>
     36a:	64 e6       	ldi	r22, 0x64	; 100
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     372:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     376:	0e 94 45 07 	call	0xe8a	; 0xe8a <xQueueSemaphoreTake>
     37a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_vidClrDislay>
     37e:	8d ea       	ldi	r24, 0xAD	; 173
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCDSemaphore>
     394:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LCDSemaphore+0x1>
     398:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 b1 10 	call	0x2162	; 0x2162 <EXTINT_voidEnable>
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 2c 12 	call	0x2458	; 0x2458 <SLEEP_MODEvoidEnable>
     3a8:	88 95       	sleep
     3aa:	db cf       	rjmp	.-74     	; 0x362 <ENABLE_Sleep_Mode>

000003ac <main>:
	}

	
}
void main()
{
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
	
		//initializations
		lcd_vidInit();
     3b2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <lcd_vidInit>
		//INIT BUZZAR
		dio_vidConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
     3b6:	41 e0       	ldi	r20, 0x01	; 1
     3b8:	66 e0       	ldi	r22, 0x06	; 6
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
		//INIT BUTTUN FOR CONTACTOR
		dio_vidConfigChannel(CONTACTOR_PORT,CONTACTOR_PIN,INPUT);
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	63 e0       	ldi	r22, 0x03	; 3
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
		//INIT BUTTON FOR LOCK DOOR
		dio_vidConfigChannel(DOOR_LOCK_PORT,DOOR_LOCK_PIN,INPUT);
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	64 e0       	ldi	r22, 0x04	; 4
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
		//INIT TIMER0 FOR DELAY FUNCTIONS
		//init extint
		EXTINT_voidGlobalIntEnable();
     3d4:	0e 94 3e 11 	call	0x227c	; 0x227c <EXTINT_voidGlobalIntEnable>
		EXTINT_voidMode(EXT_INT0,EXT_INT0_RISING_EDGE,EXTINT0_CALLBACK);
     3d8:	4b e8       	ldi	r20, 0x8B	; 139
     3da:	51 e0       	ldi	r21, 0x01	; 1
     3dc:	69 e0       	ldi	r22, 0x09	; 9
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 c3 10 	call	0x2186	; 0x2186 <EXTINT_voidMode>
		//INIT I2C
		I2C_Init();
     3e4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <I2C_Init>
		//INIT RTC FOR TIME AND CLOCK
		RTC_vidsetup();
     3e8:	0e 94 3d 01 	call	0x27a	; 0x27a <RTC_vidsetup>
		//init autolight system
		//init ADC
		ADC_vidInit();
     3ec:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <ADC_vidInit>
		AutoLight_Func_StatSetup();
     3f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <AutoLight_Func_StatSetup>
		//INIT AUTO WIPE SYSTEM
		//INIT
		AutoWiper_vidsetup();
     3f4:	0e 94 b5 00 	call	0x16a	; 0x16a <AutoWiper_vidsetup>
		//check for door lock sensor
		//if door unlock fire the buzzer and send message via GSM
	//task for check contact access global variable
	//xTaskCreate(Get_ContactState,(const signed char*)"Contact state check",85,NULL,GetContactState_pr,&Task_GetContactState);
	//task for auto light
	xTaskCreate(AutoLight_Func_StatLoop,(const signed char*)"auto lighting",85,NULL,AutoLight_pr,&Task_AutoLight);
     3f8:	0f 2e       	mov	r0, r31
     3fa:	fa ea       	ldi	r31, 0xAA	; 170
     3fc:	ef 2e       	mov	r14, r31
     3fe:	f7 e0       	ldi	r31, 0x07	; 7
     400:	ff 2e       	mov	r15, r31
     402:	f0 2d       	mov	r31, r0
     404:	04 e0       	ldi	r16, 0x04	; 4
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	45 e5       	ldi	r20, 0x55	; 85
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	6b ed       	ldi	r22, 0xDB	; 219
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	81 e6       	ldi	r24, 0x61	; 97
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xTaskCreate>
	//task for auto wiper
	xTaskCreate(AutoWiper_vidloop,(const signed char*)"auto wiper",85,NULL,AutoWiper_pr,&Task_AutoWiper);
     41a:	0f 2e       	mov	r0, r31
     41c:	f4 ea       	ldi	r31, 0xA4	; 164
     41e:	ef 2e       	mov	r14, r31
     420:	f7 e0       	ldi	r31, 0x07	; 7
     422:	ff 2e       	mov	r15, r31
     424:	f0 2d       	mov	r31, r0
     426:	05 e0       	ldi	r16, 0x05	; 5
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	45 e5       	ldi	r20, 0x55	; 85
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	69 ee       	ldi	r22, 0xE9	; 233
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	8a ec       	ldi	r24, 0xCA	; 202
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xTaskCreate>
	//task for detection
	//xTaskCreate(lcd_vidClrDislay,(const signed char*)"LCD CLEAR DISPLAY",85,NULL,lcd_ClrDislay_pr,&Task_LCDClr);
	//task for time 
	xTaskCreate(RTC_vidloop,(const signed char*)"RTC GET TIME",85,NULL,GetTime_pr,&Task_GetTime);
     43c:	0f 2e       	mov	r0, r31
     43e:	f6 ea       	ldi	r31, 0xA6	; 166
     440:	ef 2e       	mov	r14, r31
     442:	f7 e0       	ldi	r31, 0x07	; 7
     444:	ff 2e       	mov	r15, r31
     446:	f0 2d       	mov	r31, r0
     448:	06 e0       	ldi	r16, 0x06	; 6
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	45 e5       	ldi	r20, 0x55	; 85
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	64 ef       	ldi	r22, 0xF4	; 244
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	88 e4       	ldi	r24, 0x48	; 72
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xTaskCreate>
	//task for sleep mode
	//enable sleep mode
	xTaskCreate(ENABLE_Sleep_Mode,(const signed char*)"enter sleep mode",85,NULL,EnableSleepMode_pr,&Task_EnableSleepMode);
     45e:	0f 2e       	mov	r0, r31
     460:	f0 eb       	ldi	r31, 0xB0	; 176
     462:	ef 2e       	mov	r14, r31
     464:	f7 e0       	ldi	r31, 0x07	; 7
     466:	ff 2e       	mov	r15, r31
     468:	f0 2d       	mov	r31, r0
     46a:	03 e0       	ldi	r16, 0x03	; 3
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	45 e5       	ldi	r20, 0x55	; 85
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	81 eb       	ldi	r24, 0xB1	; 177
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xTaskCreate>
	//disable sleep mode
	//xTaskCreate(DISABLE_Sleep_Mode,(const signed char*)"exit sleep mode",85,NULL,DisableSleepMode_pr,&Task_DisableSleepMode);
	 ButtonSemaphore=xSemaphoreCreateBinary();
     480:	43 e0       	ldi	r20, 0x03	; 3
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 72 06 	call	0xce4	; 0xce4 <xQueueGenericCreate>
     48a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <ButtonSemaphore+0x1>
     48e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <ButtonSemaphore>
	 LCDSemaphore=xSemaphoreCreateBinary();
     492:	43 e0       	ldi	r20, 0x03	; 3
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 72 06 	call	0xce4	; 0xce4 <xQueueGenericCreate>
     49c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <LCDSemaphore+0x1>
     4a0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <LCDSemaphore>
	 xSemaphoreGive(LCDSemaphore);
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 b3 06 	call	0xd66	; 0xd66 <xQueueGenericSend>
	//xSemaphoreTake(ButtonSemaphore,100);
		lcd_vidClrDislay();
     4b2:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_vidClrDislay>
	lcd_vidDisplyStr("hello to ADAS ^-^");
     4b6:	82 e1       	ldi	r24, 0x12	; 18
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <lcd_vidDisplyStr>

	vTaskStartScheduler();
     4be:	0e 94 d6 09 	call	0x13ac	; 0x13ac <vTaskStartScheduler>
}
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	08 95       	ret

000004ca <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4ca:	fc 01       	movw	r30, r24
     4cc:	03 96       	adiw	r24, 0x03	; 3
     4ce:	92 83       	std	Z+2, r25	; 0x02
     4d0:	81 83       	std	Z+1, r24	; 0x01
     4d2:	2f ef       	ldi	r18, 0xFF	; 255
     4d4:	3f ef       	ldi	r19, 0xFF	; 255
     4d6:	34 83       	std	Z+4, r19	; 0x04
     4d8:	23 83       	std	Z+3, r18	; 0x03
     4da:	96 83       	std	Z+6, r25	; 0x06
     4dc:	85 83       	std	Z+5, r24	; 0x05
     4de:	90 87       	std	Z+8, r25	; 0x08
     4e0:	87 83       	std	Z+7, r24	; 0x07
     4e2:	10 82       	st	Z, r1
     4e4:	08 95       	ret

000004e6 <vListInitialiseItem>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	11 86       	std	Z+9, r1	; 0x09
     4ea:	10 86       	std	Z+8, r1	; 0x08
     4ec:	08 95       	ret

000004ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f4:	48 81       	ld	r20, Y
     4f6:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4f8:	4f 3f       	cpi	r20, 0xFF	; 255
     4fa:	2f ef       	ldi	r18, 0xFF	; 255
     4fc:	52 07       	cpc	r21, r18
     4fe:	21 f4       	brne	.+8      	; 0x508 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     500:	fc 01       	movw	r30, r24
     502:	a7 81       	ldd	r26, Z+7	; 0x07
     504:	b0 85       	ldd	r27, Z+8	; 0x08
     506:	0d c0       	rjmp	.+26     	; 0x522 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     508:	dc 01       	movw	r26, r24
     50a:	13 96       	adiw	r26, 0x03	; 3
     50c:	01 c0       	rjmp	.+2      	; 0x510 <vListInsert+0x22>
     50e:	df 01       	movw	r26, r30
     510:	12 96       	adiw	r26, 0x02	; 2
     512:	ed 91       	ld	r30, X+
     514:	fc 91       	ld	r31, X
     516:	13 97       	sbiw	r26, 0x03	; 3
     518:	20 81       	ld	r18, Z
     51a:	31 81       	ldd	r19, Z+1	; 0x01
     51c:	42 17       	cp	r20, r18
     51e:	53 07       	cpc	r21, r19
     520:	b0 f7       	brcc	.-20     	; 0x50e <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     522:	12 96       	adiw	r26, 0x02	; 2
     524:	ed 91       	ld	r30, X+
     526:	fc 91       	ld	r31, X
     528:	13 97       	sbiw	r26, 0x03	; 3
     52a:	fb 83       	std	Y+3, r31	; 0x03
     52c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     52e:	d5 83       	std	Z+5, r29	; 0x05
     530:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     532:	bd 83       	std	Y+5, r27	; 0x05
     534:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     536:	13 96       	adiw	r26, 0x03	; 3
     538:	dc 93       	st	X, r29
     53a:	ce 93       	st	-X, r28
     53c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     53e:	99 87       	std	Y+9, r25	; 0x09
     540:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     542:	fc 01       	movw	r30, r24
     544:	20 81       	ld	r18, Z
     546:	2f 5f       	subi	r18, 0xFF	; 255
     548:	20 83       	st	Z, r18
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     556:	a0 85       	ldd	r26, Z+8	; 0x08
     558:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     55a:	c2 81       	ldd	r28, Z+2	; 0x02
     55c:	d3 81       	ldd	r29, Z+3	; 0x03
     55e:	84 81       	ldd	r24, Z+4	; 0x04
     560:	95 81       	ldd	r25, Z+5	; 0x05
     562:	9d 83       	std	Y+5, r25	; 0x05
     564:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     566:	c4 81       	ldd	r28, Z+4	; 0x04
     568:	d5 81       	ldd	r29, Z+5	; 0x05
     56a:	82 81       	ldd	r24, Z+2	; 0x02
     56c:	93 81       	ldd	r25, Z+3	; 0x03
     56e:	9b 83       	std	Y+3, r25	; 0x03
     570:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     572:	11 96       	adiw	r26, 0x01	; 1
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	12 97       	sbiw	r26, 0x02	; 2
     57a:	e8 17       	cp	r30, r24
     57c:	f9 07       	cpc	r31, r25
     57e:	31 f4       	brne	.+12     	; 0x58c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	12 96       	adiw	r26, 0x02	; 2
     586:	9c 93       	st	X, r25
     588:	8e 93       	st	-X, r24
     58a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     58c:	11 86       	std	Z+9, r1	; 0x09
     58e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     590:	8c 91       	ld	r24, X
     592:	81 50       	subi	r24, 0x01	; 1
     594:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     596:	8c 91       	ld	r24, X
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     59e:	1b bc       	out	0x2b, r1	; 43
     5a0:	8c e7       	ldi	r24, 0x7C	; 124
     5a2:	8a bd       	out	0x2a, r24	; 42
     5a4:	8b e0       	ldi	r24, 0x0B	; 11
     5a6:	8e bd       	out	0x2e, r24	; 46
     5a8:	89 b7       	in	r24, 0x39	; 57
     5aa:	80 61       	ori	r24, 0x10	; 16
     5ac:	89 bf       	out	0x39, r24	; 57
     5ae:	08 95       	ret

000005b0 <pxPortInitialiseStack>:
     5b0:	31 e1       	ldi	r19, 0x11	; 17
     5b2:	fc 01       	movw	r30, r24
     5b4:	30 83       	st	Z, r19
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	22 e2       	ldi	r18, 0x22	; 34
     5ba:	20 83       	st	Z, r18
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	a3 e3       	ldi	r26, 0x33	; 51
     5c0:	a0 83       	st	Z, r26
     5c2:	31 97       	sbiw	r30, 0x01	; 1
     5c4:	60 83       	st	Z, r22
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	70 83       	st	Z, r23
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	10 82       	st	Z, r1
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	60 e8       	ldi	r22, 0x80	; 128
     5d2:	60 83       	st	Z, r22
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	60 83       	st	Z, r22
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	63 e0       	ldi	r22, 0x03	; 3
     5e2:	60 83       	st	Z, r22
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	64 e0       	ldi	r22, 0x04	; 4
     5e8:	60 83       	st	Z, r22
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	65 e0       	ldi	r22, 0x05	; 5
     5ee:	60 83       	st	Z, r22
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	66 e0       	ldi	r22, 0x06	; 6
     5f4:	60 83       	st	Z, r22
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	67 e0       	ldi	r22, 0x07	; 7
     5fa:	60 83       	st	Z, r22
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	68 e0       	ldi	r22, 0x08	; 8
     600:	60 83       	st	Z, r22
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	69 e0       	ldi	r22, 0x09	; 9
     606:	60 83       	st	Z, r22
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	60 e1       	ldi	r22, 0x10	; 16
     60c:	60 83       	st	Z, r22
     60e:	31 97       	sbiw	r30, 0x01	; 1
     610:	30 83       	st	Z, r19
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	32 e1       	ldi	r19, 0x12	; 18
     616:	30 83       	st	Z, r19
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	33 e1       	ldi	r19, 0x13	; 19
     61c:	30 83       	st	Z, r19
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	34 e1       	ldi	r19, 0x14	; 20
     622:	30 83       	st	Z, r19
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	35 e1       	ldi	r19, 0x15	; 21
     628:	30 83       	st	Z, r19
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	36 e1       	ldi	r19, 0x16	; 22
     62e:	30 83       	st	Z, r19
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	37 e1       	ldi	r19, 0x17	; 23
     634:	30 83       	st	Z, r19
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	38 e1       	ldi	r19, 0x18	; 24
     63a:	30 83       	st	Z, r19
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	39 e1       	ldi	r19, 0x19	; 25
     640:	30 83       	st	Z, r19
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	30 e2       	ldi	r19, 0x20	; 32
     646:	30 83       	st	Z, r19
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	31 e2       	ldi	r19, 0x21	; 33
     64c:	30 83       	st	Z, r19
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	20 83       	st	Z, r18
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	23 e2       	ldi	r18, 0x23	; 35
     656:	20 83       	st	Z, r18
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	40 83       	st	Z, r20
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	50 83       	st	Z, r21
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	26 e2       	ldi	r18, 0x26	; 38
     664:	20 83       	st	Z, r18
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	27 e2       	ldi	r18, 0x27	; 39
     66a:	20 83       	st	Z, r18
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	28 e2       	ldi	r18, 0x28	; 40
     670:	20 83       	st	Z, r18
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	29 e2       	ldi	r18, 0x29	; 41
     676:	20 83       	st	Z, r18
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	20 e3       	ldi	r18, 0x30	; 48
     67c:	20 83       	st	Z, r18
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	21 e3       	ldi	r18, 0x31	; 49
     682:	20 83       	st	Z, r18
     684:	86 97       	sbiw	r24, 0x26	; 38
     686:	08 95       	ret

00000688 <xPortStartScheduler>:
     688:	0e 94 cf 02 	call	0x59e	; 0x59e <prvSetupTimerInterrupt>
     68c:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     690:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     694:	cd 91       	ld	r28, X+
     696:	cd bf       	out	0x3d, r28	; 61
     698:	dd 91       	ld	r29, X+
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	ff 91       	pop	r31
     69e:	ef 91       	pop	r30
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	bf 91       	pop	r27
     6a6:	af 91       	pop	r26
     6a8:	9f 91       	pop	r25
     6aa:	8f 91       	pop	r24
     6ac:	7f 91       	pop	r23
     6ae:	6f 91       	pop	r22
     6b0:	5f 91       	pop	r21
     6b2:	4f 91       	pop	r20
     6b4:	3f 91       	pop	r19
     6b6:	2f 91       	pop	r18
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	7f 90       	pop	r7
     6ce:	6f 90       	pop	r6
     6d0:	5f 90       	pop	r5
     6d2:	4f 90       	pop	r4
     6d4:	3f 90       	pop	r3
     6d6:	2f 90       	pop	r2
     6d8:	1f 90       	pop	r1
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	08 95       	ret
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	08 95       	ret

000006e6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	0f 92       	push	r0
     6ee:	1f 92       	push	r1
     6f0:	11 24       	eor	r1, r1
     6f2:	2f 92       	push	r2
     6f4:	3f 92       	push	r3
     6f6:	4f 92       	push	r4
     6f8:	5f 92       	push	r5
     6fa:	6f 92       	push	r6
     6fc:	7f 92       	push	r7
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	ef 93       	push	r30
     72c:	ff 93       	push	r31
     72e:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     732:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     736:	0d b6       	in	r0, 0x3d	; 61
     738:	0d 92       	st	X+, r0
     73a:	0e b6       	in	r0, 0x3e	; 62
     73c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     73e:	0e 94 0d 0c 	call	0x181a	; 0x181a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     742:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     746:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     74a:	cd 91       	ld	r28, X+
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	dd 91       	ld	r29, X+
     750:	de bf       	out	0x3e, r29	; 62
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	bf 90       	pop	r11
     77c:	af 90       	pop	r10
     77e:	9f 90       	pop	r9
     780:	8f 90       	pop	r8
     782:	7f 90       	pop	r7
     784:	6f 90       	pop	r6
     786:	5f 90       	pop	r5
     788:	4f 90       	pop	r4
     78a:	3f 90       	pop	r3
     78c:	2f 90       	pop	r2
     78e:	1f 90       	pop	r1
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0

	asm volatile ( "ret" );
     796:	08 95       	ret

00000798 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	0f 92       	push	r0
     7a0:	1f 92       	push	r1
     7a2:	11 24       	eor	r1, r1
     7a4:	2f 92       	push	r2
     7a6:	3f 92       	push	r3
     7a8:	4f 92       	push	r4
     7aa:	5f 92       	push	r5
     7ac:	6f 92       	push	r6
     7ae:	7f 92       	push	r7
     7b0:	8f 92       	push	r8
     7b2:	9f 92       	push	r9
     7b4:	af 92       	push	r10
     7b6:	bf 92       	push	r11
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	2f 93       	push	r18
     7c6:	3f 93       	push	r19
     7c8:	4f 93       	push	r20
     7ca:	5f 93       	push	r21
     7cc:	6f 93       	push	r22
     7ce:	7f 93       	push	r23
     7d0:	8f 93       	push	r24
     7d2:	9f 93       	push	r25
     7d4:	af 93       	push	r26
     7d6:	bf 93       	push	r27
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
     7e0:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     7e4:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     7e8:	0d b6       	in	r0, 0x3d	; 61
     7ea:	0d 92       	st	X+, r0
     7ec:	0e b6       	in	r0, 0x3e	; 62
     7ee:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     7f0:	0e 94 08 0a 	call	0x1410	; 0x1410 <xTaskIncrementTick>
     7f4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     7f6:	0e 94 0d 0c 	call	0x181a	; 0x181a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     7fa:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     7fe:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     802:	cd 91       	ld	r28, X+
     804:	cd bf       	out	0x3d, r28	; 61
     806:	dd 91       	ld	r29, X+
     808:	de bf       	out	0x3e, r29	; 62
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	6f 90       	pop	r6
     83e:	5f 90       	pop	r5
     840:	4f 90       	pop	r4
     842:	3f 90       	pop	r3
     844:	2f 90       	pop	r2
     846:	1f 90       	pop	r1
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     84e:	08 95       	ret

00000850 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     850:	0e 94 cc 03 	call	0x798	; 0x798 <vPortYieldFromTick>
		asm volatile ( "reti" );
     854:	18 95       	reti

00000856 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     856:	ec e3       	ldi	r30, 0x3C	; 60
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	a0 e4       	ldi	r26, 0x40	; 64
     85c:	b1 e0       	ldi	r27, 0x01	; 1
     85e:	b1 83       	std	Z+1, r27	; 0x01
     860:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     862:	13 82       	std	Z+3, r1	; 0x03
     864:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     866:	e8 e1       	ldi	r30, 0x18	; 24
     868:	f7 e0       	ldi	r31, 0x07	; 7
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( BlockLink_t * ) uxAddress;
     86a:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <pxEnd+0x1>
     86e:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <pxEnd>
    pxEnd->xBlockSize = 0;
     872:	13 82       	std	Z+3, r1	; 0x03
     874:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     876:	11 82       	std	Z+1, r1	; 0x01
     878:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
     87a:	88 ed       	ldi	r24, 0xD8	; 216
     87c:	95 e0       	ldi	r25, 0x05	; 5
     87e:	13 96       	adiw	r26, 0x03	; 3
     880:	9c 93       	st	X, r25
     882:	8e 93       	st	-X, r24
     884:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     886:	ed 93       	st	X+, r30
     888:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     88a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <xMinimumEverFreeBytesRemaining+0x1>
     88e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     892:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <xFreeBytesRemaining+0x1>
     896:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <xFreeBytesRemaining>
     89a:	08 95       	ret

0000089c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     8a2:	ac e3       	ldi	r26, 0x3C	; 60
     8a4:	b1 e0       	ldi	r27, 0x01	; 1
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <prvInsertBlockIntoFreeList+0xe>
     8a8:	df 01       	movw	r26, r30
     8aa:	ed 91       	ld	r30, X+
     8ac:	fc 91       	ld	r31, X
     8ae:	11 97       	sbiw	r26, 0x01	; 1
     8b0:	ec 17       	cp	r30, r28
     8b2:	fd 07       	cpc	r31, r29
     8b4:	c8 f3       	brcs	.-14     	; 0x8a8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	8d 91       	ld	r24, X+
     8ba:	9c 91       	ld	r25, X
     8bc:	13 97       	sbiw	r26, 0x03	; 3
     8be:	9d 01       	movw	r18, r26
     8c0:	28 0f       	add	r18, r24
     8c2:	39 1f       	adc	r19, r25
     8c4:	c2 17       	cp	r28, r18
     8c6:	d3 07       	cpc	r29, r19
     8c8:	49 f4       	brne	.+18     	; 0x8dc <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     8ca:	2a 81       	ldd	r18, Y+2	; 0x02
     8cc:	3b 81       	ldd	r19, Y+3	; 0x03
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	13 96       	adiw	r26, 0x03	; 3
     8d4:	9c 93       	st	X, r25
     8d6:	8e 93       	st	-X, r24
     8d8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     8da:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	9b 81       	ldd	r25, Y+3	; 0x03
     8e0:	9e 01       	movw	r18, r28
     8e2:	28 0f       	add	r18, r24
     8e4:	39 1f       	adc	r19, r25
     8e6:	e2 17       	cp	r30, r18
     8e8:	f3 07       	cpc	r31, r19
     8ea:	c1 f4       	brne	.+48     	; 0x91c <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     8ec:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <pxEnd>
     8f0:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <pxEnd+0x1>
     8f4:	e2 17       	cp	r30, r18
     8f6:	f3 07       	cpc	r31, r19
     8f8:	71 f0       	breq	.+28     	; 0x916 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     8fa:	22 81       	ldd	r18, Z+2	; 0x02
     8fc:	33 81       	ldd	r19, Z+3	; 0x03
     8fe:	82 0f       	add	r24, r18
     900:	93 1f       	adc	r25, r19
     902:	9b 83       	std	Y+3, r25	; 0x03
     904:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     906:	ed 91       	ld	r30, X+
     908:	fc 91       	ld	r31, X
     90a:	11 97       	sbiw	r26, 0x01	; 1
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	99 83       	std	Y+1, r25	; 0x01
     912:	88 83       	st	Y, r24
     914:	05 c0       	rjmp	.+10     	; 0x920 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     916:	39 83       	std	Y+1, r19	; 0x01
     918:	28 83       	st	Y, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     91c:	f9 83       	std	Y+1, r31	; 0x01
     91e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     920:	ca 17       	cp	r28, r26
     922:	db 07       	cpc	r29, r27
     924:	11 f0       	breq	.+4      	; 0x92a <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     926:	cd 93       	st	X+, r28
     928:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	8c 01       	movw	r16, r24
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     93e:	0e 94 02 0a 	call	0x1404	; 0x1404 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     942:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <pxEnd>
     946:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <pxEnd+0x1>
     94a:	89 2b       	or	r24, r25
     94c:	11 f4       	brne	.+4      	; 0x952 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     94e:	0e 94 2b 04 	call	0x856	; 0x856 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
     952:	01 15       	cp	r16, r1
     954:	11 05       	cpc	r17, r1
     956:	49 f0       	breq	.+18     	; 0x96a <pvPortMalloc+0x3a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     958:	0b 3f       	cpi	r16, 0xFB	; 251
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	18 07       	cpc	r17, r24
     95e:	18 f4       	brcc	.+6      	; 0x966 <pvPortMalloc+0x36>
            {
                xWantedSize += xAdditionalRequiredSize;
     960:	0b 5f       	subi	r16, 0xFB	; 251
     962:	1f 4f       	sbci	r17, 0xFF	; 255
     964:	02 c0       	rjmp	.+4      	; 0x96a <pvPortMalloc+0x3a>
            }
            else
            {
                xWantedSize = 0;
     966:	00 e0       	ldi	r16, 0x00	; 0
     968:	10 e0       	ldi	r17, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     96a:	11 23       	and	r17, r17
     96c:	0c f4       	brge	.+2      	; 0x970 <pvPortMalloc+0x40>
     96e:	66 c0       	rjmp	.+204    	; 0xa3c <pvPortMalloc+0x10c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     970:	01 15       	cp	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	09 f4       	brne	.+2      	; 0x978 <pvPortMalloc+0x48>
     976:	65 c0       	rjmp	.+202    	; 0xa42 <pvPortMalloc+0x112>
     978:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <xFreeBytesRemaining>
     97c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <xFreeBytesRemaining+0x1>
     980:	80 17       	cp	r24, r16
     982:	91 07       	cpc	r25, r17
     984:	08 f4       	brcc	.+2      	; 0x988 <pvPortMalloc+0x58>
     986:	60 c0       	rjmp	.+192    	; 0xa48 <pvPortMalloc+0x118>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     988:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <xStart>
     98c:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     990:	ec e3       	ldi	r30, 0x3C	; 60
     992:	f1 e0       	ldi	r31, 0x01	; 1
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     994:	02 c0       	rjmp	.+4      	; 0x99a <pvPortMalloc+0x6a>
                {
                    pxPreviousBlock = pxBlock;
     996:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     998:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	9b 81       	ldd	r25, Y+3	; 0x03
     99e:	80 17       	cp	r24, r16
     9a0:	91 07       	cpc	r25, r17
     9a2:	20 f4       	brcc	.+8      	; 0x9ac <pvPortMalloc+0x7c>
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	a9 f7       	brne	.-22     	; 0x996 <pvPortMalloc+0x66>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     9ac:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <pxEnd>
     9b0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <pxEnd+0x1>
     9b4:	c8 17       	cp	r28, r24
     9b6:	d9 07       	cpc	r29, r25
     9b8:	09 f4       	brne	.+2      	; 0x9bc <pvPortMalloc+0x8c>
     9ba:	49 c0       	rjmp	.+146    	; 0xa4e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     9bc:	e0 80       	ld	r14, Z
     9be:	f1 80       	ldd	r15, Z+1	; 0x01
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	e8 0e       	add	r14, r24
     9c4:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     9c6:	88 81       	ld	r24, Y
     9c8:	99 81       	ldd	r25, Y+1	; 0x01
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     9ce:	2a 81       	ldd	r18, Y+2	; 0x02
     9d0:	3b 81       	ldd	r19, Y+3	; 0x03
     9d2:	20 1b       	sub	r18, r16
     9d4:	31 0b       	sbc	r19, r17
     9d6:	29 30       	cpi	r18, 0x09	; 9
     9d8:	31 05       	cpc	r19, r1
     9da:	50 f0       	brcs	.+20     	; 0x9f0 <pvPortMalloc+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     9dc:	ce 01       	movw	r24, r28
     9de:	80 0f       	add	r24, r16
     9e0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     9e2:	fc 01       	movw	r30, r24
     9e4:	33 83       	std	Z+3, r19	; 0x03
     9e6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     9e8:	1b 83       	std	Y+3, r17	; 0x03
     9ea:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     9ec:	0e 94 4e 04 	call	0x89c	; 0x89c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     9f0:	2a 81       	ldd	r18, Y+2	; 0x02
     9f2:	3b 81       	ldd	r19, Y+3	; 0x03
     9f4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <xFreeBytesRemaining>
     9f8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <xFreeBytesRemaining+0x1>
     9fc:	82 1b       	sub	r24, r18
     9fe:	93 0b       	sbc	r25, r19
     a00:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <xFreeBytesRemaining+0x1>
     a04:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a08:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <xMinimumEverFreeBytesRemaining>
     a0c:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <xMinimumEverFreeBytesRemaining+0x1>
     a10:	84 17       	cp	r24, r20
     a12:	95 07       	cpc	r25, r21
     a14:	20 f4       	brcc	.+8      	; 0xa1e <pvPortMalloc+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     a16:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <xMinimumEverFreeBytesRemaining+0x1>
     a1a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     a1e:	30 68       	ori	r19, 0x80	; 128
     a20:	3b 83       	std	Y+3, r19	; 0x03
     a22:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     a24:	19 82       	std	Y+1, r1	; 0x01
     a26:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     a28:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <xNumberOfSuccessfulAllocations>
     a2c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <xNumberOfSuccessfulAllocations+0x1>
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <xNumberOfSuccessfulAllocations+0x1>
     a36:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <xNumberOfSuccessfulAllocations>
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <pvPortMalloc+0x122>
void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
     a3c:	e1 2c       	mov	r14, r1
     a3e:	f1 2c       	mov	r15, r1
     a40:	08 c0       	rjmp	.+16     	; 0xa52 <pvPortMalloc+0x122>
     a42:	e1 2c       	mov	r14, r1
     a44:	f1 2c       	mov	r15, r1
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <pvPortMalloc+0x122>
     a48:	e1 2c       	mov	r14, r1
     a4a:	f1 2c       	mov	r15, r1
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <pvPortMalloc+0x122>
     a4e:	e1 2c       	mov	r14, r1
     a50:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     a52:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     a56:	c7 01       	movw	r24, r14
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	08 95       	ret

00000a66 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	49 f1       	breq	.+82     	; 0xac4 <vPortFree+0x5e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     a72:	ec 01       	movw	r28, r24
     a74:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     a76:	2a 81       	ldd	r18, Y+2	; 0x02
     a78:	3b 81       	ldd	r19, Y+3	; 0x03
     a7a:	33 23       	and	r19, r19
     a7c:	1c f5       	brge	.+70     	; 0xac4 <vPortFree+0x5e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     a7e:	48 81       	ld	r20, Y
     a80:	59 81       	ldd	r21, Y+1	; 0x01
     a82:	45 2b       	or	r20, r21
     a84:	f9 f4       	brne	.+62     	; 0xac4 <vPortFree+0x5e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     a86:	3f 77       	andi	r19, 0x7F	; 127
     a88:	3b 83       	std	Y+3, r19	; 0x03
     a8a:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
     a8c:	0e 94 02 0a 	call	0x1404	; 0x1404 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	9b 81       	ldd	r25, Y+3	; 0x03
     a94:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <xFreeBytesRemaining>
     a98:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <xFreeBytesRemaining+0x1>
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
     aa0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <xFreeBytesRemaining+0x1>
     aa4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 4e 04 	call	0x89c	; 0x89c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     aae:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <xNumberOfSuccessfulFrees>
     ab2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <xNumberOfSuccessfulFrees+0x1>
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <xNumberOfSuccessfulFrees+0x1>
     abc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     ac0:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	0f 92       	push	r0
     ad4:	fc 01       	movw	r30, r24
     ad6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ad8:	81 11       	cpse	r24, r1
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <prvIsQueueEmpty+0x12>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <prvIsQueueEmpty+0x14>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	08 95       	ret

00000ae8 <prvIsQueueFull>:
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	0f 92       	push	r0
     aee:	fc 01       	movw	r30, r24
     af0:	22 8d       	ldd	r18, Z+26	; 0x1a
     af2:	83 8d       	ldd	r24, Z+27	; 0x1b
     af4:	28 13       	cpse	r18, r24
     af6:	02 c0       	rjmp	.+4      	; 0xafc <prvIsQueueFull+0x14>
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	01 c0       	rjmp	.+2      	; 0xafe <prvIsQueueFull+0x16>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	08 95       	ret

00000b04 <prvCopyDataToQueue>:
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	ec 01       	movw	r28, r24
     b0e:	04 2f       	mov	r16, r20
     b10:	1a 8d       	ldd	r17, Y+26	; 0x1a
     b12:	4c 8d       	ldd	r20, Y+28	; 0x1c
     b14:	44 23       	and	r20, r20
     b16:	b9 f1       	breq	.+110    	; 0xb86 <prvCopyDataToQueue+0x82>
     b18:	01 11       	cpse	r16, r1
     b1a:	16 c0       	rjmp	.+44     	; 0xb48 <prvCopyDataToQueue+0x44>
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	9b 81       	ldd	r25, Y+3	; 0x03
     b22:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <memcpy>
     b26:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b28:	8a 81       	ldd	r24, Y+2	; 0x02
     b2a:	9b 81       	ldd	r25, Y+3	; 0x03
     b2c:	82 0f       	add	r24, r18
     b2e:	91 1d       	adc	r25, r1
     b30:	9b 83       	std	Y+3, r25	; 0x03
     b32:	8a 83       	std	Y+2, r24	; 0x02
     b34:	2c 81       	ldd	r18, Y+4	; 0x04
     b36:	3d 81       	ldd	r19, Y+5	; 0x05
     b38:	82 17       	cp	r24, r18
     b3a:	93 07       	cpc	r25, r19
     b3c:	20 f1       	brcs	.+72     	; 0xb86 <prvCopyDataToQueue+0x82>
     b3e:	88 81       	ld	r24, Y
     b40:	99 81       	ldd	r25, Y+1	; 0x01
     b42:	9b 83       	std	Y+3, r25	; 0x03
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	1f c0       	rjmp	.+62     	; 0xb86 <prvCopyDataToQueue+0x82>
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	8e 81       	ldd	r24, Y+6	; 0x06
     b4c:	9f 81       	ldd	r25, Y+7	; 0x07
     b4e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <memcpy>
     b52:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	91 95       	neg	r25
     b58:	81 95       	neg	r24
     b5a:	91 09       	sbc	r25, r1
     b5c:	2e 81       	ldd	r18, Y+6	; 0x06
     b5e:	3f 81       	ldd	r19, Y+7	; 0x07
     b60:	28 0f       	add	r18, r24
     b62:	39 1f       	adc	r19, r25
     b64:	3f 83       	std	Y+7, r19	; 0x07
     b66:	2e 83       	std	Y+6, r18	; 0x06
     b68:	48 81       	ld	r20, Y
     b6a:	59 81       	ldd	r21, Y+1	; 0x01
     b6c:	24 17       	cp	r18, r20
     b6e:	35 07       	cpc	r19, r21
     b70:	30 f4       	brcc	.+12     	; 0xb7e <prvCopyDataToQueue+0x7a>
     b72:	2c 81       	ldd	r18, Y+4	; 0x04
     b74:	3d 81       	ldd	r19, Y+5	; 0x05
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	9f 83       	std	Y+7, r25	; 0x07
     b7c:	8e 83       	std	Y+6, r24	; 0x06
     b7e:	02 30       	cpi	r16, 0x02	; 2
     b80:	11 f4       	brne	.+4      	; 0xb86 <prvCopyDataToQueue+0x82>
     b82:	11 11       	cpse	r17, r1
     b84:	11 50       	subi	r17, 0x01	; 1
     b86:	1f 5f       	subi	r17, 0xFF	; 255
     b88:	1a 8f       	std	Y+26, r17	; 0x1a
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <prvUnlockQueue>:
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	0f 92       	push	r0
     ba4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ba6:	0b c0       	rjmp	.+22     	; 0xbbe <prvUnlockQueue+0x28>
     ba8:	89 89       	ldd	r24, Y+17	; 0x11
     baa:	88 23       	and	r24, r24
     bac:	51 f0       	breq	.+20     	; 0xbc2 <prvUnlockQueue+0x2c>
     bae:	ce 01       	movw	r24, r28
     bb0:	41 96       	adiw	r24, 0x11	; 17
     bb2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xTaskRemoveFromEventList>
     bb6:	81 11       	cpse	r24, r1
     bb8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vTaskMissedYield>
     bbc:	11 50       	subi	r17, 0x01	; 1
     bbe:	11 16       	cp	r1, r17
     bc0:	9c f3       	brlt	.-26     	; 0xba8 <prvUnlockQueue+0x12>
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	8e 8f       	std	Y+30, r24	; 0x1e
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	0f 92       	push	r0
     bd0:	1d 8d       	ldd	r17, Y+29	; 0x1d
     bd2:	0b c0       	rjmp	.+22     	; 0xbea <prvUnlockQueue+0x54>
     bd4:	88 85       	ldd	r24, Y+8	; 0x08
     bd6:	88 23       	and	r24, r24
     bd8:	51 f0       	breq	.+20     	; 0xbee <prvUnlockQueue+0x58>
     bda:	ce 01       	movw	r24, r28
     bdc:	08 96       	adiw	r24, 0x08	; 8
     bde:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xTaskRemoveFromEventList>
     be2:	81 11       	cpse	r24, r1
     be4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vTaskMissedYield>
     be8:	11 50       	subi	r17, 0x01	; 1
     bea:	11 16       	cp	r1, r17
     bec:	9c f3       	brlt	.-26     	; 0xbd4 <prvUnlockQueue+0x3e>
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	8d 8f       	std	Y+29, r24	; 0x1d
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	08 95       	ret

00000bfe <xQueueGenericReset>:
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	fc 01       	movw	r30, r24
     c08:	36 2f       	mov	r19, r22
     c0a:	89 2b       	or	r24, r25
     c0c:	09 f4       	brne	.+2      	; 0xc10 <xQueueGenericReset+0x12>
     c0e:	4d c0       	rjmp	.+154    	; 0xcaa <xQueueGenericReset+0xac>
     c10:	23 8d       	ldd	r18, Z+27	; 0x1b
     c12:	22 23       	and	r18, r18
     c14:	09 f4       	brne	.+2      	; 0xc18 <xQueueGenericReset+0x1a>
     c16:	4b c0       	rjmp	.+150    	; 0xcae <xQueueGenericReset+0xb0>
     c18:	02 2f       	mov	r16, r18
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	9f ef       	ldi	r25, 0xFF	; 255
     c20:	b8 01       	movw	r22, r16
     c22:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__udivmodhi4>
     c26:	44 8d       	ldd	r20, Z+28	; 0x1c
     c28:	84 2f       	mov	r24, r20
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	68 17       	cp	r22, r24
     c2e:	79 07       	cpc	r23, r25
     c30:	08 f4       	brcc	.+2      	; 0xc34 <xQueueGenericReset+0x36>
     c32:	3f c0       	rjmp	.+126    	; 0xcb2 <xQueueGenericReset+0xb4>
     c34:	ef 01       	movw	r28, r30
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	0f 92       	push	r0
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	fb 01       	movw	r30, r22
     c42:	24 9f       	mul	r18, r20
     c44:	e0 0d       	add	r30, r0
     c46:	f1 1d       	adc	r31, r1
     c48:	11 24       	eor	r1, r1
     c4a:	fd 83       	std	Y+5, r31	; 0x05
     c4c:	ec 83       	std	Y+4, r30	; 0x04
     c4e:	1a 8e       	std	Y+26, r1	; 0x1a
     c50:	7b 83       	std	Y+3, r23	; 0x03
     c52:	6a 83       	std	Y+2, r22	; 0x02
     c54:	01 50       	subi	r16, 0x01	; 1
     c56:	11 09       	sbc	r17, r1
     c58:	80 9f       	mul	r24, r16
     c5a:	a0 01       	movw	r20, r0
     c5c:	81 9f       	mul	r24, r17
     c5e:	50 0d       	add	r21, r0
     c60:	90 9f       	mul	r25, r16
     c62:	50 0d       	add	r21, r0
     c64:	11 24       	eor	r1, r1
     c66:	cb 01       	movw	r24, r22
     c68:	84 0f       	add	r24, r20
     c6a:	95 1f       	adc	r25, r21
     c6c:	9f 83       	std	Y+7, r25	; 0x07
     c6e:	8e 83       	std	Y+6, r24	; 0x06
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	8d 8f       	std	Y+29, r24	; 0x1d
     c74:	8e 8f       	std	Y+30, r24	; 0x1e
     c76:	31 11       	cpse	r19, r1
     c78:	0c c0       	rjmp	.+24     	; 0xc92 <xQueueGenericReset+0x94>
     c7a:	88 85       	ldd	r24, Y+8	; 0x08
     c7c:	88 23       	and	r24, r24
     c7e:	89 f0       	breq	.+34     	; 0xca2 <xQueueGenericReset+0xa4>
     c80:	ce 01       	movw	r24, r28
     c82:	08 96       	adiw	r24, 0x08	; 8
     c84:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xTaskRemoveFromEventList>
     c88:	88 23       	and	r24, r24
     c8a:	59 f0       	breq	.+22     	; 0xca2 <xQueueGenericReset+0xa4>
     c8c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <xQueueGenericReset+0xa4>
     c92:	ce 01       	movw	r24, r28
     c94:	08 96       	adiw	r24, 0x08	; 8
     c96:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
     c9a:	ce 01       	movw	r24, r28
     c9c:	41 96       	adiw	r24, 0x11	; 17
     c9e:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <xQueueGenericReset+0xb6>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <xQueueGenericReset+0xb6>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <xQueueGenericReset+0xb6>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <prvInitialiseNewQueue>:
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	f8 01       	movw	r30, r16
     cc4:	61 11       	cpse	r22, r1
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <prvInitialiseNewQueue+0x10>
     cc8:	11 83       	std	Z+1, r17	; 0x01
     cca:	00 83       	st	Z, r16
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <prvInitialiseNewQueue+0x14>
     cce:	51 83       	std	Z+1, r21	; 0x01
     cd0:	40 83       	st	Z, r20
     cd2:	83 8f       	std	Z+27, r24	; 0x1b
     cd4:	64 8f       	std	Z+28, r22	; 0x1c
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	cf 01       	movw	r24, r30
     cda:	0e 94 ff 05 	call	0xbfe	; 0xbfe <xQueueGenericReset>
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <xQueueGenericCreate>:
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	38 2f       	mov	r19, r24
     cf4:	e6 2f       	mov	r30, r22
     cf6:	88 23       	and	r24, r24
     cf8:	29 f1       	breq	.+74     	; 0xd44 <xQueueGenericCreate+0x60>
     cfa:	68 2f       	mov	r22, r24
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__udivmodhi4>
     d06:	8e 2f       	mov	r24, r30
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	68 17       	cp	r22, r24
     d0c:	79 07       	cpc	r23, r25
     d0e:	e8 f0       	brcs	.+58     	; 0xd4a <xQueueGenericCreate+0x66>
     d10:	3e 9f       	mul	r19, r30
     d12:	c0 01       	movw	r24, r0
     d14:	11 24       	eor	r1, r1
     d16:	81 3e       	cpi	r24, 0xE1	; 225
     d18:	2f ef       	ldi	r18, 0xFF	; 255
     d1a:	92 07       	cpc	r25, r18
     d1c:	c8 f4       	brcc	.+50     	; 0xd50 <xQueueGenericCreate+0x6c>
     d1e:	d4 2e       	mov	r13, r20
     d20:	de 2f       	mov	r29, r30
     d22:	c3 2f       	mov	r28, r19
     d24:	4f 96       	adiw	r24, 0x1f	; 31
     d26:	0e 94 98 04 	call	0x930	; 0x930 <pvPortMalloc>
     d2a:	7c 01       	movw	r14, r24
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	91 f0       	breq	.+36     	; 0xd54 <xQueueGenericCreate+0x70>
     d30:	8c 01       	movw	r16, r24
     d32:	2d 2d       	mov	r18, r13
     d34:	ac 01       	movw	r20, r24
     d36:	41 5e       	subi	r20, 0xE1	; 225
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	6d 2f       	mov	r22, r29
     d3c:	8c 2f       	mov	r24, r28
     d3e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <prvInitialiseNewQueue>
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <xQueueGenericCreate+0x70>
     d44:	e1 2c       	mov	r14, r1
     d46:	f1 2c       	mov	r15, r1
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <xQueueGenericCreate+0x70>
     d4a:	e1 2c       	mov	r14, r1
     d4c:	f1 2c       	mov	r15, r1
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <xQueueGenericCreate+0x70>
     d50:	e1 2c       	mov	r14, r1
     d52:	f1 2c       	mov	r15, r1
     d54:	c7 01       	movw	r24, r14
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	08 95       	ret

00000d66 <xQueueGenericSend>:
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	00 d0       	rcall	.+0      	; 0xd78 <xQueueGenericSend+0x12>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <xQueueGenericSend+0x14>
     d7a:	1f 92       	push	r1
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	8c 01       	movw	r16, r24
     d82:	7b 01       	movw	r14, r22
     d84:	5d 83       	std	Y+5, r21	; 0x05
     d86:	4c 83       	std	Y+4, r20	; 0x04
     d88:	c2 2e       	mov	r12, r18
     d8a:	d1 2c       	mov	r13, r1
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	0f 92       	push	r0
     d92:	f8 01       	movw	r30, r16
     d94:	92 8d       	ldd	r25, Z+26	; 0x1a
     d96:	83 8d       	ldd	r24, Z+27	; 0x1b
     d98:	98 17       	cp	r25, r24
     d9a:	18 f0       	brcs	.+6      	; 0xda2 <xQueueGenericSend+0x3c>
     d9c:	f2 e0       	ldi	r31, 0x02	; 2
     d9e:	cf 12       	cpse	r12, r31
     da0:	19 c0       	rjmp	.+50     	; 0xdd4 <xQueueGenericSend+0x6e>
     da2:	4c 2d       	mov	r20, r12
     da4:	b7 01       	movw	r22, r14
     da6:	c8 01       	movw	r24, r16
     da8:	0e 94 82 05 	call	0xb04	; 0xb04 <prvCopyDataToQueue>
     dac:	f8 01       	movw	r30, r16
     dae:	91 89       	ldd	r25, Z+17	; 0x11
     db0:	99 23       	and	r25, r25
     db2:	49 f0       	breq	.+18     	; 0xdc6 <xQueueGenericSend+0x60>
     db4:	c8 01       	movw	r24, r16
     db6:	41 96       	adiw	r24, 0x11	; 17
     db8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xTaskRemoveFromEventList>
     dbc:	88 23       	and	r24, r24
     dbe:	31 f0       	breq	.+12     	; 0xdcc <xQueueGenericSend+0x66>
     dc0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <xQueueGenericSend+0x66>
     dc6:	81 11       	cpse	r24, r1
     dc8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	4d c0       	rjmp	.+154    	; 0xe6e <xQueueGenericSend+0x108>
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	89 2b       	or	r24, r25
     dda:	21 f4       	brne	.+8      	; 0xde4 <xQueueGenericSend+0x7e>
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	45 c0       	rjmp	.+138    	; 0xe6e <xQueueGenericSend+0x108>
     de4:	d1 10       	cpse	r13, r1
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <xQueueGenericSend+0x8e>
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskInternalSetTimeOutState>
     df0:	dd 24       	eor	r13, r13
     df2:	d3 94       	inc	r13
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0e 94 02 0a 	call	0x1404	; 0x1404 <vTaskSuspendAll>
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	0f 92       	push	r0
     e02:	f8 01       	movw	r30, r16
     e04:	85 8d       	ldd	r24, Z+29	; 0x1d
     e06:	8f 3f       	cpi	r24, 0xFF	; 255
     e08:	09 f4       	brne	.+2      	; 0xe0c <xQueueGenericSend+0xa6>
     e0a:	15 8e       	std	Z+29, r1	; 0x1d
     e0c:	f8 01       	movw	r30, r16
     e0e:	86 8d       	ldd	r24, Z+30	; 0x1e
     e10:	8f 3f       	cpi	r24, 0xFF	; 255
     e12:	09 f4       	brne	.+2      	; 0xe16 <xQueueGenericSend+0xb0>
     e14:	16 8e       	std	Z+30, r1	; 0x1e
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	be 01       	movw	r22, r28
     e1c:	6c 5f       	subi	r22, 0xFC	; 252
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	ce 01       	movw	r24, r28
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <xTaskCheckForTimeOut>
     e28:	81 11       	cpse	r24, r1
     e2a:	1b c0       	rjmp	.+54     	; 0xe62 <xQueueGenericSend+0xfc>
     e2c:	c8 01       	movw	r24, r16
     e2e:	0e 94 74 05 	call	0xae8	; 0xae8 <prvIsQueueFull>
     e32:	88 23       	and	r24, r24
     e34:	81 f0       	breq	.+32     	; 0xe56 <xQueueGenericSend+0xf0>
     e36:	6c 81       	ldd	r22, Y+4	; 0x04
     e38:	7d 81       	ldd	r23, Y+5	; 0x05
     e3a:	c8 01       	movw	r24, r16
     e3c:	08 96       	adiw	r24, 0x08	; 8
     e3e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vTaskPlaceOnEventList>
     e42:	c8 01       	movw	r24, r16
     e44:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvUnlockQueue>
     e48:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
     e4c:	81 11       	cpse	r24, r1
     e4e:	9e cf       	rjmp	.-196    	; 0xd8c <xQueueGenericSend+0x26>
     e50:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
     e54:	9b cf       	rjmp	.-202    	; 0xd8c <xQueueGenericSend+0x26>
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvUnlockQueue>
     e5c:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
     e60:	95 cf       	rjmp	.-214    	; 0xd8c <xQueueGenericSend+0x26>
     e62:	c8 01       	movw	r24, r16
     e64:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvUnlockQueue>
     e68:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	08 95       	ret

00000e8a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	00 d0       	rcall	.+0      	; 0xe96 <xQueueSemaphoreTake+0xc>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <xQueueSemaphoreTake+0xe>
     e98:	1f 92       	push	r1
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	8c 01       	movw	r16, r24
     ea0:	7d 83       	std	Y+5, r23	; 0x05
     ea2:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     ea4:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     eac:	f8 01       	movw	r30, r16
     eae:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     eb0:	88 23       	and	r24, r24
     eb2:	81 f0       	breq	.+32     	; 0xed4 <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     eb4:	81 50       	subi	r24, 0x01	; 1
     eb6:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     eb8:	80 85       	ldd	r24, Z+8	; 0x08
     eba:	88 23       	and	r24, r24
     ebc:	39 f0       	breq	.+14     	; 0xecc <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     ebe:	c8 01       	movw	r24, r16
     ec0:	08 96       	adiw	r24, 0x08	; 8
     ec2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xTaskRemoveFromEventList>
     ec6:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     ec8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	53 c0       	rjmp	.+166    	; 0xf7a <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	89 2b       	or	r24, r25
     eda:	21 f4       	brne	.+8      	; 0xee4 <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	4b c0       	rjmp	.+150    	; 0xf7a <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
     ee4:	f1 10       	cpse	r15, r1
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     ef0:	ff 24       	eor	r15, r15
     ef2:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     ef8:	0e 94 02 0a 	call	0x1404	; 0x1404 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	0f 92       	push	r0
     f02:	f8 01       	movw	r30, r16
     f04:	85 8d       	ldd	r24, Z+29	; 0x1d
     f06:	8f 3f       	cpi	r24, 0xFF	; 255
     f08:	09 f4       	brne	.+2      	; 0xf0c <xQueueSemaphoreTake+0x82>
     f0a:	15 8e       	std	Z+29, r1	; 0x1d
     f0c:	f8 01       	movw	r30, r16
     f0e:	86 8d       	ldd	r24, Z+30	; 0x1e
     f10:	8f 3f       	cpi	r24, 0xFF	; 255
     f12:	09 f4       	brne	.+2      	; 0xf16 <xQueueSemaphoreTake+0x8c>
     f14:	16 8e       	std	Z+30, r1	; 0x1e
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f1a:	be 01       	movw	r22, r28
     f1c:	6c 5f       	subi	r22, 0xFC	; 252
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <xTaskCheckForTimeOut>
     f28:	81 11       	cpse	r24, r1
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 67 05 	call	0xace	; 0xace <prvIsQueueEmpty>
     f32:	88 23       	and	r24, r24
     f34:	81 f0       	breq	.+32     	; 0xf56 <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     f36:	6c 81       	ldd	r22, Y+4	; 0x04
     f38:	7d 81       	ldd	r23, Y+5	; 0x05
     f3a:	c8 01       	movw	r24, r16
     f3c:	41 96       	adiw	r24, 0x11	; 17
     f3e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     f42:	c8 01       	movw	r24, r16
     f44:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     f48:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
     f4c:	81 11       	cpse	r24, r1
     f4e:	ab cf       	rjmp	.-170    	; 0xea6 <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
     f50:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
     f54:	a8 cf       	rjmp	.-176    	; 0xea6 <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     f56:	c8 01       	movw	r24, r16
     f58:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     f5c:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
     f60:	a2 cf       	rjmp	.-188    	; 0xea6 <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     f62:	c8 01       	movw	r24, r16
     f64:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     f68:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f6c:	c8 01       	movw	r24, r16
     f6e:	0e 94 67 05 	call	0xace	; 0xace <prvIsQueueEmpty>
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <xQueueSemaphoreTake+0xee>
     f76:	97 cf       	rjmp	.-210    	; 0xea6 <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     f78:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	08 95       	ret

00000f90 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     f90:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <pxDelayedTaskList>
     f94:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <pxDelayedTaskList+0x1>
     f98:	80 81       	ld	r24, Z
     f9a:	81 11       	cpse	r24, r1
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <prvResetNextTaskUnblockTime+0x1c>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <xNextTaskUnblockTime+0x1>
     fa6:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <xNextTaskUnblockTime>
     faa:	08 95       	ret
     fac:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <pxDelayedTaskList>
     fb0:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <pxDelayedTaskList+0x1>
     fb4:	05 80       	ldd	r0, Z+5	; 0x05
     fb6:	f6 81       	ldd	r31, Z+6	; 0x06
     fb8:	e0 2d       	mov	r30, r0
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <xNextTaskUnblockTime+0x1>
     fc2:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <xNextTaskUnblockTime>
     fc6:	08 95       	ret

00000fc8 <prvDeleteTCB>:
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	0e 94 33 05 	call	0xa66	; 0xa66 <vPortFree>
     fd6:	ce 01       	movw	r24, r28
     fd8:	0e 94 33 05 	call	0xa66	; 0xa66 <vPortFree>
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <prvInitialiseNewTask>:
     fe2:	6f 92       	push	r6
     fe4:	7f 92       	push	r7
     fe6:	8f 92       	push	r8
     fe8:	9f 92       	push	r9
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	4c 01       	movw	r8, r24
    1002:	f5 01       	movw	r30, r10
    1004:	87 89       	ldd	r24, Z+23	; 0x17
    1006:	90 8d       	ldd	r25, Z+24	; 0x18
    1008:	21 50       	subi	r18, 0x01	; 1
    100a:	31 09       	sbc	r19, r1
    100c:	3c 01       	movw	r6, r24
    100e:	62 0e       	add	r6, r18
    1010:	73 1e       	adc	r7, r19
    1012:	61 15       	cp	r22, r1
    1014:	71 05       	cpc	r23, r1
    1016:	89 f4       	brne	.+34     	; 0x103a <prvInitialiseNewTask+0x58>
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <prvInitialiseNewTask+0x62>
    101a:	82 2f       	mov	r24, r18
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fb 01       	movw	r30, r22
    1020:	e8 0f       	add	r30, r24
    1022:	f9 1f       	adc	r31, r25
    1024:	30 81       	ld	r19, Z
    1026:	d5 01       	movw	r26, r10
    1028:	a8 0f       	add	r26, r24
    102a:	b9 1f       	adc	r27, r25
    102c:	59 96       	adiw	r26, 0x19	; 25
    102e:	3c 93       	st	X, r19
    1030:	80 81       	ld	r24, Z
    1032:	88 23       	and	r24, r24
    1034:	29 f0       	breq	.+10     	; 0x1040 <prvInitialiseNewTask+0x5e>
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	01 c0       	rjmp	.+2      	; 0x103c <prvInitialiseNewTask+0x5a>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	28 30       	cpi	r18, 0x08	; 8
    103e:	68 f3       	brcs	.-38     	; 0x101a <prvInitialiseNewTask+0x38>
    1040:	f5 01       	movw	r30, r10
    1042:	10 a2       	std	Z+32, r1	; 0x20
    1044:	f5 e0       	ldi	r31, 0x05	; 5
    1046:	fe 15       	cp	r31, r14
    1048:	20 f4       	brcc	.+8      	; 0x1052 <prvInitialiseNewTask+0x70>
    104a:	0f 2e       	mov	r0, r31
    104c:	f5 e0       	ldi	r31, 0x05	; 5
    104e:	ef 2e       	mov	r14, r31
    1050:	f0 2d       	mov	r31, r0
    1052:	f5 01       	movw	r30, r10
    1054:	e6 8a       	std	Z+22, r14	; 0x16
    1056:	c5 01       	movw	r24, r10
    1058:	02 96       	adiw	r24, 0x02	; 2
    105a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInitialiseItem>
    105e:	c5 01       	movw	r24, r10
    1060:	0c 96       	adiw	r24, 0x0c	; 12
    1062:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInitialiseItem>
    1066:	f5 01       	movw	r30, r10
    1068:	b1 86       	std	Z+9, r11	; 0x09
    106a:	a0 86       	std	Z+8, r10	; 0x08
    106c:	86 e0       	ldi	r24, 0x06	; 6
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	8e 19       	sub	r24, r14
    1072:	91 09       	sbc	r25, r1
    1074:	95 87       	std	Z+13, r25	; 0x0d
    1076:	84 87       	std	Z+12, r24	; 0x0c
    1078:	b3 8a       	std	Z+19, r11	; 0x13
    107a:	a2 8a       	std	Z+18, r10	; 0x12
    107c:	a8 01       	movw	r20, r16
    107e:	b4 01       	movw	r22, r8
    1080:	c3 01       	movw	r24, r6
    1082:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <pxPortInitialiseStack>
    1086:	f5 01       	movw	r30, r10
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
    108c:	c1 14       	cp	r12, r1
    108e:	d1 04       	cpc	r13, r1
    1090:	19 f0       	breq	.+6      	; 0x1098 <prvInitialiseNewTask+0xb6>
    1092:	f6 01       	movw	r30, r12
    1094:	b1 82       	std	Z+1, r11	; 0x01
    1096:	a0 82       	st	Z, r10
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	bf 90       	pop	r11
    10a8:	af 90       	pop	r10
    10aa:	9f 90       	pop	r9
    10ac:	8f 90       	pop	r8
    10ae:	7f 90       	pop	r7
    10b0:	6f 90       	pop	r6
    10b2:	08 95       	ret

000010b4 <prvInitialiseTaskLists>:
    10b4:	cf 93       	push	r28
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	10 c0       	rjmp	.+32     	; 0x10da <prvInitialiseTaskLists+0x26>
    10ba:	8c 2f       	mov	r24, r28
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 01       	movw	r18, r24
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	8c 5a       	subi	r24, 0xAC	; 172
    10d2:	98 4f       	sbci	r25, 0xF8	; 248
    10d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
    10d8:	cf 5f       	subi	r28, 0xFF	; 255
    10da:	c6 30       	cpi	r28, 0x06	; 6
    10dc:	70 f3       	brcs	.-36     	; 0x10ba <prvInitialiseTaskLists+0x6>
    10de:	8b e4       	ldi	r24, 0x4B	; 75
    10e0:	97 e0       	ldi	r25, 0x07	; 7
    10e2:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
    10e6:	82 e4       	ldi	r24, 0x42	; 66
    10e8:	97 e0       	ldi	r25, 0x07	; 7
    10ea:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
    10ee:	85 e3       	ldi	r24, 0x35	; 53
    10f0:	97 e0       	ldi	r25, 0x07	; 7
    10f2:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
    10f6:	8c e2       	ldi	r24, 0x2C	; 44
    10f8:	97 e0       	ldi	r25, 0x07	; 7
    10fa:	0e 94 65 02 	call	0x4ca	; 0x4ca <vListInitialise>
    10fe:	8b e4       	ldi	r24, 0x4B	; 75
    1100:	97 e0       	ldi	r25, 0x07	; 7
    1102:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <pxDelayedTaskList+0x1>
    1106:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <pxDelayedTaskList>
    110a:	82 e4       	ldi	r24, 0x42	; 66
    110c:	97 e0       	ldi	r25, 0x07	; 7
    110e:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <pxOverflowDelayedTaskList+0x1>
    1112:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <pxOverflowDelayedTaskList>
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <prvAddNewTaskToReadyList>:
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	0f 92       	push	r0
    1126:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    112a:	8f 5f       	subi	r24, 0xFF	; 255
    112c:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxCurrentNumberOfTasks>
    1130:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxCurrentTCB>
    1134:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    1138:	89 2b       	or	r24, r25
    113a:	59 f4       	brne	.+22     	; 0x1152 <prvAddNewTaskToReadyList+0x38>
    113c:	d0 93 8b 07 	sts	0x078B, r29	; 0x80078b <pxCurrentTCB+0x1>
    1140:	c0 93 8a 07 	sts	0x078A, r28	; 0x80078a <pxCurrentTCB>
    1144:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	99 f4       	brne	.+38     	; 0x1172 <prvAddNewTaskToReadyList+0x58>
    114c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <prvInitialiseTaskLists>
    1150:	10 c0       	rjmp	.+32     	; 0x1172 <prvAddNewTaskToReadyList+0x58>
    1152:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <xSchedulerRunning>
    1156:	81 11       	cpse	r24, r1
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <prvAddNewTaskToReadyList+0x58>
    115a:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
    115e:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    1162:	96 89       	ldd	r25, Z+22	; 0x16
    1164:	8e 89       	ldd	r24, Y+22	; 0x16
    1166:	89 17       	cp	r24, r25
    1168:	20 f0       	brcs	.+8      	; 0x1172 <prvAddNewTaskToReadyList+0x58>
    116a:	d0 93 8b 07 	sts	0x078B, r29	; 0x80078b <pxCurrentTCB+0x1>
    116e:	c0 93 8a 07 	sts	0x078A, r28	; 0x80078a <pxCurrentTCB>
    1172:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <uxTaskNumber>
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <uxTaskNumber>
    117c:	8e 89       	ldd	r24, Y+22	; 0x16
    117e:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <uxTopReadyPriority>
    1182:	98 17       	cp	r25, r24
    1184:	10 f4       	brcc	.+4      	; 0x118a <prvAddNewTaskToReadyList+0x70>
    1186:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxTopReadyPriority>
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	fc 01       	movw	r30, r24
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	8e 0f       	add	r24, r30
    119c:	9f 1f       	adc	r25, r31
    119e:	fc 01       	movw	r30, r24
    11a0:	ec 5a       	subi	r30, 0xAC	; 172
    11a2:	f8 4f       	sbci	r31, 0xF8	; 248
    11a4:	01 80       	ldd	r0, Z+1	; 0x01
    11a6:	f2 81       	ldd	r31, Z+2	; 0x02
    11a8:	e0 2d       	mov	r30, r0
    11aa:	fd 83       	std	Y+5, r31	; 0x05
    11ac:	ec 83       	std	Y+4, r30	; 0x04
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	9f 83       	std	Y+7, r25	; 0x07
    11b4:	8e 83       	std	Y+6, r24	; 0x06
    11b6:	a4 81       	ldd	r26, Z+4	; 0x04
    11b8:	b5 81       	ldd	r27, Z+5	; 0x05
    11ba:	ce 01       	movw	r24, r28
    11bc:	02 96       	adiw	r24, 0x02	; 2
    11be:	13 96       	adiw	r26, 0x03	; 3
    11c0:	9c 93       	st	X, r25
    11c2:	8e 93       	st	-X, r24
    11c4:	12 97       	sbiw	r26, 0x02	; 2
    11c6:	95 83       	std	Z+5, r25	; 0x05
    11c8:	84 83       	std	Z+4, r24	; 0x04
    11ca:	ee 89       	ldd	r30, Y+22	; 0x16
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	cf 01       	movw	r24, r30
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	e8 0f       	add	r30, r24
    11de:	f9 1f       	adc	r31, r25
    11e0:	ec 5a       	subi	r30, 0xAC	; 172
    11e2:	f8 4f       	sbci	r31, 0xF8	; 248
    11e4:	fb 87       	std	Y+11, r31	; 0x0b
    11e6:	ea 87       	std	Y+10, r30	; 0x0a
    11e8:	80 81       	ld	r24, Z
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	80 83       	st	Z, r24
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <xSchedulerRunning>
    11f6:	88 23       	and	r24, r24
    11f8:	51 f0       	breq	.+20     	; 0x120e <prvAddNewTaskToReadyList+0xf4>
    11fa:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
    11fe:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    1202:	96 89       	ldd	r25, Z+22	; 0x16
    1204:	8e 89       	ldd	r24, Y+22	; 0x16
    1206:	98 17       	cp	r25, r24
    1208:	10 f4       	brcc	.+4      	; 0x120e <prvAddNewTaskToReadyList+0xf4>
    120a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <prvCheckTasksWaitingTermination>:
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	1c c0       	rjmp	.+56     	; 0x1252 <prvCheckTasksWaitingTermination+0x3e>
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	0f 92       	push	r0
    1220:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <xTasksWaitingTermination+0x5>
    1224:	f0 91 32 07 	lds	r31, 0x0732	; 0x800732 <xTasksWaitingTermination+0x6>
    1228:	c6 81       	ldd	r28, Z+6	; 0x06
    122a:	d7 81       	ldd	r29, Z+7	; 0x07
    122c:	ce 01       	movw	r24, r28
    122e:	02 96       	adiw	r24, 0x02	; 2
    1230:	0e 94 a8 02 	call	0x550	; 0x550 <uxListRemove>
    1234:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxCurrentNumberOfTasks>
    123e:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <uxDeletedTasksWaitingCleanUp>
    1242:	81 50       	subi	r24, 0x01	; 1
    1244:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <uxDeletedTasksWaitingCleanUp>
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	ce 01       	movw	r24, r28
    124e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <prvDeleteTCB>
    1252:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <uxDeletedTasksWaitingCleanUp>
    1256:	81 11       	cpse	r24, r1
    1258:	e0 cf       	rjmp	.-64     	; 0x121a <prvCheckTasksWaitingTermination+0x6>
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <prvIdleTask>:
    1260:	0e 94 0a 09 	call	0x1214	; 0x1214 <prvCheckTasksWaitingTermination>
    1264:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <pxReadyTasksLists>
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	d0 f3       	brcs	.-12     	; 0x1260 <prvIdleTask>
    126c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    1270:	f7 cf       	rjmp	.-18     	; 0x1260 <prvIdleTask>

00001272 <prvAddCurrentTaskToDelayedList>:
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
    127c:	00 91 28 07 	lds	r16, 0x0728	; 0x800728 <xTickCount>
    1280:	10 91 29 07 	lds	r17, 0x0729	; 0x800729 <xTickCount+0x1>
    1284:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxCurrentTCB>
    1288:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    128c:	02 96       	adiw	r24, 0x02	; 2
    128e:	0e 94 a8 02 	call	0x550	; 0x550 <uxListRemove>
    1292:	c0 0f       	add	r28, r16
    1294:	d1 1f       	adc	r29, r17
    1296:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
    129a:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    129e:	d3 83       	std	Z+3, r29	; 0x03
    12a0:	c2 83       	std	Z+2, r28	; 0x02
    12a2:	c0 17       	cp	r28, r16
    12a4:	d1 07       	cpc	r29, r17
    12a6:	68 f4       	brcc	.+26     	; 0x12c2 <prvAddCurrentTaskToDelayedList+0x50>
    12a8:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <pxCurrentTCB>
    12ac:	70 91 8b 07 	lds	r23, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    12b0:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <pxOverflowDelayedTaskList>
    12b4:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <pxOverflowDelayedTaskList+0x1>
    12b8:	6e 5f       	subi	r22, 0xFE	; 254
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    12c0:	17 c0       	rjmp	.+46     	; 0x12f0 <prvAddCurrentTaskToDelayedList+0x7e>
    12c2:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <pxCurrentTCB>
    12c6:	70 91 8b 07 	lds	r23, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    12ca:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <pxDelayedTaskList>
    12ce:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <pxDelayedTaskList+0x1>
    12d2:	6e 5f       	subi	r22, 0xFE	; 254
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    12da:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <xNextTaskUnblockTime>
    12de:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xNextTaskUnblockTime+0x1>
    12e2:	c8 17       	cp	r28, r24
    12e4:	d9 07       	cpc	r29, r25
    12e6:	20 f4       	brcc	.+8      	; 0x12f0 <prvAddCurrentTaskToDelayedList+0x7e>
    12e8:	d0 93 20 07 	sts	0x0720, r29	; 0x800720 <xNextTaskUnblockTime+0x1>
    12ec:	c0 93 1f 07 	sts	0x071F, r28	; 0x80071f <xNextTaskUnblockTime>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <xTaskCreate>:
    12fa:	2f 92       	push	r2
    12fc:	3f 92       	push	r3
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	3c 01       	movw	r6, r24
    1320:	1b 01       	movw	r2, r22
    1322:	5a 01       	movw	r10, r20
    1324:	29 01       	movw	r4, r18
    1326:	ca 01       	movw	r24, r20
    1328:	0e 94 98 04 	call	0x930	; 0x930 <pvPortMalloc>
    132c:	6c 01       	movw	r12, r24
    132e:	89 2b       	or	r24, r25
    1330:	99 f0       	breq	.+38     	; 0x1358 <xTaskCreate+0x5e>
    1332:	86 e2       	ldi	r24, 0x26	; 38
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 98 04 	call	0x930	; 0x930 <pvPortMalloc>
    133a:	ec 01       	movw	r28, r24
    133c:	89 2b       	or	r24, r25
    133e:	41 f0       	breq	.+16     	; 0x1350 <xTaskCreate+0x56>
    1340:	86 e2       	ldi	r24, 0x26	; 38
    1342:	fe 01       	movw	r30, r28
    1344:	11 92       	st	Z+, r1
    1346:	8a 95       	dec	r24
    1348:	e9 f7       	brne	.-6      	; 0x1344 <xTaskCreate+0x4a>
    134a:	d8 8e       	std	Y+24, r13	; 0x18
    134c:	cf 8a       	std	Y+23, r12	; 0x17
    134e:	06 c0       	rjmp	.+12     	; 0x135c <xTaskCreate+0x62>
    1350:	c6 01       	movw	r24, r12
    1352:	0e 94 33 05 	call	0xa66	; 0xa66 <vPortFree>
    1356:	02 c0       	rjmp	.+4      	; 0x135c <xTaskCreate+0x62>
    1358:	c0 e0       	ldi	r28, 0x00	; 0
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	20 97       	sbiw	r28, 0x00	; 0
    135e:	91 f0       	breq	.+36     	; 0x1384 <xTaskCreate+0x8a>
    1360:	95 01       	movw	r18, r10
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	81 2c       	mov	r8, r1
    1368:	91 2c       	mov	r9, r1
    136a:	5e 01       	movw	r10, r28
    136c:	67 01       	movw	r12, r14
    136e:	e0 2e       	mov	r14, r16
    1370:	82 01       	movw	r16, r4
    1372:	b1 01       	movw	r22, r2
    1374:	c3 01       	movw	r24, r6
    1376:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <prvInitialiseNewTask>
    137a:	ce 01       	movw	r24, r28
    137c:	0e 94 8d 08 	call	0x111a	; 0x111a <prvAddNewTaskToReadyList>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <xTaskCreate+0x8c>
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	3f 90       	pop	r3
    13a8:	2f 90       	pop	r2
    13aa:	08 95       	ret

000013ac <vTaskStartScheduler>:
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	0f 2e       	mov	r0, r31
    13b4:	fd e1       	ldi	r31, 0x1D	; 29
    13b6:	ef 2e       	mov	r14, r31
    13b8:	f7 e0       	ldi	r31, 0x07	; 7
    13ba:	ff 2e       	mov	r15, r31
    13bc:	f0 2d       	mov	r31, r0
    13be:	00 e0       	ldi	r16, 0x00	; 0
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	45 e5       	ldi	r20, 0x55	; 85
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	64 e2       	ldi	r22, 0x24	; 36
    13ca:	71 e0       	ldi	r23, 0x01	; 1
    13cc:	80 e3       	ldi	r24, 0x30	; 48
    13ce:	99 e0       	ldi	r25, 0x09	; 9
    13d0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xTaskCreate>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	81 f4       	brne	.+32     	; 0x13f8 <vTaskStartScheduler+0x4c>
    13d8:	f8 94       	cli
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <xNextTaskUnblockTime+0x1>
    13e2:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <xNextTaskUnblockTime>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xSchedulerRunning>
    13ec:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <xTickCount+0x1>
    13f0:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <xTickCount>
    13f4:	0e 94 44 03 	call	0x688	; 0x688 <xPortStartScheduler>
    13f8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <uxTopUsedPriority>
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	08 95       	ret

00001404 <vTaskSuspendAll>:
    1404:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxSchedulerSuspended>
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxSchedulerSuspended>
    140e:	08 95       	ret

00001410 <xTaskIncrementTick>:
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxSchedulerSuspended>
    141c:	81 11       	cpse	r24, r1
    141e:	01 c1       	rjmp	.+514    	; 0x1622 <xTaskIncrementTick+0x212>
    1420:	c0 91 28 07 	lds	r28, 0x0728	; 0x800728 <xTickCount>
    1424:	d0 91 29 07 	lds	r29, 0x0729	; 0x800729 <xTickCount+0x1>
    1428:	8e 01       	movw	r16, r28
    142a:	0f 5f       	subi	r16, 0xFF	; 255
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
    142e:	10 93 29 07 	sts	0x0729, r17	; 0x800729 <xTickCount+0x1>
    1432:	00 93 28 07 	sts	0x0728, r16	; 0x800728 <xTickCount>
    1436:	01 15       	cp	r16, r1
    1438:	11 05       	cpc	r17, r1
    143a:	b9 f4       	brne	.+46     	; 0x146a <xTaskIncrementTick+0x5a>
    143c:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <pxDelayedTaskList>
    1440:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <pxDelayedTaskList+0x1>
    1444:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <pxOverflowDelayedTaskList>
    1448:	30 91 3f 07 	lds	r19, 0x073F	; 0x80073f <pxOverflowDelayedTaskList+0x1>
    144c:	30 93 41 07 	sts	0x0741, r19	; 0x800741 <pxDelayedTaskList+0x1>
    1450:	20 93 40 07 	sts	0x0740, r18	; 0x800740 <pxDelayedTaskList>
    1454:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <pxOverflowDelayedTaskList+0x1>
    1458:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <pxOverflowDelayedTaskList>
    145c:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <xNumOfOverflows>
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xNumOfOverflows>
    1466:	0e 94 c8 07 	call	0xf90	; 0xf90 <prvResetNextTaskUnblockTime>
    146a:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <xNextTaskUnblockTime>
    146e:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xNextTaskUnblockTime+0x1>
    1472:	08 17       	cp	r16, r24
    1474:	19 07       	cpc	r17, r25
    1476:	20 f4       	brcc	.+8      	; 0x1480 <xTaskIncrementTick+0x70>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	b8 c0       	rjmp	.+368    	; 0x15ec <xTaskIncrementTick+0x1dc>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <xTaskIncrementTick+0x72>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <pxDelayedTaskList>
    1486:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <pxDelayedTaskList+0x1>
    148a:	90 81       	ld	r25, Z
    148c:	91 11       	cpse	r25, r1
    148e:	07 c0       	rjmp	.+14     	; 0x149e <xTaskIncrementTick+0x8e>
    1490:	2f ef       	ldi	r18, 0xFF	; 255
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	30 93 20 07 	sts	0x0720, r19	; 0x800720 <xNextTaskUnblockTime+0x1>
    1498:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <xNextTaskUnblockTime>
    149c:	a7 c0       	rjmp	.+334    	; 0x15ec <xTaskIncrementTick+0x1dc>
    149e:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <pxDelayedTaskList>
    14a2:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <pxDelayedTaskList+0x1>
    14a6:	05 80       	ldd	r0, Z+5	; 0x05
    14a8:	f6 81       	ldd	r31, Z+6	; 0x06
    14aa:	e0 2d       	mov	r30, r0
    14ac:	06 80       	ldd	r0, Z+6	; 0x06
    14ae:	f7 81       	ldd	r31, Z+7	; 0x07
    14b0:	e0 2d       	mov	r30, r0
    14b2:	22 81       	ldd	r18, Z+2	; 0x02
    14b4:	33 81       	ldd	r19, Z+3	; 0x03
    14b6:	02 17       	cp	r16, r18
    14b8:	13 07       	cpc	r17, r19
    14ba:	28 f4       	brcc	.+10     	; 0x14c6 <xTaskIncrementTick+0xb6>
    14bc:	30 93 20 07 	sts	0x0720, r19	; 0x800720 <xNextTaskUnblockTime+0x1>
    14c0:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <xNextTaskUnblockTime>
    14c4:	93 c0       	rjmp	.+294    	; 0x15ec <xTaskIncrementTick+0x1dc>
    14c6:	a2 85       	ldd	r26, Z+10	; 0x0a
    14c8:	b3 85       	ldd	r27, Z+11	; 0x0b
    14ca:	24 81       	ldd	r18, Z+4	; 0x04
    14cc:	35 81       	ldd	r19, Z+5	; 0x05
    14ce:	46 81       	ldd	r20, Z+6	; 0x06
    14d0:	57 81       	ldd	r21, Z+7	; 0x07
    14d2:	e9 01       	movw	r28, r18
    14d4:	5d 83       	std	Y+5, r21	; 0x05
    14d6:	4c 83       	std	Y+4, r20	; 0x04
    14d8:	26 81       	ldd	r18, Z+6	; 0x06
    14da:	37 81       	ldd	r19, Z+7	; 0x07
    14dc:	44 81       	ldd	r20, Z+4	; 0x04
    14de:	55 81       	ldd	r21, Z+5	; 0x05
    14e0:	e9 01       	movw	r28, r18
    14e2:	5b 83       	std	Y+3, r21	; 0x03
    14e4:	4a 83       	std	Y+2, r20	; 0x02
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	2d 91       	ld	r18, X+
    14ea:	3c 91       	ld	r19, X
    14ec:	12 97       	sbiw	r26, 0x02	; 2
    14ee:	af 01       	movw	r20, r30
    14f0:	4e 5f       	subi	r20, 0xFE	; 254
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	24 17       	cp	r18, r20
    14f6:	35 07       	cpc	r19, r21
    14f8:	31 f4       	brne	.+12     	; 0x1506 <xTaskIncrementTick+0xf6>
    14fa:	26 81       	ldd	r18, Z+6	; 0x06
    14fc:	37 81       	ldd	r19, Z+7	; 0x07
    14fe:	12 96       	adiw	r26, 0x02	; 2
    1500:	3c 93       	st	X, r19
    1502:	2e 93       	st	-X, r18
    1504:	11 97       	sbiw	r26, 0x01	; 1
    1506:	13 86       	std	Z+11, r1	; 0x0b
    1508:	12 86       	std	Z+10, r1	; 0x0a
    150a:	9c 91       	ld	r25, X
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	9c 93       	st	X, r25
    1510:	a4 89       	ldd	r26, Z+20	; 0x14
    1512:	b5 89       	ldd	r27, Z+21	; 0x15
    1514:	10 97       	sbiw	r26, 0x00	; 0
    1516:	19 f1       	breq	.+70     	; 0x155e <xTaskIncrementTick+0x14e>
    1518:	26 85       	ldd	r18, Z+14	; 0x0e
    151a:	37 85       	ldd	r19, Z+15	; 0x0f
    151c:	60 89       	ldd	r22, Z+16	; 0x10
    151e:	71 89       	ldd	r23, Z+17	; 0x11
    1520:	e9 01       	movw	r28, r18
    1522:	7d 83       	std	Y+5, r23	; 0x05
    1524:	6c 83       	std	Y+4, r22	; 0x04
    1526:	20 89       	ldd	r18, Z+16	; 0x10
    1528:	31 89       	ldd	r19, Z+17	; 0x11
    152a:	66 85       	ldd	r22, Z+14	; 0x0e
    152c:	77 85       	ldd	r23, Z+15	; 0x0f
    152e:	e9 01       	movw	r28, r18
    1530:	7b 83       	std	Y+3, r23	; 0x03
    1532:	6a 83       	std	Y+2, r22	; 0x02
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	6d 91       	ld	r22, X+
    1538:	7c 91       	ld	r23, X
    153a:	12 97       	sbiw	r26, 0x02	; 2
    153c:	9f 01       	movw	r18, r30
    153e:	24 5f       	subi	r18, 0xF4	; 244
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	62 17       	cp	r22, r18
    1544:	73 07       	cpc	r23, r19
    1546:	31 f4       	brne	.+12     	; 0x1554 <xTaskIncrementTick+0x144>
    1548:	20 89       	ldd	r18, Z+16	; 0x10
    154a:	31 89       	ldd	r19, Z+17	; 0x11
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	3c 93       	st	X, r19
    1550:	2e 93       	st	-X, r18
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	15 8a       	std	Z+21, r1	; 0x15
    1556:	14 8a       	std	Z+20, r1	; 0x14
    1558:	9c 91       	ld	r25, X
    155a:	91 50       	subi	r25, 0x01	; 1
    155c:	9c 93       	st	X, r25
    155e:	26 89       	ldd	r18, Z+22	; 0x16
    1560:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <uxTopReadyPriority>
    1564:	92 17       	cp	r25, r18
    1566:	10 f4       	brcc	.+4      	; 0x156c <xTaskIncrementTick+0x15c>
    1568:	20 93 27 07 	sts	0x0727, r18	; 0x800727 <uxTopReadyPriority>
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	d9 01       	movw	r26, r18
    1570:	aa 0f       	add	r26, r26
    1572:	bb 1f       	adc	r27, r27
    1574:	aa 0f       	add	r26, r26
    1576:	bb 1f       	adc	r27, r27
    1578:	aa 0f       	add	r26, r26
    157a:	bb 1f       	adc	r27, r27
    157c:	2a 0f       	add	r18, r26
    157e:	3b 1f       	adc	r19, r27
    1580:	d9 01       	movw	r26, r18
    1582:	ac 5a       	subi	r26, 0xAC	; 172
    1584:	b8 4f       	sbci	r27, 0xF8	; 248
    1586:	11 96       	adiw	r26, 0x01	; 1
    1588:	0d 90       	ld	r0, X+
    158a:	bc 91       	ld	r27, X
    158c:	a0 2d       	mov	r26, r0
    158e:	b5 83       	std	Z+5, r27	; 0x05
    1590:	a4 83       	std	Z+4, r26	; 0x04
    1592:	14 96       	adiw	r26, 0x04	; 4
    1594:	2d 91       	ld	r18, X+
    1596:	3c 91       	ld	r19, X
    1598:	15 97       	sbiw	r26, 0x05	; 5
    159a:	37 83       	std	Z+7, r19	; 0x07
    159c:	26 83       	std	Z+6, r18	; 0x06
    159e:	14 96       	adiw	r26, 0x04	; 4
    15a0:	2d 91       	ld	r18, X+
    15a2:	3c 91       	ld	r19, X
    15a4:	15 97       	sbiw	r26, 0x05	; 5
    15a6:	e9 01       	movw	r28, r18
    15a8:	5b 83       	std	Y+3, r21	; 0x03
    15aa:	4a 83       	std	Y+2, r20	; 0x02
    15ac:	15 96       	adiw	r26, 0x05	; 5
    15ae:	5c 93       	st	X, r21
    15b0:	4e 93       	st	-X, r20
    15b2:	14 97       	sbiw	r26, 0x04	; 4
    15b4:	a6 89       	ldd	r26, Z+22	; 0x16
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	9d 01       	movw	r18, r26
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	22 0f       	add	r18, r18
    15c0:	33 1f       	adc	r19, r19
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	a2 0f       	add	r26, r18
    15c8:	b3 1f       	adc	r27, r19
    15ca:	ac 5a       	subi	r26, 0xAC	; 172
    15cc:	b8 4f       	sbci	r27, 0xF8	; 248
    15ce:	b3 87       	std	Z+11, r27	; 0x0b
    15d0:	a2 87       	std	Z+10, r26	; 0x0a
    15d2:	9c 91       	ld	r25, X
    15d4:	9f 5f       	subi	r25, 0xFF	; 255
    15d6:	9c 93       	st	X, r25
    15d8:	26 89       	ldd	r18, Z+22	; 0x16
    15da:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
    15de:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    15e2:	96 89       	ldd	r25, Z+22	; 0x16
    15e4:	92 17       	cp	r25, r18
    15e6:	08 f4       	brcc	.+2      	; 0x15ea <xTaskIncrementTick+0x1da>
    15e8:	49 cf       	rjmp	.-366    	; 0x147c <xTaskIncrementTick+0x6c>
    15ea:	4b cf       	rjmp	.-362    	; 0x1482 <xTaskIncrementTick+0x72>
    15ec:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
    15f0:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    15f4:	26 89       	ldd	r18, Z+22	; 0x16
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	2e 0f       	add	r18, r30
    1608:	3f 1f       	adc	r19, r31
    160a:	f9 01       	movw	r30, r18
    160c:	ec 5a       	subi	r30, 0xAC	; 172
    160e:	f8 4f       	sbci	r31, 0xF8	; 248
    1610:	90 81       	ld	r25, Z
    1612:	92 30       	cpi	r25, 0x02	; 2
    1614:	08 f0       	brcs	.+2      	; 0x1618 <xTaskIncrementTick+0x208>
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <xYieldPending>
    161c:	91 11       	cpse	r25, r1
    161e:	0c c0       	rjmp	.+24     	; 0x1638 <xTaskIncrementTick+0x228>
    1620:	0c c0       	rjmp	.+24     	; 0x163a <xTaskIncrementTick+0x22a>
    1622:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xPendedTicks>
    1626:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xPendedTicks+0x1>
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <xPendedTicks+0x1>
    1630:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <xPendedTicks>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	01 c0       	rjmp	.+2      	; 0x163a <xTaskIncrementTick+0x22a>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	08 95       	ret

00001644 <xTaskResumeAll>:
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	0f 92       	push	r0
    164e:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxSchedulerSuspended>
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxSchedulerSuspended>
    1658:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxSchedulerSuspended>
    165c:	81 11       	cpse	r24, r1
    165e:	bf c0       	rjmp	.+382    	; 0x17de <xTaskResumeAll+0x19a>
    1660:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    1664:	81 11       	cpse	r24, r1
    1666:	96 c0       	rjmp	.+300    	; 0x1794 <xTaskResumeAll+0x150>
    1668:	bd c0       	rjmp	.+378    	; 0x17e4 <xTaskResumeAll+0x1a0>
    166a:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <xPendingReadyList+0x5>
    166e:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <xPendingReadyList+0x6>
    1672:	06 80       	ldd	r0, Z+6	; 0x06
    1674:	f7 81       	ldd	r31, Z+7	; 0x07
    1676:	e0 2d       	mov	r30, r0
    1678:	a4 89       	ldd	r26, Z+20	; 0x14
    167a:	b5 89       	ldd	r27, Z+21	; 0x15
    167c:	c6 85       	ldd	r28, Z+14	; 0x0e
    167e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1680:	80 89       	ldd	r24, Z+16	; 0x10
    1682:	91 89       	ldd	r25, Z+17	; 0x11
    1684:	9d 83       	std	Y+5, r25	; 0x05
    1686:	8c 83       	std	Y+4, r24	; 0x04
    1688:	c0 89       	ldd	r28, Z+16	; 0x10
    168a:	d1 89       	ldd	r29, Z+17	; 0x11
    168c:	86 85       	ldd	r24, Z+14	; 0x0e
    168e:	97 85       	ldd	r25, Z+15	; 0x0f
    1690:	9b 83       	std	Y+3, r25	; 0x03
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	11 96       	adiw	r26, 0x01	; 1
    1696:	2d 91       	ld	r18, X+
    1698:	3c 91       	ld	r19, X
    169a:	12 97       	sbiw	r26, 0x02	; 2
    169c:	cf 01       	movw	r24, r30
    169e:	0c 96       	adiw	r24, 0x0c	; 12
    16a0:	28 17       	cp	r18, r24
    16a2:	39 07       	cpc	r19, r25
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <xTaskResumeAll+0x6e>
    16a6:	80 89       	ldd	r24, Z+16	; 0x10
    16a8:	91 89       	ldd	r25, Z+17	; 0x11
    16aa:	12 96       	adiw	r26, 0x02	; 2
    16ac:	9c 93       	st	X, r25
    16ae:	8e 93       	st	-X, r24
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	15 8a       	std	Z+21, r1	; 0x15
    16b4:	14 8a       	std	Z+20, r1	; 0x14
    16b6:	8c 91       	ld	r24, X
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	8c 93       	st	X, r24
    16bc:	a2 85       	ldd	r26, Z+10	; 0x0a
    16be:	b3 85       	ldd	r27, Z+11	; 0x0b
    16c0:	c4 81       	ldd	r28, Z+4	; 0x04
    16c2:	d5 81       	ldd	r29, Z+5	; 0x05
    16c4:	86 81       	ldd	r24, Z+6	; 0x06
    16c6:	97 81       	ldd	r25, Z+7	; 0x07
    16c8:	9d 83       	std	Y+5, r25	; 0x05
    16ca:	8c 83       	std	Y+4, r24	; 0x04
    16cc:	c6 81       	ldd	r28, Z+6	; 0x06
    16ce:	d7 81       	ldd	r29, Z+7	; 0x07
    16d0:	84 81       	ldd	r24, Z+4	; 0x04
    16d2:	95 81       	ldd	r25, Z+5	; 0x05
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	8d 91       	ld	r24, X+
    16dc:	9c 91       	ld	r25, X
    16de:	12 97       	sbiw	r26, 0x02	; 2
    16e0:	9f 01       	movw	r18, r30
    16e2:	2e 5f       	subi	r18, 0xFE	; 254
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	82 17       	cp	r24, r18
    16e8:	93 07       	cpc	r25, r19
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <xTaskResumeAll+0xb4>
    16ec:	86 81       	ldd	r24, Z+6	; 0x06
    16ee:	97 81       	ldd	r25, Z+7	; 0x07
    16f0:	12 96       	adiw	r26, 0x02	; 2
    16f2:	9c 93       	st	X, r25
    16f4:	8e 93       	st	-X, r24
    16f6:	11 97       	sbiw	r26, 0x01	; 1
    16f8:	13 86       	std	Z+11, r1	; 0x0b
    16fa:	12 86       	std	Z+10, r1	; 0x0a
    16fc:	8c 91       	ld	r24, X
    16fe:	81 50       	subi	r24, 0x01	; 1
    1700:	8c 93       	st	X, r24
    1702:	86 89       	ldd	r24, Z+22	; 0x16
    1704:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <uxTopReadyPriority>
    1708:	98 17       	cp	r25, r24
    170a:	10 f4       	brcc	.+4      	; 0x1710 <xTaskResumeAll+0xcc>
    170c:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxTopReadyPriority>
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	dc 01       	movw	r26, r24
    1714:	aa 0f       	add	r26, r26
    1716:	bb 1f       	adc	r27, r27
    1718:	aa 0f       	add	r26, r26
    171a:	bb 1f       	adc	r27, r27
    171c:	aa 0f       	add	r26, r26
    171e:	bb 1f       	adc	r27, r27
    1720:	8a 0f       	add	r24, r26
    1722:	9b 1f       	adc	r25, r27
    1724:	dc 01       	movw	r26, r24
    1726:	ac 5a       	subi	r26, 0xAC	; 172
    1728:	b8 4f       	sbci	r27, 0xF8	; 248
    172a:	11 96       	adiw	r26, 0x01	; 1
    172c:	0d 90       	ld	r0, X+
    172e:	bc 91       	ld	r27, X
    1730:	a0 2d       	mov	r26, r0
    1732:	b5 83       	std	Z+5, r27	; 0x05
    1734:	a4 83       	std	Z+4, r26	; 0x04
    1736:	14 96       	adiw	r26, 0x04	; 4
    1738:	8d 91       	ld	r24, X+
    173a:	9c 91       	ld	r25, X
    173c:	15 97       	sbiw	r26, 0x05	; 5
    173e:	97 83       	std	Z+7, r25	; 0x07
    1740:	86 83       	std	Z+6, r24	; 0x06
    1742:	14 96       	adiw	r26, 0x04	; 4
    1744:	cd 91       	ld	r28, X+
    1746:	dc 91       	ld	r29, X
    1748:	15 97       	sbiw	r26, 0x05	; 5
    174a:	3b 83       	std	Y+3, r19	; 0x03
    174c:	2a 83       	std	Y+2, r18	; 0x02
    174e:	15 96       	adiw	r26, 0x05	; 5
    1750:	3c 93       	st	X, r19
    1752:	2e 93       	st	-X, r18
    1754:	14 97       	sbiw	r26, 0x04	; 4
    1756:	a6 89       	ldd	r26, Z+22	; 0x16
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	cd 01       	movw	r24, r26
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	a8 0f       	add	r26, r24
    176a:	b9 1f       	adc	r27, r25
    176c:	ac 5a       	subi	r26, 0xAC	; 172
    176e:	b8 4f       	sbci	r27, 0xF8	; 248
    1770:	b3 87       	std	Z+11, r27	; 0x0b
    1772:	a2 87       	std	Z+10, r26	; 0x0a
    1774:	8c 91       	ld	r24, X
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	8c 93       	st	X, r24
    177a:	96 89       	ldd	r25, Z+22	; 0x16
    177c:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
    1780:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    1784:	56 96       	adiw	r26, 0x16	; 22
    1786:	8c 91       	ld	r24, X
    1788:	98 17       	cp	r25, r24
    178a:	30 f0       	brcs	.+12     	; 0x1798 <xTaskResumeAll+0x154>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <xTaskResumeAll+0x154>
    1794:	e0 e0       	ldi	r30, 0x00	; 0
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xPendingReadyList>
    179c:	81 11       	cpse	r24, r1
    179e:	65 cf       	rjmp	.-310    	; 0x166a <xTaskResumeAll+0x26>
    17a0:	ef 2b       	or	r30, r31
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <xTaskResumeAll+0x164>
    17a4:	0e 94 c8 07 	call	0xf90	; 0xf90 <prvResetNextTaskUnblockTime>
    17a8:	c0 91 24 07 	lds	r28, 0x0724	; 0x800724 <xPendedTicks>
    17ac:	d0 91 25 07 	lds	r29, 0x0725	; 0x800725 <xPendedTicks+0x1>
    17b0:	20 97       	sbiw	r28, 0x00	; 0
    17b2:	69 f0       	breq	.+26     	; 0x17ce <xTaskResumeAll+0x18a>
    17b4:	0e 94 08 0a 	call	0x1410	; 0x1410 <xTaskIncrementTick>
    17b8:	88 23       	and	r24, r24
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <xTaskResumeAll+0x17e>
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    17c2:	21 97       	sbiw	r28, 0x01	; 1
    17c4:	b9 f7       	brne	.-18     	; 0x17b4 <xTaskResumeAll+0x170>
    17c6:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <xPendedTicks+0x1>
    17ca:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <xPendedTicks>
    17ce:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xYieldPending>
    17d2:	88 23       	and	r24, r24
    17d4:	31 f0       	breq	.+12     	; 0x17e2 <xTaskResumeAll+0x19e>
    17d6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <xTaskResumeAll+0x1a0>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <xTaskResumeAll+0x1a0>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <vTaskDelay>:
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	89 2b       	or	r24, r25
    17f6:	49 f0       	breq	.+18     	; 0x180a <vTaskDelay+0x1c>
    17f8:	0e 94 02 0a 	call	0x1404	; 0x1404 <vTaskSuspendAll>
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 39 09 	call	0x1272	; 0x1272 <prvAddCurrentTaskToDelayedList>
    1804:	0e 94 22 0b 	call	0x1644	; 0x1644 <xTaskResumeAll>
    1808:	01 c0       	rjmp	.+2      	; 0x180c <vTaskDelay+0x1e>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	81 11       	cpse	r24, r1
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vTaskDelay+0x26>
    1810:	0e 94 73 03 	call	0x6e6	; 0x6e6 <vPortYield>
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <vTaskSwitchContext>:
    181a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxSchedulerSuspended>
    181e:	88 23       	and	r24, r24
    1820:	21 f0       	breq	.+8      	; 0x182a <vTaskSwitchContext+0x10>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    1828:	08 95       	ret
    182a:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <xYieldPending>
    182e:	20 91 27 07 	lds	r18, 0x0727	; 0x800727 <uxTopReadyPriority>
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <vTaskSwitchContext+0x1c>
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	82 2f       	mov	r24, r18
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	fc 01       	movw	r30, r24
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	e8 0f       	add	r30, r24
    184a:	f9 1f       	adc	r31, r25
    184c:	ec 5a       	subi	r30, 0xAC	; 172
    184e:	f8 4f       	sbci	r31, 0xF8	; 248
    1850:	30 81       	ld	r19, Z
    1852:	33 23       	and	r19, r19
    1854:	79 f3       	breq	.-34     	; 0x1834 <vTaskSwitchContext+0x1a>
    1856:	ac 01       	movw	r20, r24
    1858:	44 0f       	add	r20, r20
    185a:	55 1f       	adc	r21, r21
    185c:	44 0f       	add	r20, r20
    185e:	55 1f       	adc	r21, r21
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	48 0f       	add	r20, r24
    1866:	59 1f       	adc	r21, r25
    1868:	df 01       	movw	r26, r30
    186a:	01 80       	ldd	r0, Z+1	; 0x01
    186c:	f2 81       	ldd	r31, Z+2	; 0x02
    186e:	e0 2d       	mov	r30, r0
    1870:	02 80       	ldd	r0, Z+2	; 0x02
    1872:	f3 81       	ldd	r31, Z+3	; 0x03
    1874:	e0 2d       	mov	r30, r0
    1876:	12 96       	adiw	r26, 0x02	; 2
    1878:	fc 93       	st	X, r31
    187a:	ee 93       	st	-X, r30
    187c:	11 97       	sbiw	r26, 0x01	; 1
    187e:	49 5a       	subi	r20, 0xA9	; 169
    1880:	58 4f       	sbci	r21, 0xF8	; 248
    1882:	e4 17       	cp	r30, r20
    1884:	f5 07       	cpc	r31, r21
    1886:	29 f4       	brne	.+10     	; 0x1892 <vTaskSwitchContext+0x78>
    1888:	42 81       	ldd	r20, Z+2	; 0x02
    188a:	53 81       	ldd	r21, Z+3	; 0x03
    188c:	fd 01       	movw	r30, r26
    188e:	52 83       	std	Z+2, r21	; 0x02
    1890:	41 83       	std	Z+1, r20	; 0x01
    1892:	fc 01       	movw	r30, r24
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	8e 0f       	add	r24, r30
    18a2:	9f 1f       	adc	r25, r31
    18a4:	fc 01       	movw	r30, r24
    18a6:	ec 5a       	subi	r30, 0xAC	; 172
    18a8:	f8 4f       	sbci	r31, 0xF8	; 248
    18aa:	01 80       	ldd	r0, Z+1	; 0x01
    18ac:	f2 81       	ldd	r31, Z+2	; 0x02
    18ae:	e0 2d       	mov	r30, r0
    18b0:	86 81       	ldd	r24, Z+6	; 0x06
    18b2:	97 81       	ldd	r25, Z+7	; 0x07
    18b4:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <pxCurrentTCB+0x1>
    18b8:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <pxCurrentTCB>
    18bc:	20 93 27 07 	sts	0x0727, r18	; 0x800727 <uxTopReadyPriority>
    18c0:	08 95       	ret

000018c2 <vTaskPlaceOnEventList>:
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	eb 01       	movw	r28, r22
    18c8:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <pxCurrentTCB>
    18cc:	70 91 8b 07 	lds	r23, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    18d0:	64 5f       	subi	r22, 0xF4	; 244
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	ce 01       	movw	r24, r28
    18dc:	0e 94 39 09 	call	0x1272	; 0x1272 <prvAddCurrentTaskToDelayedList>
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <xTaskRemoveFromEventList>:
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	dc 01       	movw	r26, r24
    18ec:	15 96       	adiw	r26, 0x05	; 5
    18ee:	ed 91       	ld	r30, X+
    18f0:	fc 91       	ld	r31, X
    18f2:	16 97       	sbiw	r26, 0x06	; 6
    18f4:	06 80       	ldd	r0, Z+6	; 0x06
    18f6:	f7 81       	ldd	r31, Z+7	; 0x07
    18f8:	e0 2d       	mov	r30, r0
    18fa:	a4 89       	ldd	r26, Z+20	; 0x14
    18fc:	b5 89       	ldd	r27, Z+21	; 0x15
    18fe:	c6 85       	ldd	r28, Z+14	; 0x0e
    1900:	d7 85       	ldd	r29, Z+15	; 0x0f
    1902:	80 89       	ldd	r24, Z+16	; 0x10
    1904:	91 89       	ldd	r25, Z+17	; 0x11
    1906:	9d 83       	std	Y+5, r25	; 0x05
    1908:	8c 83       	std	Y+4, r24	; 0x04
    190a:	c0 89       	ldd	r28, Z+16	; 0x10
    190c:	d1 89       	ldd	r29, Z+17	; 0x11
    190e:	86 85       	ldd	r24, Z+14	; 0x0e
    1910:	97 85       	ldd	r25, Z+15	; 0x0f
    1912:	9b 83       	std	Y+3, r25	; 0x03
    1914:	8a 83       	std	Y+2, r24	; 0x02
    1916:	11 96       	adiw	r26, 0x01	; 1
    1918:	8d 91       	ld	r24, X+
    191a:	9c 91       	ld	r25, X
    191c:	12 97       	sbiw	r26, 0x02	; 2
    191e:	9f 01       	movw	r18, r30
    1920:	24 5f       	subi	r18, 0xF4	; 244
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	82 17       	cp	r24, r18
    1926:	93 07       	cpc	r25, r19
    1928:	31 f4       	brne	.+12     	; 0x1936 <xTaskRemoveFromEventList+0x50>
    192a:	80 89       	ldd	r24, Z+16	; 0x10
    192c:	91 89       	ldd	r25, Z+17	; 0x11
    192e:	12 96       	adiw	r26, 0x02	; 2
    1930:	9c 93       	st	X, r25
    1932:	8e 93       	st	-X, r24
    1934:	11 97       	sbiw	r26, 0x01	; 1
    1936:	15 8a       	std	Z+21, r1	; 0x15
    1938:	14 8a       	std	Z+20, r1	; 0x14
    193a:	8c 91       	ld	r24, X
    193c:	81 50       	subi	r24, 0x01	; 1
    193e:	8c 93       	st	X, r24
    1940:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxSchedulerSuspended>
    1944:	81 11       	cpse	r24, r1
    1946:	60 c0       	rjmp	.+192    	; 0x1a08 <xTaskRemoveFromEventList+0x122>
    1948:	a2 85       	ldd	r26, Z+10	; 0x0a
    194a:	b3 85       	ldd	r27, Z+11	; 0x0b
    194c:	c4 81       	ldd	r28, Z+4	; 0x04
    194e:	d5 81       	ldd	r29, Z+5	; 0x05
    1950:	86 81       	ldd	r24, Z+6	; 0x06
    1952:	97 81       	ldd	r25, Z+7	; 0x07
    1954:	9d 83       	std	Y+5, r25	; 0x05
    1956:	8c 83       	std	Y+4, r24	; 0x04
    1958:	c6 81       	ldd	r28, Z+6	; 0x06
    195a:	d7 81       	ldd	r29, Z+7	; 0x07
    195c:	84 81       	ldd	r24, Z+4	; 0x04
    195e:	95 81       	ldd	r25, Z+5	; 0x05
    1960:	9b 83       	std	Y+3, r25	; 0x03
    1962:	8a 83       	std	Y+2, r24	; 0x02
    1964:	11 96       	adiw	r26, 0x01	; 1
    1966:	8d 91       	ld	r24, X+
    1968:	9c 91       	ld	r25, X
    196a:	12 97       	sbiw	r26, 0x02	; 2
    196c:	9f 01       	movw	r18, r30
    196e:	2e 5f       	subi	r18, 0xFE	; 254
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	31 f4       	brne	.+12     	; 0x1984 <xTaskRemoveFromEventList+0x9e>
    1978:	86 81       	ldd	r24, Z+6	; 0x06
    197a:	97 81       	ldd	r25, Z+7	; 0x07
    197c:	12 96       	adiw	r26, 0x02	; 2
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
    1982:	11 97       	sbiw	r26, 0x01	; 1
    1984:	13 86       	std	Z+11, r1	; 0x0b
    1986:	12 86       	std	Z+10, r1	; 0x0a
    1988:	8c 91       	ld	r24, X
    198a:	81 50       	subi	r24, 0x01	; 1
    198c:	8c 93       	st	X, r24
    198e:	86 89       	ldd	r24, Z+22	; 0x16
    1990:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <uxTopReadyPriority>
    1994:	98 17       	cp	r25, r24
    1996:	10 f4       	brcc	.+4      	; 0x199c <xTaskRemoveFromEventList+0xb6>
    1998:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxTopReadyPriority>
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	dc 01       	movw	r26, r24
    19a0:	aa 0f       	add	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	aa 0f       	add	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	aa 0f       	add	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	8a 0f       	add	r24, r26
    19ae:	9b 1f       	adc	r25, r27
    19b0:	dc 01       	movw	r26, r24
    19b2:	ac 5a       	subi	r26, 0xAC	; 172
    19b4:	b8 4f       	sbci	r27, 0xF8	; 248
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	0d 90       	ld	r0, X+
    19ba:	bc 91       	ld	r27, X
    19bc:	a0 2d       	mov	r26, r0
    19be:	b5 83       	std	Z+5, r27	; 0x05
    19c0:	a4 83       	std	Z+4, r26	; 0x04
    19c2:	14 96       	adiw	r26, 0x04	; 4
    19c4:	8d 91       	ld	r24, X+
    19c6:	9c 91       	ld	r25, X
    19c8:	15 97       	sbiw	r26, 0x05	; 5
    19ca:	97 83       	std	Z+7, r25	; 0x07
    19cc:	86 83       	std	Z+6, r24	; 0x06
    19ce:	14 96       	adiw	r26, 0x04	; 4
    19d0:	cd 91       	ld	r28, X+
    19d2:	dc 91       	ld	r29, X
    19d4:	15 97       	sbiw	r26, 0x05	; 5
    19d6:	3b 83       	std	Y+3, r19	; 0x03
    19d8:	2a 83       	std	Y+2, r18	; 0x02
    19da:	15 96       	adiw	r26, 0x05	; 5
    19dc:	3c 93       	st	X, r19
    19de:	2e 93       	st	-X, r18
    19e0:	14 97       	sbiw	r26, 0x04	; 4
    19e2:	a6 89       	ldd	r26, Z+22	; 0x16
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	cd 01       	movw	r24, r26
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	a8 0f       	add	r26, r24
    19f6:	b9 1f       	adc	r27, r25
    19f8:	ac 5a       	subi	r26, 0xAC	; 172
    19fa:	b8 4f       	sbci	r27, 0xF8	; 248
    19fc:	b3 87       	std	Z+11, r27	; 0x0b
    19fe:	a2 87       	std	Z+10, r26	; 0x0a
    1a00:	8c 91       	ld	r24, X
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	8c 93       	st	X, r24
    1a06:	1c c0       	rjmp	.+56     	; 0x1a40 <xTaskRemoveFromEventList+0x15a>
    1a08:	45 e3       	ldi	r20, 0x35	; 53
    1a0a:	57 e0       	ldi	r21, 0x07	; 7
    1a0c:	da 01       	movw	r26, r20
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	cd 91       	ld	r28, X+
    1a12:	dc 91       	ld	r29, X
    1a14:	12 97       	sbiw	r26, 0x02	; 2
    1a16:	d7 87       	std	Z+15, r29	; 0x0f
    1a18:	c6 87       	std	Z+14, r28	; 0x0e
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	91 8b       	std	Z+17, r25	; 0x11
    1a20:	80 8b       	std	Z+16, r24	; 0x10
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	dc 01       	movw	r26, r24
    1a28:	13 96       	adiw	r26, 0x03	; 3
    1a2a:	3c 93       	st	X, r19
    1a2c:	2e 93       	st	-X, r18
    1a2e:	12 97       	sbiw	r26, 0x02	; 2
    1a30:	3d 83       	std	Y+5, r19	; 0x05
    1a32:	2c 83       	std	Y+4, r18	; 0x04
    1a34:	55 8b       	std	Z+21, r21	; 0x15
    1a36:	44 8b       	std	Z+20, r20	; 0x14
    1a38:	da 01       	movw	r26, r20
    1a3a:	8c 91       	ld	r24, X
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	8c 93       	st	X, r24
    1a40:	96 89       	ldd	r25, Z+22	; 0x16
    1a42:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
    1a46:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
    1a4a:	86 89       	ldd	r24, Z+22	; 0x16
    1a4c:	89 17       	cp	r24, r25
    1a4e:	20 f4       	brcc	.+8      	; 0x1a58 <xTaskRemoveFromEventList+0x172>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <xTaskRemoveFromEventList+0x174>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1a60:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <xNumOfOverflows>
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1a68:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <xTickCount>
    1a6c:	30 91 29 07 	lds	r19, 0x0729	; 0x800729 <xTickCount+0x1>
    1a70:	32 83       	std	Z+2, r19	; 0x02
    1a72:	21 83       	std	Z+1, r18	; 0x01
    1a74:	08 95       	ret

00001a76 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1a80:	40 91 28 07 	lds	r20, 0x0728	; 0x800728 <xTickCount>
    1a84:	50 91 29 07 	lds	r21, 0x0729	; 0x800729 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1a88:	ec 01       	movw	r28, r24
    1a8a:	29 81       	ldd	r18, Y+1	; 0x01
    1a8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a8e:	da 01       	movw	r26, r20
    1a90:	a2 1b       	sub	r26, r18
    1a92:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1a94:	f8 81       	ld	r31, Y
    1a96:	e0 91 22 07 	lds	r30, 0x0722	; 0x800722 <xNumOfOverflows>
    1a9a:	fe 17       	cp	r31, r30
    1a9c:	41 f0       	breq	.+16     	; 0x1aae <xTaskCheckForTimeOut+0x38>
    1a9e:	42 17       	cp	r20, r18
    1aa0:	53 07       	cpc	r21, r19
    1aa2:	28 f0       	brcs	.+10     	; 0x1aae <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	11 82       	std	Z+1, r1	; 0x01
    1aa8:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1aac:	11 c0       	rjmp	.+34     	; 0x1ad0 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1aae:	eb 01       	movw	r28, r22
    1ab0:	28 81       	ld	r18, Y
    1ab2:	39 81       	ldd	r19, Y+1	; 0x01
    1ab4:	a2 17       	cp	r26, r18
    1ab6:	b3 07       	cpc	r27, r19
    1ab8:	40 f4       	brcc	.+16     	; 0x1aca <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1aba:	2a 1b       	sub	r18, r26
    1abc:	3b 0b       	sbc	r19, r27
    1abe:	39 83       	std	Y+1, r19	; 0x01
    1ac0:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1ac2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	03 c0       	rjmp	.+6      	; 0x1ad0 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    1ae0:	08 95       	ret

00001ae2 <enablePulse>:
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	62 e0       	ldi	r22, 0x02	; 2
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	8a 95       	dec	r24
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <enablePulse+0xc>
    1af2:	00 00       	nop
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1afe:	8f e3       	ldi	r24, 0x3F	; 63
    1b00:	9f e1       	ldi	r25, 0x1F	; 31
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <enablePulse+0x20>
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <enablePulse+0x26>
    1b08:	00 00       	nop
    1b0a:	08 95       	ret

00001b0c <lcd_vidSendCmd>:
    1b0c:	cf 93       	push	r28
    1b0e:	c8 2f       	mov	r28, r24
    1b10:	8f e9       	ldi	r24, 0x9F	; 159
    1b12:	9f e0       	ldi	r25, 0x0F	; 15
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <lcd_vidSendCmd+0x8>
    1b18:	00 c0       	rjmp	.+0      	; 0x1b1a <lcd_vidSendCmd+0xe>
    1b1a:	00 00       	nop
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	63 e0       	ldi	r22, 0x03	; 3
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b26:	c4 fb       	bst	r28, 4
    1b28:	44 27       	eor	r20, r20
    1b2a:	40 f9       	bld	r20, 0
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b34:	c5 fb       	bst	r28, 5
    1b36:	44 27       	eor	r20, r20
    1b38:	40 f9       	bld	r20, 0
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b42:	c6 fb       	bst	r28, 6
    1b44:	44 27       	eor	r20, r20
    1b46:	40 f9       	bld	r20, 0
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b50:	4c 2f       	mov	r20, r28
    1b52:	44 1f       	adc	r20, r20
    1b54:	44 27       	eor	r20, r20
    1b56:	44 1f       	adc	r20, r20
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b60:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <enablePulse>
    1b64:	4c 2f       	mov	r20, r28
    1b66:	41 70       	andi	r20, 0x01	; 1
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b70:	c1 fb       	bst	r28, 1
    1b72:	44 27       	eor	r20, r20
    1b74:	40 f9       	bld	r20, 0
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b7e:	c2 fb       	bst	r28, 2
    1b80:	44 27       	eor	r20, r20
    1b82:	40 f9       	bld	r20, 0
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b8c:	c3 fb       	bst	r28, 3
    1b8e:	44 27       	eor	r20, r20
    1b90:	40 f9       	bld	r20, 0
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1b9a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <enablePulse>
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <lcd_vidSendData>:
    1ba2:	cf 93       	push	r28
    1ba4:	c8 2f       	mov	r28, r24
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	63 e0       	ldi	r22, 0x03	; 3
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1bb0:	c4 fb       	bst	r28, 4
    1bb2:	44 27       	eor	r20, r20
    1bb4:	40 f9       	bld	r20, 0
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1bbe:	c5 fb       	bst	r28, 5
    1bc0:	44 27       	eor	r20, r20
    1bc2:	40 f9       	bld	r20, 0
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1bcc:	c6 fb       	bst	r28, 6
    1bce:	44 27       	eor	r20, r20
    1bd0:	40 f9       	bld	r20, 0
    1bd2:	62 e0       	ldi	r22, 0x02	; 2
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1bda:	4c 2f       	mov	r20, r28
    1bdc:	44 1f       	adc	r20, r20
    1bde:	44 27       	eor	r20, r20
    1be0:	44 1f       	adc	r20, r20
    1be2:	64 e0       	ldi	r22, 0x04	; 4
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1bea:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <enablePulse>
    1bee:	4c 2f       	mov	r20, r28
    1bf0:	41 70       	andi	r20, 0x01	; 1
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1bfa:	c1 fb       	bst	r28, 1
    1bfc:	44 27       	eor	r20, r20
    1bfe:	40 f9       	bld	r20, 0
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1c08:	c2 fb       	bst	r28, 2
    1c0a:	44 27       	eor	r20, r20
    1c0c:	40 f9       	bld	r20, 0
    1c0e:	62 e0       	ldi	r22, 0x02	; 2
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1c16:	c3 fb       	bst	r28, 3
    1c18:	44 27       	eor	r20, r20
    1c1a:	40 f9       	bld	r20, 0
    1c1c:	64 e0       	ldi	r22, 0x04	; 4
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0e 94 12 10 	call	0x2024	; 0x2024 <dio_vidWriteChannel>
    1c24:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <enablePulse>
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <lcd_vidGotoRowColumn>:
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	59 f0       	breq	.+22     	; 0x1c46 <lcd_vidGotoRowColumn+0x1a>
    1c30:	28 f0       	brcs	.+10     	; 0x1c3c <lcd_vidGotoRowColumn+0x10>
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	69 f0       	breq	.+26     	; 0x1c50 <lcd_vidGotoRowColumn+0x24>
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	81 f0       	breq	.+32     	; 0x1c5a <lcd_vidGotoRowColumn+0x2e>
    1c3a:	08 95       	ret
    1c3c:	80 e8       	ldi	r24, 0x80	; 128
    1c3e:	86 0f       	add	r24, r22
    1c40:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1c44:	08 95       	ret
    1c46:	80 ec       	ldi	r24, 0xC0	; 192
    1c48:	86 0f       	add	r24, r22
    1c4a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1c4e:	08 95       	ret
    1c50:	84 e9       	ldi	r24, 0x94	; 148
    1c52:	86 0f       	add	r24, r22
    1c54:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1c58:	08 95       	ret
    1c5a:	84 ed       	ldi	r24, 0xD4	; 212
    1c5c:	86 0f       	add	r24, r22
    1c5e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1c62:	08 95       	ret

00001c64 <lcd_vidInit>:
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	63 e0       	ldi	r22, 0x03	; 3
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1c82:	41 e0       	ldi	r20, 0x01	; 1
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	64 e0       	ldi	r22, 0x04	; 4
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1ca0:	2f ef       	ldi	r18, 0xFF	; 255
    1ca2:	89 ef       	ldi	r24, 0xF9	; 249
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	21 50       	subi	r18, 0x01	; 1
    1ca8:	80 40       	sbci	r24, 0x00	; 0
    1caa:	90 40       	sbci	r25, 0x00	; 0
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <lcd_vidInit+0x42>
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <lcd_vidInit+0x4c>
    1cb0:	00 00       	nop
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1cb8:	8f e1       	ldi	r24, 0x1F	; 31
    1cba:	9e e4       	ldi	r25, 0x4E	; 78
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <lcd_vidInit+0x58>
    1cc0:	00 c0       	rjmp	.+0      	; 0x1cc2 <lcd_vidInit+0x5e>
    1cc2:	00 00       	nop
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1cca:	8f e8       	ldi	r24, 0x8F	; 143
    1ccc:	91 e0       	ldi	r25, 0x01	; 1
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <lcd_vidInit+0x6a>
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <lcd_vidInit+0x70>
    1cd4:	00 00       	nop
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1ce2:	88 e2       	ldi	r24, 0x28	; 40
    1ce4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1ce8:	8c e0       	ldi	r24, 0x0C	; 12
    1cea:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <lcd_vidGotoRowColumn>
    1cf6:	08 95       	ret

00001cf8 <lcd_vidDisplyChar>:
    1cf8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <lcd_vidSendData>
    1cfc:	08 95       	ret

00001cfe <lcd_vidDisplyStr>:
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	ec 01       	movw	r28, r24
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <lcd_vidDisplyStr+0xe>
    1d06:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <lcd_vidDisplyChar>
    1d0a:	21 96       	adiw	r28, 0x01	; 1
    1d0c:	88 81       	ld	r24, Y
    1d0e:	81 11       	cpse	r24, r1
    1d10:	fa cf       	rjmp	.-12     	; 0x1d06 <lcd_vidDisplyStr+0x8>
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <lcd_vidClrDislay>:
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidClrDislay(void)
{
	lcd_vidSendCmd(_LCD_CLEAR);
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d1e:	8f e1       	ldi	r24, 0x1F	; 31
    1d20:	9e e4       	ldi	r25, 0x4E	; 78
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <lcd_vidClrDislay+0xa>
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <lcd_vidClrDislay+0x10>
    1d28:	00 00       	nop
    1d2a:	08 95       	ret

00001d2c <LDR_u16Read>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

u16 LDR_u16Read()
{
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
	u16 loc_LDRval = 0;
	loc_LDRval = ADC_u16Read(LDR_ADCchannel);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <ADC_u16Read>
    1d36:	ec 01       	movw	r28, r24
	lcd_vidClrDislay();
    1d38:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_vidClrDislay>
// 	lcd_vidDisplyStr("resistance= ");
// 	lcd_vidDispalyNumber(loc_LDRval);
	return loc_LDRval;
}
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	08 95       	ret

00001d44 <PUSH_BOTTUN_u8GetState>:
 */ 

#include "push_botton.h"
PUSH_BOTTUN_STATE_t PUSH_BOTTUN_u8GetState(u8 BOTTON_PORT,u8 BOTTON_PIN)
{
	if (dio_dioLevelReadChannel(BOTTON_PORT,BOTTON_PIN)==STD_HIGH)
    1d44:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dio_dioLevelReadChannel>
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <PUSH_BOTTUN_u8GetState+0xa>
	{
		return PRESSED;
	} 
	else
	{
		return NOT_PRESSED;
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
	}
    1d4e:	08 95       	ret

00001d50 <RAIN_SENSOR_vidInit>:
#include "Rain_Sensor.h"
#include "../LCD/lcd.h"

void RAIN_SENSOR_vidInit()
{
	dio_vidConfigChannel(RAIN_SENSOR_PORT,RAIN_SENSOR_PIN,INPUT);
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	67 e0       	ldi	r22, 0x07	; 7
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
    1d5a:	08 95       	ret

00001d5c <RAIN_SENSOR_voidGetState>:
}
u8 RAIN_SENSOR_voidGetState(void)
{
	u8 temp_state;
	temp_state=dio_dioLevelReadChannel(RAIN_SENSOR_PORT,RAIN_SENSOR_PIN);
    1d5c:	67 e0       	ldi	r22, 0x07	; 7
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dio_dioLevelReadChannel>
// 	lcd_vidClrDislay();
// 	lcd_vidDispalyNumber(temp_state);
	if (temp_state==1)
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <RAIN_SENSOR_voidGetState+0xe>
	{
		return RAIN;
	} 
	else
	{
		return NO_RAIN;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
	}
    1d6a:	08 95       	ret

00001d6c <RTC_Set_Time>:

//unsigned char day, month, year;
u8 buffer[20];

void RTC_Set_Time(u8 hour,u8 mint,u8 second)        
{
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	c8 2f       	mov	r28, r24
    1d72:	d6 2f       	mov	r29, r22
	I2C_Start(); 		// transmit START condition
    1d74:	0e 94 6f 11 	call	0x22de	; 0x22de <I2C_Start>
	I2C_Write(0xD0); 	// address DS1307 for write
    1d78:	80 ed       	ldi	r24, 0xD0	; 208
    1d7a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(0); 		// set register pointer to 0
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	/*I2C_Write(second);*/  // set seconds
	I2C_Write(mint); 	// set minutes
    1d84:	8d 2f       	mov	r24, r29
    1d86:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(hour);  	// set Hours
    1d8a:	8c 2f       	mov	r24, r28
    1d8c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
I2C_Stop();            
    1d90:	0e 94 75 11 	call	0x22ea	; 0x22ea <I2C_Stop>
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <RTC_Set_Date>:
void RTC_Set_Date(u8 day,u8 month,u8 year)        
{
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	18 2f       	mov	r17, r24
    1da2:	d6 2f       	mov	r29, r22
    1da4:	c4 2f       	mov	r28, r20
	I2C_Start(); 		// transmit START condition
    1da6:	0e 94 6f 11 	call	0x22de	; 0x22de <I2C_Start>
	I2C_Write(0xD0);       // address DS1307 for write
    1daa:	80 ed       	ldi	r24, 0xD0	; 208
    1dac:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(0x04); 	// set register pointer to 4
    1db0:	84 e0       	ldi	r24, 0x04	; 4
    1db2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(day);  	// set day
    1db6:	81 2f       	mov	r24, r17
    1db8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(month); 	// set month
    1dbc:	8d 2f       	mov	r24, r29
    1dbe:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(year);  	// set year
    1dc2:	8c 2f       	mov	r24, r28
    1dc4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
I2C_Stop();            
    1dc8:	0e 94 75 11 	call	0x22ea	; 0x22ea <I2C_Stop>
}
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	08 95       	ret

00001dd4 <RTC_Get_Time>:

void RTC_Get_Time(/*u8 clock_ptr[]*/u8* hour, u8* mint, u8* second)
{	
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	ec 01       	movw	r28, r24
    1de2:	8b 01       	movw	r16, r22
    1de4:	7a 01       	movw	r14, r20
	I2C_Start();
    1de6:	0e 94 6f 11 	call	0x22de	; 0x22de <I2C_Start>
	I2C_Write(0xD0);
    1dea:	80 ed       	ldi	r24, 0xD0	; 208
    1dec:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Write(0);
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	I2C_Start();
    1df6:	0e 94 6f 11 	call	0x22de	; 0x22de <I2C_Start>
	I2C_Write(0xD1);
    1dfa:	81 ed       	ldi	r24, 0xD1	; 209
    1dfc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <I2C_Write>
	*second = I2C_Read(1);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	0e 94 7f 11 	call	0x22fe	; 0x22fe <I2C_Read>
    1e06:	f7 01       	movw	r30, r14
    1e08:	80 83       	st	Z, r24
	*mint= I2C_Read(1);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <I2C_Read>
    1e10:	f8 01       	movw	r30, r16
    1e12:	80 83       	st	Z, r24
	*hour = I2C_Read(0);	
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	0e 94 7f 11 	call	0x22fe	; 0x22fe <I2C_Read>
    1e1a:	88 83       	st	Y, r24
	I2C_Stop();
    1e1c:	0e 94 75 11 	call	0x22ea	; 0x22ea <I2C_Stop>
}	
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	08 95       	ret

00001e2e <Servo_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void Servo_voidInit(ServoMotor_Config *ptr_usrConfig)
{
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	ec 01       	movw	r28, r24
	PWM_voidInit(&__InternalDriverServoMotor__);
    1e34:	86 e6       	ldi	r24, 0x66	; 102
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 8a 11 	call	0x2314	; 0x2314 <PWM_voidInit>
	PWM_voidSetOCPin(&__InternalDriverServoMotor__,((ptr_usrConfig->selectServoPin)&0xA0));
    1e3c:	68 81       	ld	r22, Y
    1e3e:	60 7a       	andi	r22, 0xA0	; 160
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	86 e6       	ldi	r24, 0x66	; 102
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <PWM_voidSetOCPin>
	dio_vidConfigChannel(PORTD, ((ptr_usrConfig->selectServoPin)& 0x07), OUTPUT);
    1e4a:	68 81       	ld	r22, Y
    1e4c:	67 70       	andi	r22, 0x07	; 7
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <dio_vidConfigChannel>
}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <Servo_voidWrite>:
void Servo_voidWrite(ServoMotor_Config *ptr_usrConfig,u8 copy_u8Angle)
{
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	ec 01       	movw	r28, r24
	float getTicks; 
	switch(copy_u8Angle)
    1e62:	6a 35       	cpi	r22, 0x5A	; 90
    1e64:	81 f0       	breq	.+32     	; 0x1e86 <Servo_voidWrite+0x2a>
    1e66:	28 f4       	brcc	.+10     	; 0x1e72 <Servo_voidWrite+0x16>
    1e68:	66 23       	and	r22, r22
    1e6a:	41 f0       	breq	.+16     	; 0x1e7c <Servo_voidWrite+0x20>
    1e6c:	6e 31       	cpi	r22, 0x1E	; 30
    1e6e:	61 f1       	breq	.+88     	; 0x1ec8 <Servo_voidWrite+0x6c>
    1e70:	19 c0       	rjmp	.+50     	; 0x1ea4 <Servo_voidWrite+0x48>
    1e72:	68 37       	cpi	r22, 0x78	; 120
    1e74:	69 f0       	breq	.+26     	; 0x1e90 <Servo_voidWrite+0x34>
    1e76:	64 3b       	cpi	r22, 0xB4	; 180
    1e78:	81 f0       	breq	.+32     	; 0x1e9a <Servo_voidWrite+0x3e>
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <Servo_voidWrite+0x48>
	{
		case 0 : 
		getTicks = 125 ; 
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	8a ef       	ldi	r24, 0xFA	; 250
    1e82:	92 e4       	ldi	r25, 0x42	; 66
    1e84:	25 c0       	rjmp	.+74     	; 0x1ed0 <Servo_voidWrite+0x74>
		break ;
		case 30:
		getTicks =  146; 
		break ; 
		case 90 :
		getTicks =  188 ; 
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	8c e3       	ldi	r24, 0x3C	; 60
    1e8c:	93 e4       	ldi	r25, 0x43	; 67
		break ;
    1e8e:	20 c0       	rjmp	.+64     	; 0x1ed0 <Servo_voidWrite+0x74>
		case 120:
		getTicks = 208 ; 
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	80 e5       	ldi	r24, 0x50	; 80
    1e96:	93 e4       	ldi	r25, 0x43	; 67
		break ; 
    1e98:	1b c0       	rjmp	.+54     	; 0x1ed0 <Servo_voidWrite+0x74>
		case 180 :
		getTicks = 250 ;  
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	8a e7       	ldi	r24, 0x7A	; 122
    1ea0:	93 e4       	ldi	r25, 0x43	; 67
		break ;
    1ea2:	16 c0       	rjmp	.+44     	; 0x1ed0 <Servo_voidWrite+0x74>
		default:
		{
			getTicks = ((copy_u8Angle+180.161)/1.4406); 
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__floatsisf>
    1eae:	27 e3       	ldi	r18, 0x37	; 55
    1eb0:	39 e2       	ldi	r19, 0x29	; 41
    1eb2:	44 e3       	ldi	r20, 0x34	; 52
    1eb4:	53 e4       	ldi	r21, 0x43	; 67
    1eb6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__addsf3>
    1eba:	25 e9       	ldi	r18, 0x95	; 149
    1ebc:	35 e6       	ldi	r19, 0x65	; 101
    1ebe:	48 eb       	ldi	r20, 0xB8	; 184
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 4d 14 	call	0x289a	; 0x289a <__divsf3>
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <Servo_voidWrite+0x74>
	{
		case 0 : 
		getTicks = 125 ; 
		break ;
		case 30:
		getTicks =  146; 
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	82 e1       	ldi	r24, 0x12	; 18
    1ece:	93 e4       	ldi	r25, 0x43	; 67
		default:
		{
			getTicks = ((copy_u8Angle+180.161)/1.4406); 
		}
	}
	PWM_voidPhaseFrequencyCorrectSetValues(&__InternalDriverServoMotor__,((ptr_usrConfig->selectServoPin)&0xA0),2499,(u16)getTicks);
    1ed0:	0e 94 bf 14 	call	0x297e	; 0x297e <__fixunssfsi>
    1ed4:	28 81       	ld	r18, Y
    1ed6:	20 7a       	andi	r18, 0xA0	; 160
    1ed8:	e2 2f       	mov	r30, r18
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	9b 01       	movw	r18, r22
    1ede:	43 ec       	ldi	r20, 0xC3	; 195
    1ee0:	59 e0       	ldi	r21, 0x09	; 9
    1ee2:	bf 01       	movw	r22, r30
    1ee4:	86 e6       	ldi	r24, 0x66	; 102
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 10 12 	call	0x2420	; 0x2420 <PWM_voidPhaseFrequencyCorrectSetValues>
}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <ADC_vidInit>:
*                                    Func_StatNotOk
*******************************************************************************/
Func_Stat_t ADC_vidInit()
{
	Func_Stat_t retstat = 1;
	ADMUX |= (1<<REFS1) | (1<<REFS0); //Internal Voltage Reference
    1ef2:	87 b1       	in	r24, 0x07	; 7
    1ef4:	80 6c       	ori	r24, 0xC0	; 192
    1ef6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);//Enable ADC 
    1ef8:	86 b1       	in	r24, 0x06	; 6
    1efa:	80 68       	ori	r24, 0x80	; 128
    1efc:	86 b9       	out	0x06, r24	; 6
		break;
		case ADC_Prescaler_64:
		ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
		break;
		case ADC_Prescaler_128:
		ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
    1efe:	86 b1       	in	r24, 0x06	; 6
    1f00:	87 60       	ori	r24, 0x07	; 7
    1f02:	86 b9       	out	0x06, r24	; 6
		break;
	}
	retstat = 0;

return retstat;
}
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	08 95       	ret

00001f08 <ADC_u16Read>:
u16 ADC_u16Read(ADC_channelnum_t channelId)
{
	u16 loc_ADCconvres = 0;
	ADMUX = (ADMUX & 0b11100000)|(channelId & 0b00011111); //first part to maintain ADMUX value in init and clear the 5 LSB OF ADMUX to be ready to be set by channel ID then the second part take channel id and make & with 000 to ensure that these bits won't be changed by channel ID and the rest is set by channelID
    1f08:	97 b1       	in	r25, 0x07	; 7
    1f0a:	90 7e       	andi	r25, 0xE0	; 224
    1f0c:	8f 71       	andi	r24, 0x1F	; 31
    1f0e:	89 2b       	or	r24, r25
    1f10:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); //start conversion
    1f12:	86 b1       	in	r24, 0x06	; 6
    1f14:	80 64       	ori	r24, 0x40	; 64
    1f16:	86 b9       	out	0x06, r24	; 6
	while( CHECK_BIT(ADCSRA,ADIF) == 0);//wait until conversion is complete
    1f18:	34 9b       	sbis	0x06, 4	; 6
    1f1a:	fe cf       	rjmp	.-4      	; 0x1f18 <ADC_u16Read+0x10>
	loc_ADCconvres = ADCL; // store in ADCL "Data reg"
    1f1c:	24 b1       	in	r18, 0x04	; 4
	loc_ADCconvres |= (ADCH<<8);//store in ADCH
    1f1e:	85 b1       	in	r24, 0x05	; 5
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	98 2f       	mov	r25, r24
    1f24:	88 27       	eor	r24, r24
	return loc_ADCconvres;
	
    1f26:	82 2b       	or	r24, r18
    1f28:	08 95       	ret

00001f2a <dio_vidConfigChannel>:
	case DIO_PORTC:
		TOG_BIT(DIO_PORTC_REG,channel);
		break;

	case DIO_PORTD:
		TOG_BIT(DIO_PORTD_REG,channel);
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	21 f1       	breq	.+72     	; 0x1f76 <dio_vidConfigChannel+0x4c>
    1f2e:	30 f0       	brcs	.+12     	; 0x1f3c <dio_vidConfigChannel+0x12>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	f1 f1       	breq	.+124    	; 0x1fb0 <dio_vidConfigChannel+0x86>
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <dio_vidConfigChannel+0x10>
    1f38:	58 c0       	rjmp	.+176    	; 0x1fea <dio_vidConfigChannel+0xc0>
    1f3a:	08 95       	ret
    1f3c:	41 30       	cpi	r20, 0x01	; 1
    1f3e:	59 f4       	brne	.+22     	; 0x1f56 <dio_vidConfigChannel+0x2c>
    1f40:	2a b3       	in	r18, 0x1a	; 26
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <dio_vidConfigChannel+0x22>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	6a 95       	dec	r22
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <dio_vidConfigChannel+0x1e>
    1f50:	82 2b       	or	r24, r18
    1f52:	8a bb       	out	0x1a, r24	; 26
    1f54:	08 95       	ret
    1f56:	2a b3       	in	r18, 0x1a	; 26
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <dio_vidConfigChannel+0x38>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	6a 95       	dec	r22
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <dio_vidConfigChannel+0x34>
    1f66:	80 95       	com	r24
    1f68:	92 2f       	mov	r25, r18
    1f6a:	98 23       	and	r25, r24
    1f6c:	9a bb       	out	0x1a, r25	; 26
    1f6e:	9b b3       	in	r25, 0x1b	; 27
    1f70:	89 23       	and	r24, r25
    1f72:	8b bb       	out	0x1b, r24	; 27
    1f74:	08 95       	ret
    1f76:	41 30       	cpi	r20, 0x01	; 1
    1f78:	59 f4       	brne	.+22     	; 0x1f90 <dio_vidConfigChannel+0x66>
    1f7a:	27 b3       	in	r18, 0x17	; 23
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <dio_vidConfigChannel+0x5c>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	6a 95       	dec	r22
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <dio_vidConfigChannel+0x58>
    1f8a:	82 2b       	or	r24, r18
    1f8c:	87 bb       	out	0x17, r24	; 23
    1f8e:	08 95       	ret
    1f90:	27 b3       	in	r18, 0x17	; 23
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <dio_vidConfigChannel+0x72>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	6a 95       	dec	r22
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <dio_vidConfigChannel+0x6e>
    1fa0:	80 95       	com	r24
    1fa2:	92 2f       	mov	r25, r18
    1fa4:	98 23       	and	r25, r24
    1fa6:	97 bb       	out	0x17, r25	; 23
    1fa8:	98 b3       	in	r25, 0x18	; 24
    1faa:	89 23       	and	r24, r25
    1fac:	88 bb       	out	0x18, r24	; 24
    1fae:	08 95       	ret
    1fb0:	41 30       	cpi	r20, 0x01	; 1
    1fb2:	59 f4       	brne	.+22     	; 0x1fca <dio_vidConfigChannel+0xa0>
    1fb4:	24 b3       	in	r18, 0x14	; 20
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <dio_vidConfigChannel+0x96>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	6a 95       	dec	r22
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <dio_vidConfigChannel+0x92>
    1fc4:	82 2b       	or	r24, r18
    1fc6:	84 bb       	out	0x14, r24	; 20
    1fc8:	08 95       	ret
    1fca:	24 b3       	in	r18, 0x14	; 20
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <dio_vidConfigChannel+0xac>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	6a 95       	dec	r22
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <dio_vidConfigChannel+0xa8>
    1fda:	80 95       	com	r24
    1fdc:	92 2f       	mov	r25, r18
    1fde:	98 23       	and	r25, r24
    1fe0:	94 bb       	out	0x14, r25	; 20
    1fe2:	95 b3       	in	r25, 0x15	; 21
    1fe4:	89 23       	and	r24, r25
    1fe6:	85 bb       	out	0x15, r24	; 21
    1fe8:	08 95       	ret
    1fea:	41 30       	cpi	r20, 0x01	; 1
    1fec:	59 f4       	brne	.+22     	; 0x2004 <dio_vidConfigChannel+0xda>
    1fee:	21 b3       	in	r18, 0x11	; 17
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <dio_vidConfigChannel+0xd0>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	6a 95       	dec	r22
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <dio_vidConfigChannel+0xcc>
    1ffe:	82 2b       	or	r24, r18
    2000:	81 bb       	out	0x11, r24	; 17
    2002:	08 95       	ret
    2004:	21 b3       	in	r18, 0x11	; 17
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <dio_vidConfigChannel+0xe6>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	6a 95       	dec	r22
    2012:	e2 f7       	brpl	.-8      	; 0x200c <dio_vidConfigChannel+0xe2>
    2014:	80 95       	com	r24
    2016:	92 2f       	mov	r25, r18
    2018:	98 23       	and	r25, r24
    201a:	91 bb       	out	0x11, r25	; 17
    201c:	92 b3       	in	r25, 0x12	; 18
    201e:	89 23       	and	r24, r25
    2020:	82 bb       	out	0x12, r24	; 18
    2022:	08 95       	ret

00002024 <dio_vidWriteChannel>:
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	01 f1       	breq	.+64     	; 0x2068 <dio_vidWriteChannel+0x44>
    2028:	30 f0       	brcs	.+12     	; 0x2036 <dio_vidWriteChannel+0x12>
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	b1 f1       	breq	.+108    	; 0x209a <dio_vidWriteChannel+0x76>
    202e:	83 30       	cpi	r24, 0x03	; 3
    2030:	09 f4       	brne	.+2      	; 0x2034 <dio_vidWriteChannel+0x10>
    2032:	4c c0       	rjmp	.+152    	; 0x20cc <dio_vidWriteChannel+0xa8>
    2034:	08 95       	ret
    2036:	41 11       	cpse	r20, r1
    2038:	0c c0       	rjmp	.+24     	; 0x2052 <dio_vidWriteChannel+0x2e>
    203a:	2b b3       	in	r18, 0x1b	; 27
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <dio_vidWriteChannel+0x22>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	6a 95       	dec	r22
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <dio_vidWriteChannel+0x1e>
    204a:	80 95       	com	r24
    204c:	82 23       	and	r24, r18
    204e:	8b bb       	out	0x1b, r24	; 27
    2050:	08 95       	ret
    2052:	2b b3       	in	r18, 0x1b	; 27
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 c0       	rjmp	.+4      	; 0x205e <dio_vidWriteChannel+0x3a>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	6a 95       	dec	r22
    2060:	e2 f7       	brpl	.-8      	; 0x205a <dio_vidWriteChannel+0x36>
    2062:	82 2b       	or	r24, r18
    2064:	8b bb       	out	0x1b, r24	; 27
    2066:	08 95       	ret
    2068:	41 11       	cpse	r20, r1
    206a:	0c c0       	rjmp	.+24     	; 0x2084 <dio_vidWriteChannel+0x60>
    206c:	28 b3       	in	r18, 0x18	; 24
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <dio_vidWriteChannel+0x54>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	6a 95       	dec	r22
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <dio_vidWriteChannel+0x50>
    207c:	80 95       	com	r24
    207e:	82 23       	and	r24, r18
    2080:	88 bb       	out	0x18, r24	; 24
    2082:	08 95       	ret
    2084:	28 b3       	in	r18, 0x18	; 24
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <dio_vidWriteChannel+0x6c>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	6a 95       	dec	r22
    2092:	e2 f7       	brpl	.-8      	; 0x208c <dio_vidWriteChannel+0x68>
    2094:	82 2b       	or	r24, r18
    2096:	88 bb       	out	0x18, r24	; 24
    2098:	08 95       	ret
    209a:	41 11       	cpse	r20, r1
    209c:	0c c0       	rjmp	.+24     	; 0x20b6 <dio_vidWriteChannel+0x92>
    209e:	25 b3       	in	r18, 0x15	; 21
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <dio_vidWriteChannel+0x86>
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	6a 95       	dec	r22
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <dio_vidWriteChannel+0x82>
    20ae:	80 95       	com	r24
    20b0:	82 23       	and	r24, r18
    20b2:	85 bb       	out	0x15, r24	; 21
    20b4:	08 95       	ret
    20b6:	25 b3       	in	r18, 0x15	; 21
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <dio_vidWriteChannel+0x9e>
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	6a 95       	dec	r22
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <dio_vidWriteChannel+0x9a>
    20c6:	82 2b       	or	r24, r18
    20c8:	85 bb       	out	0x15, r24	; 21
    20ca:	08 95       	ret
    20cc:	41 11       	cpse	r20, r1
    20ce:	0c c0       	rjmp	.+24     	; 0x20e8 <dio_vidWriteChannel+0xc4>
    20d0:	22 b3       	in	r18, 0x12	; 18
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <dio_vidWriteChannel+0xb8>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	6a 95       	dec	r22
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <dio_vidWriteChannel+0xb4>
    20e0:	80 95       	com	r24
    20e2:	82 23       	and	r24, r18
    20e4:	82 bb       	out	0x12, r24	; 18
    20e6:	08 95       	ret
    20e8:	22 b3       	in	r18, 0x12	; 18
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <dio_vidWriteChannel+0xd0>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	6a 95       	dec	r22
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <dio_vidWriteChannel+0xcc>
    20f8:	82 2b       	or	r24, r18
    20fa:	82 bb       	out	0x12, r24	; 18
    20fc:	08 95       	ret

000020fe <dio_dioLevelReadChannel>:
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
	// Check Input Range
	if(channel >= DIO_PIN0 && channel <= DIO_PIN7)
    20fe:	68 30       	cpi	r22, 0x08	; 8
    2100:	60 f5       	brcc	.+88     	; 0x215a <dio_dioLevelReadChannel+0x5c>
	{
		switch(port)
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	79 f0       	breq	.+30     	; 0x2124 <dio_dioLevelReadChannel+0x26>
    2106:	28 f0       	brcs	.+10     	; 0x2112 <dio_dioLevelReadChannel+0x14>
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	a9 f0       	breq	.+42     	; 0x2136 <dio_dioLevelReadChannel+0x38>
    210c:	83 30       	cpi	r24, 0x03	; 3
    210e:	e1 f0       	breq	.+56     	; 0x2148 <dio_dioLevelReadChannel+0x4a>
    2110:	26 c0       	rjmp	.+76     	; 0x215e <dio_dioLevelReadChannel+0x60>
		{
			case DIO_PORTA :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINA_REG,channel);
    2112:	89 b3       	in	r24, 0x19	; 25
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	02 c0       	rjmp	.+4      	; 0x211c <dio_dioLevelReadChannel+0x1e>
    2118:	95 95       	asr	r25
    211a:	87 95       	ror	r24
    211c:	6a 95       	dec	r22
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <dio_dioLevelReadChannel+0x1a>
    2120:	81 70       	andi	r24, 0x01	; 1
				break ;
    2122:	08 95       	ret
			case DIO_PORTB : 
				LOC_u8PinValue =   CHECK_BIT(DIO_PINB_REG,channel);
    2124:	86 b3       	in	r24, 0x16	; 22
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	02 c0       	rjmp	.+4      	; 0x212e <dio_dioLevelReadChannel+0x30>
    212a:	95 95       	asr	r25
    212c:	87 95       	ror	r24
    212e:	6a 95       	dec	r22
    2130:	e2 f7       	brpl	.-8      	; 0x212a <dio_dioLevelReadChannel+0x2c>
    2132:	81 70       	andi	r24, 0x01	; 1
				break ;
    2134:	08 95       	ret
			case DIO_PORTC :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINC_REG,channel);
    2136:	83 b3       	in	r24, 0x13	; 19
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <dio_dioLevelReadChannel+0x42>
    213c:	95 95       	asr	r25
    213e:	87 95       	ror	r24
    2140:	6a 95       	dec	r22
    2142:	e2 f7       	brpl	.-8      	; 0x213c <dio_dioLevelReadChannel+0x3e>
    2144:	81 70       	andi	r24, 0x01	; 1
				break ;
    2146:	08 95       	ret
			case DIO_PORTD :
				LOC_u8PinValue =   CHECK_BIT(DIO_PIND_REG,channel);
    2148:	80 b3       	in	r24, 0x10	; 16
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <dio_dioLevelReadChannel+0x54>
    214e:	95 95       	asr	r25
    2150:	87 95       	ror	r24
    2152:	6a 95       	dec	r22
    2154:	e2 f7       	brpl	.-8      	; 0x214e <dio_dioLevelReadChannel+0x50>
    2156:	81 70       	andi	r24, 0x01	; 1
				break ;
    2158:	08 95       	ret
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	08 95       	ret
    215e:	81 e0       	ldi	r24, 0x01	; 1
				break ;
			default : break;
		}
	}
	return LOC_u8PinValue; 
}
    2160:	08 95       	ret

00002162 <EXTINT_voidEnable>:
	SET_BIT(SREG,SREG_GIE);
}
void EXTINT_voidGlobalIntDisable(void)
{
	/*	ENABLE GLOBAL INTTERUPT	*/
	CLR_BIT(SREG,SREG_GIE);
    2162:	8f 30       	cpi	r24, 0x0F	; 15
    2164:	41 f0       	breq	.+16     	; 0x2176 <EXTINT_voidEnable+0x14>
    2166:	8e 31       	cpi	r24, 0x1E	; 30
    2168:	51 f0       	breq	.+20     	; 0x217e <EXTINT_voidEnable+0x1c>
    216a:	81 11       	cpse	r24, r1
    216c:	0b c0       	rjmp	.+22     	; 0x2184 <EXTINT_voidEnable+0x22>
    216e:	8b b7       	in	r24, 0x3b	; 59
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	8b bf       	out	0x3b, r24	; 59
    2174:	08 95       	ret
    2176:	8b b7       	in	r24, 0x3b	; 59
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	8b bf       	out	0x3b, r24	; 59
    217c:	08 95       	ret
    217e:	8b b7       	in	r24, 0x3b	; 59
    2180:	80 62       	ori	r24, 0x20	; 32
    2182:	8b bf       	out	0x3b, r24	; 59
    2184:	08 95       	ret

00002186 <EXTINT_voidMode>:
    2186:	8f 30       	cpi	r24, 0x0F	; 15
    2188:	99 f1       	breq	.+102    	; 0x21f0 <EXTINT_voidMode+0x6a>
    218a:	8e 31       	cpi	r24, 0x1E	; 30
    218c:	09 f4       	brne	.+2      	; 0x2190 <EXTINT_voidMode+0xa>
    218e:	57 c0       	rjmp	.+174    	; 0x223e <EXTINT_voidMode+0xb8>
    2190:	81 11       	cpse	r24, r1
    2192:	61 c0       	rjmp	.+194    	; 0x2256 <EXTINT_voidMode+0xd0>
    2194:	41 15       	cp	r20, r1
    2196:	51 05       	cpc	r21, r1
    2198:	21 f0       	breq	.+8      	; 0x21a2 <EXTINT_voidMode+0x1c>
    219a:	50 93 8d 07 	sts	0x078D, r21	; 0x80078d <Callback_INT0+0x1>
    219e:	40 93 8c 07 	sts	0x078C, r20	; 0x80078c <Callback_INT0>
    21a2:	66 30       	cpi	r22, 0x06	; 6
    21a4:	81 f0       	breq	.+32     	; 0x21c6 <EXTINT_voidMode+0x40>
    21a6:	18 f4       	brcc	.+6      	; 0x21ae <EXTINT_voidMode+0x28>
    21a8:	63 30       	cpi	r22, 0x03	; 3
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <EXTINT_voidMode+0x32>
    21ac:	08 95       	ret
    21ae:	69 30       	cpi	r22, 0x09	; 9
    21b0:	89 f0       	breq	.+34     	; 0x21d4 <EXTINT_voidMode+0x4e>
    21b2:	6c 30       	cpi	r22, 0x0C	; 12
    21b4:	b1 f0       	breq	.+44     	; 0x21e2 <EXTINT_voidMode+0x5c>
    21b6:	08 95       	ret
    21b8:	85 b7       	in	r24, 0x35	; 53
    21ba:	8e 7f       	andi	r24, 0xFE	; 254
    21bc:	85 bf       	out	0x35, r24	; 53
    21be:	85 b7       	in	r24, 0x35	; 53
    21c0:	8d 7f       	andi	r24, 0xFD	; 253
    21c2:	85 bf       	out	0x35, r24	; 53
    21c4:	08 95       	ret
    21c6:	85 b7       	in	r24, 0x35	; 53
    21c8:	8e 7f       	andi	r24, 0xFE	; 254
    21ca:	85 bf       	out	0x35, r24	; 53
    21cc:	85 b7       	in	r24, 0x35	; 53
    21ce:	82 60       	ori	r24, 0x02	; 2
    21d0:	85 bf       	out	0x35, r24	; 53
    21d2:	08 95       	ret
    21d4:	85 b7       	in	r24, 0x35	; 53
    21d6:	81 60       	ori	r24, 0x01	; 1
    21d8:	85 bf       	out	0x35, r24	; 53
    21da:	85 b7       	in	r24, 0x35	; 53
    21dc:	82 60       	ori	r24, 0x02	; 2
    21de:	85 bf       	out	0x35, r24	; 53
    21e0:	08 95       	ret
    21e2:	85 b7       	in	r24, 0x35	; 53
    21e4:	8d 7f       	andi	r24, 0xFD	; 253
    21e6:	85 bf       	out	0x35, r24	; 53
    21e8:	85 b7       	in	r24, 0x35	; 53
    21ea:	81 60       	ori	r24, 0x01	; 1
    21ec:	85 bf       	out	0x35, r24	; 53
    21ee:	08 95       	ret
    21f0:	65 31       	cpi	r22, 0x15	; 21
    21f2:	81 f0       	breq	.+32     	; 0x2214 <EXTINT_voidMode+0x8e>
    21f4:	18 f4       	brcc	.+6      	; 0x21fc <EXTINT_voidMode+0x76>
    21f6:	62 31       	cpi	r22, 0x12	; 18
    21f8:	31 f0       	breq	.+12     	; 0x2206 <EXTINT_voidMode+0x80>
    21fa:	08 95       	ret
    21fc:	68 31       	cpi	r22, 0x18	; 24
    21fe:	89 f0       	breq	.+34     	; 0x2222 <EXTINT_voidMode+0x9c>
    2200:	6b 31       	cpi	r22, 0x1B	; 27
    2202:	b1 f0       	breq	.+44     	; 0x2230 <EXTINT_voidMode+0xaa>
    2204:	08 95       	ret
    2206:	85 b7       	in	r24, 0x35	; 53
    2208:	8b 7f       	andi	r24, 0xFB	; 251
    220a:	85 bf       	out	0x35, r24	; 53
    220c:	85 b7       	in	r24, 0x35	; 53
    220e:	87 7f       	andi	r24, 0xF7	; 247
    2210:	85 bf       	out	0x35, r24	; 53
    2212:	08 95       	ret
    2214:	85 b7       	in	r24, 0x35	; 53
    2216:	8b 7f       	andi	r24, 0xFB	; 251
    2218:	85 bf       	out	0x35, r24	; 53
    221a:	85 b7       	in	r24, 0x35	; 53
    221c:	88 60       	ori	r24, 0x08	; 8
    221e:	85 bf       	out	0x35, r24	; 53
    2220:	08 95       	ret
    2222:	85 b7       	in	r24, 0x35	; 53
    2224:	84 60       	ori	r24, 0x04	; 4
    2226:	85 bf       	out	0x35, r24	; 53
    2228:	85 b7       	in	r24, 0x35	; 53
    222a:	88 60       	ori	r24, 0x08	; 8
    222c:	85 bf       	out	0x35, r24	; 53
    222e:	08 95       	ret
    2230:	85 b7       	in	r24, 0x35	; 53
    2232:	87 7f       	andi	r24, 0xF7	; 247
    2234:	85 bf       	out	0x35, r24	; 53
    2236:	85 b7       	in	r24, 0x35	; 53
    2238:	84 60       	ori	r24, 0x04	; 4
    223a:	85 bf       	out	0x35, r24	; 53
    223c:	08 95       	ret
    223e:	61 32       	cpi	r22, 0x21	; 33
    2240:	19 f0       	breq	.+6      	; 0x2248 <EXTINT_voidMode+0xc2>
    2242:	64 32       	cpi	r22, 0x24	; 36
    2244:	29 f0       	breq	.+10     	; 0x2250 <EXTINT_voidMode+0xca>
    2246:	08 95       	ret
    2248:	84 b7       	in	r24, 0x34	; 52
    224a:	8f 7b       	andi	r24, 0xBF	; 191
    224c:	84 bf       	out	0x34, r24	; 52
    224e:	08 95       	ret
    2250:	84 b7       	in	r24, 0x34	; 52
    2252:	80 64       	ori	r24, 0x40	; 64
    2254:	84 bf       	out	0x34, r24	; 52
    2256:	08 95       	ret

00002258 <EXTINT_voidDisable>:
    2258:	8f 30       	cpi	r24, 0x0F	; 15
    225a:	41 f0       	breq	.+16     	; 0x226c <EXTINT_voidDisable+0x14>
    225c:	8e 31       	cpi	r24, 0x1E	; 30
    225e:	51 f0       	breq	.+20     	; 0x2274 <EXTINT_voidDisable+0x1c>
    2260:	81 11       	cpse	r24, r1
    2262:	0b c0       	rjmp	.+22     	; 0x227a <EXTINT_voidDisable+0x22>
    2264:	8b b7       	in	r24, 0x3b	; 59
    2266:	8f 7b       	andi	r24, 0xBF	; 191
    2268:	8b bf       	out	0x3b, r24	; 59
    226a:	08 95       	ret
    226c:	8b b7       	in	r24, 0x3b	; 59
    226e:	8f 77       	andi	r24, 0x7F	; 127
    2270:	8b bf       	out	0x3b, r24	; 59
    2272:	08 95       	ret
    2274:	8b b7       	in	r24, 0x3b	; 59
    2276:	8f 7d       	andi	r24, 0xDF	; 223
    2278:	8b bf       	out	0x3b, r24	; 59
    227a:	08 95       	ret

0000227c <EXTINT_voidGlobalIntEnable>:
    227c:	8f b7       	in	r24, 0x3f	; 63
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	8f bf       	out	0x3f, r24	; 63
    2282:	08 95       	ret

00002284 <__vector_1>:
	
		
}*/

ISR(INT0_vect)
{
    2284:	1f 92       	push	r1
    2286:	0f 92       	push	r0
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	0f 92       	push	r0
    228c:	11 24       	eor	r1, r1
    228e:	2f 93       	push	r18
    2290:	3f 93       	push	r19
    2292:	4f 93       	push	r20
    2294:	5f 93       	push	r21
    2296:	6f 93       	push	r22
    2298:	7f 93       	push	r23
    229a:	8f 93       	push	r24
    229c:	9f 93       	push	r25
    229e:	af 93       	push	r26
    22a0:	bf 93       	push	r27
    22a2:	ef 93       	push	r30
    22a4:	ff 93       	push	r31
	Callback_INT0();
    22a6:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <Callback_INT0>
    22aa:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <Callback_INT0+0x1>
    22ae:	09 95       	icall
    22b0:	ff 91       	pop	r31
    22b2:	ef 91       	pop	r30
    22b4:	bf 91       	pop	r27
    22b6:	af 91       	pop	r26
    22b8:	9f 91       	pop	r25
    22ba:	8f 91       	pop	r24
    22bc:	7f 91       	pop	r23
    22be:	6f 91       	pop	r22
    22c0:	5f 91       	pop	r21
    22c2:	4f 91       	pop	r20
    22c4:	3f 91       	pop	r19
    22c6:	2f 91       	pop	r18
    22c8:	0f 90       	pop	r0
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	0f 90       	pop	r0
    22ce:	1f 90       	pop	r1
    22d0:	18 95       	reti

000022d2 <I2C_Init>:

#include "I2C.h"

void I2C_Init(void)
{
	I2C_TWSR_REG=0x00;  // set prescaler bits  to zero
    22d2:	11 b8       	out	0x01, r1	; 1
	I2C_TWBR_REG=32;    // SCL freq. is 100k for XTAL=8M
    22d4:	80 e2       	ldi	r24, 0x20	; 32
    22d6:	80 b9       	out	0x00, r24	; 0
	I2C_TWCR_REG=0x04;
    22d8:	84 e0       	ldi	r24, 0x04	; 4
    22da:	86 bf       	out	0x36, r24	; 54
    22dc:	08 95       	ret

000022de <I2C_Start>:
} // enable TWI module

void I2C_Start(void){
	I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);
    22de:	84 ea       	ldi	r24, 0xA4	; 164
    22e0:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR_REG & (1<<TWINT))); 
    22e2:	06 b6       	in	r0, 0x36	; 54
    22e4:	07 fe       	sbrs	r0, 7
    22e6:	fd cf       	rjmp	.-6      	; 0x22e2 <I2C_Start+0x4>
}
    22e8:	08 95       	ret

000022ea <I2C_Stop>:

void I2C_Stop(void){
I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    22ea:	84 e9       	ldi	r24, 0x94	; 148
    22ec:	86 bf       	out	0x36, r24	; 54
    22ee:	08 95       	ret

000022f0 <I2C_Write>:
}

void I2C_Write(unsigned char data){
	I2C_TWDR_REG = data;
    22f0:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN) ;
    22f2:	84 e8       	ldi	r24, 0x84	; 132
    22f4:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR_REG & (1<<TWINT) ) ) ;
    22f6:	06 b6       	in	r0, 0x36	; 54
    22f8:	07 fe       	sbrs	r0, 7
    22fa:	fd cf       	rjmp	.-6      	; 0x22f6 <I2C_Write+0x6>
}
    22fc:	08 95       	ret

000022fe <I2C_Read>:

u8 I2C_Read(unsigned char ack)
{
	I2C_TWCR_REG = (1<<TWINT) | (1<<TWEN)|(ack<<TWEA) ;
    22fe:	20 e4       	ldi	r18, 0x40	; 64
    2300:	82 9f       	mul	r24, r18
    2302:	c0 01       	movw	r24, r0
    2304:	11 24       	eor	r1, r1
    2306:	84 68       	ori	r24, 0x84	; 132
    2308:	86 bf       	out	0x36, r24	; 54
	while (!(I2C_TWCR_REG & (1<<TWINT) ) ) ; 
    230a:	06 b6       	in	r0, 0x36	; 54
    230c:	07 fe       	sbrs	r0, 7
    230e:	fd cf       	rjmp	.-6      	; 0x230a <I2C_Read+0xc>
	return I2C_TWDR_REG; 
    2310:	83 b1       	in	r24, 0x03	; 3
}
    2312:	08 95       	ret

00002314 <PWM_voidInit>:
      
    else
    {
        // <TODO ERROR> DC OUT OF RANGE
    }
}
    2314:	fc 01       	movw	r30, r24
    2316:	80 81       	ld	r24, Z
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	89 f0       	breq	.+34     	; 0x233e <PWM_voidInit+0x2a>
    231c:	20 f0       	brcs	.+8      	; 0x2326 <PWM_voidInit+0x12>
    231e:	82 30       	cpi	r24, 0x02	; 2
    2320:	09 f4       	brne	.+2      	; 0x2324 <PWM_voidInit+0x10>
    2322:	5e c0       	rjmp	.+188    	; 0x23e0 <PWM_voidInit+0xcc>
    2324:	08 95       	ret
    2326:	93 b7       	in	r25, 0x33	; 51
    2328:	81 81       	ldd	r24, Z+1	; 0x01
    232a:	89 2b       	or	r24, r25
    232c:	83 bf       	out	0x33, r24	; 51
    232e:	83 b7       	in	r24, 0x33	; 51
    2330:	88 7f       	andi	r24, 0xF8	; 248
    2332:	83 bf       	out	0x33, r24	; 51
    2334:	93 b7       	in	r25, 0x33	; 51
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	89 2b       	or	r24, r25
    233a:	83 bf       	out	0x33, r24	; 51
    233c:	08 95       	ret
    233e:	9f b5       	in	r25, 0x2f	; 47
    2340:	81 81       	ldd	r24, Z+1	; 0x01
    2342:	83 70       	andi	r24, 0x03	; 3
    2344:	89 2b       	or	r24, r25
    2346:	8f bd       	out	0x2f, r24	; 47
    2348:	2e b5       	in	r18, 0x2e	; 46
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	96 95       	lsr	r25
    234e:	96 95       	lsr	r25
    2350:	89 2f       	mov	r24, r25
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	82 2b       	or	r24, r18
    2362:	8e bd       	out	0x2e, r24	; 46
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	82 30       	cpi	r24, 0x02	; 2
    2368:	c1 f0       	breq	.+48     	; 0x239a <PWM_voidInit+0x86>
    236a:	28 f4       	brcc	.+10     	; 0x2376 <PWM_voidInit+0x62>
    236c:	88 23       	and	r24, r24
    236e:	49 f0       	breq	.+18     	; 0x2382 <PWM_voidInit+0x6e>
    2370:	81 30       	cpi	r24, 0x01	; 1
    2372:	61 f0       	breq	.+24     	; 0x238c <PWM_voidInit+0x78>
    2374:	2d c0       	rjmp	.+90     	; 0x23d0 <PWM_voidInit+0xbc>
    2376:	84 30       	cpi	r24, 0x04	; 4
    2378:	f1 f0       	breq	.+60     	; 0x23b6 <PWM_voidInit+0xa2>
    237a:	b0 f0       	brcs	.+44     	; 0x23a8 <PWM_voidInit+0x94>
    237c:	85 30       	cpi	r24, 0x05	; 5
    237e:	11 f1       	breq	.+68     	; 0x23c4 <PWM_voidInit+0xb0>
    2380:	27 c0       	rjmp	.+78     	; 0x23d0 <PWM_voidInit+0xbc>
    2382:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <TIMER1_Prescaler+0x1>
    2386:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <TIMER1_Prescaler>
    238a:	22 c0       	rjmp	.+68     	; 0x23d0 <PWM_voidInit+0xbc>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <TIMER1_Prescaler+0x1>
    2394:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <TIMER1_Prescaler>
    2398:	1b c0       	rjmp	.+54     	; 0x23d0 <PWM_voidInit+0xbc>
    239a:	88 e0       	ldi	r24, 0x08	; 8
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <TIMER1_Prescaler+0x1>
    23a2:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <TIMER1_Prescaler>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <PWM_voidInit+0xbc>
    23a8:	80 e4       	ldi	r24, 0x40	; 64
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <TIMER1_Prescaler+0x1>
    23b0:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <TIMER1_Prescaler>
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <PWM_voidInit+0xbc>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <TIMER1_Prescaler+0x1>
    23be:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <TIMER1_Prescaler>
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <PWM_voidInit+0xbc>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <TIMER1_Prescaler+0x1>
    23cc:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <TIMER1_Prescaler>
    23d0:	8e b5       	in	r24, 0x2e	; 46
    23d2:	88 7f       	andi	r24, 0xF8	; 248
    23d4:	8e bd       	out	0x2e, r24	; 46
    23d6:	9e b5       	in	r25, 0x2e	; 46
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	89 2b       	or	r24, r25
    23dc:	8e bd       	out	0x2e, r24	; 46
    23de:	08 95       	ret
    23e0:	95 b5       	in	r25, 0x25	; 37
    23e2:	81 81       	ldd	r24, Z+1	; 0x01
    23e4:	89 2b       	or	r24, r25
    23e6:	85 bd       	out	0x25, r24	; 37
    23e8:	85 b5       	in	r24, 0x25	; 37
    23ea:	88 7f       	andi	r24, 0xF8	; 248
    23ec:	85 bd       	out	0x25, r24	; 37
    23ee:	95 b5       	in	r25, 0x25	; 37
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	89 2b       	or	r24, r25
    23f4:	85 bd       	out	0x25, r24	; 37
    23f6:	08 95       	ret

000023f8 <PWM_voidSetOCPin>:
    23f8:	fc 01       	movw	r30, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	41 f0       	breq	.+16     	; 0x2410 <PWM_voidSetOCPin+0x18>
    2400:	18 f0       	brcs	.+6      	; 0x2408 <PWM_voidSetOCPin+0x10>
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	49 f0       	breq	.+18     	; 0x2418 <PWM_voidSetOCPin+0x20>
    2406:	08 95       	ret
    2408:	83 b7       	in	r24, 0x33	; 51
    240a:	68 2b       	or	r22, r24
    240c:	63 bf       	out	0x33, r22	; 51
    240e:	08 95       	ret
    2410:	8f b5       	in	r24, 0x2f	; 47
    2412:	68 2b       	or	r22, r24
    2414:	6f bd       	out	0x2f, r22	; 47
    2416:	08 95       	ret
    2418:	85 b5       	in	r24, 0x25	; 37
    241a:	68 2b       	or	r22, r24
    241c:	65 bd       	out	0x25, r22	; 37
    241e:	08 95       	ret

00002420 <PWM_voidPhaseFrequencyCorrectSetValues>:
else
{
    // ANTI GLITCH DISABLED 
    // GOTO ANTI GLITCH MODE BY 
    // SET WGM13 = 1    WGM12=0    WGM11=0      WGM10=0 
    SET_BIT(TIM_TCCR1B,TCCR1B_WGM13);
    2420:	8e b5       	in	r24, 0x2e	; 46
    2422:	80 61       	ori	r24, 0x10	; 16
    2424:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TIM_TCCR1B,TCCR1B_WGM12);
    2426:	8e b5       	in	r24, 0x2e	; 46
    2428:	87 7f       	andi	r24, 0xF7	; 247
    242a:	8e bd       	out	0x2e, r24	; 46
    CLR_BIT(TIM_TCCR1A,TCCR1A_WGM10);
    242c:	8f b5       	in	r24, 0x2f	; 47
    242e:	8e 7f       	andi	r24, 0xFE	; 254
    2430:	8f bd       	out	0x2f, r24	; 47
    CLR_BIT(TIM_TCCR1A,TCCR1A_WGM11);
    2432:	8f b5       	in	r24, 0x2f	; 47
    2434:	8d 7f       	andi	r24, 0xFD	; 253
    2436:	8f bd       	out	0x2f, r24	; 47
    // Calculation and set OCR1A as a Top NOT This Freq During Up-Down Count so we need Half of it to calc TOP val
    TIM_ICR1 = copy_u16TopValue ;
    2438:	57 bd       	out	0x27, r21	; 39
    243a:	46 bd       	out	0x26, r20	; 38
    /*	CHK WHICH PIN USED	*/
    if(setOCpinMode == PWM1_PD4_FM_NON_INVERTING ||setOCpinMode == PWM1_PD4_FM_INVERTING )
    243c:	60 32       	cpi	r22, 0x20	; 32
    243e:	11 f0       	breq	.+4      	; 0x2444 <PWM_voidPhaseFrequencyCorrectSetValues+0x24>
    2440:	60 33       	cpi	r22, 0x30	; 48
    2442:	19 f4       	brne	.+6      	; 0x244a <PWM_voidPhaseFrequencyCorrectSetValues+0x2a>
    {
            TIM_OCR1B = copy_u16CompValue ; 				
    2444:	39 bd       	out	0x29, r19	; 41
    2446:	28 bd       	out	0x28, r18	; 40
    2448:	08 95       	ret

    }
    else if (setOCpinMode == PWM1_PD5_FM_NON_INVERTING ||setOCpinMode == PWM1_PD5_FM_INVERTING)
    244a:	60 38       	cpi	r22, 0x80	; 128
    244c:	11 f0       	breq	.+4      	; 0x2452 <PWM_voidPhaseFrequencyCorrectSetValues+0x32>
    244e:	60 3c       	cpi	r22, 0xC0	; 192
    2450:	11 f4       	brne	.+4      	; 0x2456 <PWM_voidPhaseFrequencyCorrectSetValues+0x36>
    {
        TIM_OCR1A = copy_u16CompValue ; 				
    2452:	3b bd       	out	0x2b, r19	; 43
    2454:	2a bd       	out	0x2a, r18	; 42
    2456:	08 95       	ret

00002458 <SLEEP_MODEvoidEnable>:
#include "SLEEP_MODE.h"


void SLEEP_MODEvoidEnable(u8 mode)
{
		MCUCR_reg|=(mode<<4);
    2458:	25 b7       	in	r18, 0x35	; 53
    245a:	30 e1       	ldi	r19, 0x10	; 16
    245c:	83 9f       	mul	r24, r19
    245e:	c0 01       	movw	r24, r0
    2460:	11 24       	eor	r1, r1
    2462:	82 2b       	or	r24, r18
    2464:	85 bf       	out	0x35, r24	; 53
		MCUCR_reg|=(1<<7);
    2466:	85 b7       	in	r24, 0x35	; 53
    2468:	80 68       	ori	r24, 0x80	; 128
    246a:	85 bf       	out	0x35, r24	; 53
    246c:	08 95       	ret

0000246e <Timer_voidInitTimer2>:
        // <TODO ERROR> This Feature supported only for timer1
    }
}
void Timer_voidGetFlagsRegStatus(u8 * ptr_u8Reg)
{
	* ptr_u8Reg = TIM_TIFR ; 
    246e:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <GLOBAL_ptrToTimer2UserConf+0x1>
    2472:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <GLOBAL_ptrToTimer2UserConf>
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	09 f4       	brne	.+2      	; 0x247c <Timer_voidInitTimer2+0xe>
    247a:	6e c0       	rjmp	.+220    	; 0x2558 <Timer_voidInitTimer2+0xea>
    247c:	fc 01       	movw	r30, r24
    247e:	80 81       	ld	r24, Z
    2480:	88 23       	and	r24, r24
    2482:	d1 f0       	breq	.+52     	; 0x24b8 <Timer_voidInitTimer2+0x4a>
    2484:	89 b7       	in	r24, 0x39	; 57
    2486:	8f 77       	andi	r24, 0x7F	; 127
    2488:	89 bf       	out	0x39, r24	; 57
    248a:	89 b7       	in	r24, 0x39	; 57
    248c:	8f 7b       	andi	r24, 0xBF	; 191
    248e:	89 bf       	out	0x39, r24	; 57
    2490:	82 b5       	in	r24, 0x22	; 34
    2492:	88 60       	ori	r24, 0x08	; 8
    2494:	82 bd       	out	0x22, r24	; 34
    2496:	14 bc       	out	0x24, r1	; 36
    2498:	15 bc       	out	0x25, r1	; 37
    249a:	82 b5       	in	r24, 0x22	; 34
    249c:	85 70       	andi	r24, 0x05	; 5
    249e:	e9 f7       	brne	.-6      	; 0x249a <Timer_voidInitTimer2+0x2c>
    24a0:	95 b5       	in	r25, 0x25	; 37
    24a2:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <GLOBAL_ptrToTimer2UserConf>
    24a6:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <GLOBAL_ptrToTimer2UserConf+0x1>
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	89 2b       	or	r24, r25
    24ae:	85 bd       	out	0x25, r24	; 37
    24b0:	02 b4       	in	r0, 0x22	; 34
    24b2:	00 fc       	sbrc	r0, 0
    24b4:	fd cf       	rjmp	.-6      	; 0x24b0 <Timer_voidInitTimer2+0x42>
    24b6:	0c c0       	rjmp	.+24     	; 0x24d0 <Timer_voidInitTimer2+0x62>
    24b8:	15 bc       	out	0x25, r1	; 37
    24ba:	95 b5       	in	r25, 0x25	; 37
    24bc:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <GLOBAL_ptrToTimer2UserConf>
    24c0:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <GLOBAL_ptrToTimer2UserConf+0x1>
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	89 2b       	or	r24, r25
    24c8:	85 bd       	out	0x25, r24	; 37
    24ca:	82 b5       	in	r24, 0x22	; 34
    24cc:	87 7f       	andi	r24, 0xF7	; 247
    24ce:	82 bd       	out	0x22, r24	; 34
    24d0:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <GLOBAL_ptrToTimer2UserConf>
    24d4:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <GLOBAL_ptrToTimer2UserConf+0x1>
    24d8:	e1 81       	ldd	r30, Z+1	; 0x01
    24da:	8e 2f       	mov	r24, r30
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	88 30       	cpi	r24, 0x08	; 8
    24e0:	91 05       	cpc	r25, r1
    24e2:	d0 f5       	brcc	.+116    	; 0x2558 <Timer_voidInitTimer2+0xea>
    24e4:	fc 01       	movw	r30, r24
    24e6:	e6 5d       	subi	r30, 0xD6	; 214
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__tablejump2__>
    24ee:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <Timer2Prescaler+0x1>
    24f2:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <Timer2Prescaler>
    24f6:	08 95       	ret
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    2500:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    2504:	08 95       	ret
    2506:	88 e0       	ldi	r24, 0x08	; 8
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    250e:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    2512:	08 95       	ret
    2514:	80 e2       	ldi	r24, 0x20	; 32
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    251c:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    2520:	08 95       	ret
    2522:	80 e4       	ldi	r24, 0x40	; 64
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    252a:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    252e:	08 95       	ret
    2530:	80 e8       	ldi	r24, 0x80	; 128
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    2538:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    253c:	08 95       	ret
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    2546:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    254a:	08 95       	ret
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	94 e0       	ldi	r25, 0x04	; 4
    2550:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <Timer2Prescaler+0x1>
    2554:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <Timer2Prescaler>
    2558:	08 95       	ret

0000255a <Timer_voidStopTimer>:
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	41 f0       	breq	.+16     	; 0x256e <Timer_voidStopTimer+0x14>
    255e:	18 f0       	brcs	.+6      	; 0x2566 <Timer_voidStopTimer+0xc>
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	49 f0       	breq	.+18     	; 0x2576 <Timer_voidStopTimer+0x1c>
    2564:	08 95       	ret
    2566:	83 b7       	in	r24, 0x33	; 51
    2568:	88 7f       	andi	r24, 0xF8	; 248
    256a:	83 bf       	out	0x33, r24	; 51
    256c:	08 95       	ret
    256e:	8e b5       	in	r24, 0x2e	; 46
    2570:	88 7f       	andi	r24, 0xF8	; 248
    2572:	8e bd       	out	0x2e, r24	; 46
    2574:	08 95       	ret
    2576:	85 b5       	in	r24, 0x25	; 37
    2578:	88 7f       	andi	r24, 0xF8	; 248
    257a:	85 bd       	out	0x25, r24	; 37
    257c:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <GLOBAL_ptrToTimer2UserConf>
    2580:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <GLOBAL_ptrToTimer2UserConf+0x1>
    2584:	80 81       	ld	r24, Z
    2586:	88 23       	and	r24, r24
    2588:	19 f0       	breq	.+6      	; 0x2590 <Timer_voidStopTimer+0x36>
    258a:	02 b4       	in	r0, 0x22	; 34
    258c:	00 fc       	sbrc	r0, 0
    258e:	fd cf       	rjmp	.-6      	; 0x258a <Timer_voidStopTimer+0x30>
    2590:	08 95       	ret

00002592 <__vector_19>:
}
/******************************************************************************
* Private Function Definitions
*******************************************************************************/
void __vector_19(void)
{
    2592:	1f 92       	push	r1
    2594:	0f 92       	push	r0
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	0f 92       	push	r0
    259a:	11 24       	eor	r1, r1
    259c:	2f 93       	push	r18
    259e:	3f 93       	push	r19
    25a0:	4f 93       	push	r20
    25a2:	5f 93       	push	r21
    25a4:	6f 93       	push	r22
    25a6:	7f 93       	push	r23
    25a8:	8f 93       	push	r24
    25aa:	9f 93       	push	r25
    25ac:	af 93       	push	r26
    25ae:	bf 93       	push	r27
    25b0:	ef 93       	push	r30
    25b2:	ff 93       	push	r31
    static u16 copy_u16NumberofOverflows = 0 ;  
    if(Global_u8Timer0Interval == PERIODIC)
    25b4:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <Global_u8Timer0Interval>
    25b8:	81 11       	cpse	r24, r1
    25ba:	1b c0       	rjmp	.+54     	; 0x25f2 <__vector_19+0x60>
    {
        // Default 
       if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
    25bc:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <copy_u16NumberofOverflows.2017>
    25c0:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <copy_u16NumberofOverflows.2017+0x1>
    25c4:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <Global_u16NumberOfOverflowsInCTC>
    25c8:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <Global_u16NumberOfOverflowsInCTC+0x1>
    25cc:	82 17       	cp	r24, r18
    25ce:	93 07       	cpc	r25, r19
    25d0:	30 f4       	brcc	.+12     	; 0x25de <__vector_19+0x4c>
        {
            copy_u16NumberofOverflows++  ;     
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <copy_u16NumberofOverflows.2017+0x1>
    25d8:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <copy_u16NumberofOverflows.2017>
    25dc:	3a c0       	rjmp	.+116    	; 0x2652 <__vector_19+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Periodic(); 
    25de:	e0 91 d2 07 	lds	r30, 0x07D2	; 0x8007d2 <TIMER0_CTC_CallBack_Periodic>
    25e2:	f0 91 d3 07 	lds	r31, 0x07D3	; 0x8007d3 <TIMER0_CTC_CallBack_Periodic+0x1>
    25e6:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
    25e8:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <copy_u16NumberofOverflows.2017+0x1>
    25ec:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <copy_u16NumberofOverflows.2017>
    25f0:	30 c0       	rjmp	.+96     	; 0x2652 <__vector_19+0xc0>
        }   
    }
    else if(Global_u8Timer0Interval == SINGLE)
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	f1 f4       	brne	.+60     	; 0x2632 <__vector_19+0xa0>
    {
        //Single 
        if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
    25f6:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <copy_u16NumberofOverflows.2017>
    25fa:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <copy_u16NumberofOverflows.2017+0x1>
    25fe:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <Global_u16NumberOfOverflowsInCTC>
    2602:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <Global_u16NumberOfOverflowsInCTC+0x1>
    2606:	82 17       	cp	r24, r18
    2608:	93 07       	cpc	r25, r19
    260a:	30 f4       	brcc	.+12     	; 0x2618 <__vector_19+0x86>
        {
            copy_u16NumberofOverflows++  ;     
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <copy_u16NumberofOverflows.2017+0x1>
    2612:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <copy_u16NumberofOverflows.2017>
    2616:	1d c0       	rjmp	.+58     	; 0x2652 <__vector_19+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Single(); 
    2618:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <TIMER0_CTC_CallBack_Single>
    261c:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <TIMER0_CTC_CallBack_Single+0x1>
    2620:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
    2622:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <copy_u16NumberofOverflows.2017+0x1>
    2626:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <copy_u16NumberofOverflows.2017>
			Timer_voidStopTimer(TIMER0);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0e 94 ad 12 	call	0x255a	; 0x255a <Timer_voidStopTimer>
    2630:	10 c0       	rjmp	.+32     	; 0x2652 <__vector_19+0xc0>
        }
    }
    else
    {
        // PWM Mode
        if(Global_u8PWM_State == PWM_HIGH_PER)
    2632:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <Global_u8PWM_State>
    2636:	81 11       	cpse	r24, r1
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <__vector_19+0xb6>
        {
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Toff ;
    263a:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <Global_u8PWM_Toff>
    263e:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_LOW_PER ; 
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <Global_u8PWM_State>
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <__vector_19+0xc0>
        }
        else
        {            
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Ton ;
    2648:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <Global_u8PWM_Ton>
    264c:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_HIGH_PER ;
    264e:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <Global_u8PWM_State>
        }
    }
    //Clear Compare Match Interrupt Fag
    TIM_TIFR = (1<<TIFR_OCF0);
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	88 bf       	out	0x38, r24	; 56
}
    2656:	ff 91       	pop	r31
    2658:	ef 91       	pop	r30
    265a:	bf 91       	pop	r27
    265c:	af 91       	pop	r26
    265e:	9f 91       	pop	r25
    2660:	8f 91       	pop	r24
    2662:	7f 91       	pop	r23
    2664:	6f 91       	pop	r22
    2666:	5f 91       	pop	r21
    2668:	4f 91       	pop	r20
    266a:	3f 91       	pop	r19
    266c:	2f 91       	pop	r18
    266e:	0f 90       	pop	r0
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	0f 90       	pop	r0
    2674:	1f 90       	pop	r1
    2676:	18 95       	reti

00002678 <__vector_9>:

void __vector_9(void)
{
    2678:	1f 92       	push	r1
    267a:	0f 92       	push	r0
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	0f 92       	push	r0
    2680:	11 24       	eor	r1, r1
    2682:	2f 93       	push	r18
    2684:	3f 93       	push	r19
    2686:	4f 93       	push	r20
    2688:	5f 93       	push	r21
    268a:	6f 93       	push	r22
    268c:	7f 93       	push	r23
    268e:	8f 93       	push	r24
    2690:	9f 93       	push	r25
    2692:	af 93       	push	r26
    2694:	bf 93       	push	r27
    2696:	ef 93       	push	r30
    2698:	ff 93       	push	r31
	TIMER0_OV_CallBack();
    269a:	e0 91 d0 07 	lds	r30, 0x07D0	; 0x8007d0 <TIMER0_OV_CallBack>
    269e:	f0 91 d1 07 	lds	r31, 0x07D1	; 0x8007d1 <TIMER0_OV_CallBack+0x1>
    26a2:	09 95       	icall


    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV0);
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	88 bf       	out	0x38, r24	; 56
}
    26a8:	ff 91       	pop	r31
    26aa:	ef 91       	pop	r30
    26ac:	bf 91       	pop	r27
    26ae:	af 91       	pop	r26
    26b0:	9f 91       	pop	r25
    26b2:	8f 91       	pop	r24
    26b4:	7f 91       	pop	r23
    26b6:	6f 91       	pop	r22
    26b8:	5f 91       	pop	r21
    26ba:	4f 91       	pop	r20
    26bc:	3f 91       	pop	r19
    26be:	2f 91       	pop	r18
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	0f 90       	pop	r0
    26c6:	1f 90       	pop	r1
    26c8:	18 95       	reti

000026ca <__vector_8>:
        }
    }
    return (copy_u16MaxCounterVal- 20 + LOC_u8Index ) ;
}
void __vector_8(void)
{
    26ca:	1f 92       	push	r1
    26cc:	0f 92       	push	r0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	0f 92       	push	r0
    26d2:	11 24       	eor	r1, r1
    26d4:	2f 93       	push	r18
    26d6:	3f 93       	push	r19
    26d8:	4f 93       	push	r20
    26da:	5f 93       	push	r21
    26dc:	6f 93       	push	r22
    26de:	7f 93       	push	r23
    26e0:	8f 93       	push	r24
    26e2:	9f 93       	push	r25
    26e4:	af 93       	push	r26
    26e6:	bf 93       	push	r27
    26e8:	ef 93       	push	r30
    26ea:	ff 93       	push	r31
    TIMER1_OV_CallBack(); 
    26ec:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <TIMER1_OV_CallBack>
    26f0:	f0 91 cb 07 	lds	r31, 0x07CB	; 0x8007cb <TIMER1_OV_CallBack+0x1>
    26f4:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV1);
    26f6:	84 e0       	ldi	r24, 0x04	; 4
    26f8:	88 bf       	out	0x38, r24	; 56
}
    26fa:	ff 91       	pop	r31
    26fc:	ef 91       	pop	r30
    26fe:	bf 91       	pop	r27
    2700:	af 91       	pop	r26
    2702:	9f 91       	pop	r25
    2704:	8f 91       	pop	r24
    2706:	7f 91       	pop	r23
    2708:	6f 91       	pop	r22
    270a:	5f 91       	pop	r21
    270c:	4f 91       	pop	r20
    270e:	3f 91       	pop	r19
    2710:	2f 91       	pop	r18
    2712:	0f 90       	pop	r0
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	0f 90       	pop	r0
    2718:	1f 90       	pop	r1
    271a:	18 95       	reti

0000271c <__vector_4>:
void __vector_4(void)
{
    271c:	1f 92       	push	r1
    271e:	0f 92       	push	r0
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	0f 92       	push	r0
    2724:	11 24       	eor	r1, r1
    2726:	2f 93       	push	r18
    2728:	3f 93       	push	r19
    272a:	4f 93       	push	r20
    272c:	5f 93       	push	r21
    272e:	6f 93       	push	r22
    2730:	7f 93       	push	r23
    2732:	8f 93       	push	r24
    2734:	9f 93       	push	r25
    2736:	af 93       	push	r26
    2738:	bf 93       	push	r27
    273a:	ef 93       	push	r30
    273c:	ff 93       	push	r31
    TIMER2_OV_CallBack(); 
    273e:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <TIMER2_OV_CallBack>
    2742:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <TIMER2_OV_CallBack+0x1>
    2746:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV2);
    2748:	80 e4       	ldi	r24, 0x40	; 64
    274a:	88 bf       	out	0x38, r24	; 56
}
    274c:	ff 91       	pop	r31
    274e:	ef 91       	pop	r30
    2750:	bf 91       	pop	r27
    2752:	af 91       	pop	r26
    2754:	9f 91       	pop	r25
    2756:	8f 91       	pop	r24
    2758:	7f 91       	pop	r23
    275a:	6f 91       	pop	r22
    275c:	5f 91       	pop	r21
    275e:	4f 91       	pop	r20
    2760:	3f 91       	pop	r19
    2762:	2f 91       	pop	r18
    2764:	0f 90       	pop	r0
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	0f 90       	pop	r0
    276a:	1f 90       	pop	r1
    276c:	18 95       	reti

0000276e <__vector_5>:
void __vector_5(void)
{
    276e:	1f 92       	push	r1
    2770:	0f 92       	push	r0
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	0f 92       	push	r0
    2776:	11 24       	eor	r1, r1
    2778:	2f 93       	push	r18
    277a:	3f 93       	push	r19
    277c:	4f 93       	push	r20
    277e:	5f 93       	push	r21
    2780:	6f 93       	push	r22
    2782:	7f 93       	push	r23
    2784:	8f 93       	push	r24
    2786:	9f 93       	push	r25
    2788:	af 93       	push	r26
    278a:	bf 93       	push	r27
    278c:	ef 93       	push	r30
    278e:	ff 93       	push	r31
	TIMER1_IC_Callback();
    2790:	e0 91 c8 07 	lds	r30, 0x07C8	; 0x8007c8 <TIMER1_IC_Callback>
    2794:	f0 91 c9 07 	lds	r31, 0x07C9	; 0x8007c9 <TIMER1_IC_Callback+0x1>
    2798:	09 95       	icall
    TIM_TIFR=(1<<TIFR_ICF1);
    279a:	80 e2       	ldi	r24, 0x20	; 32
    279c:	88 bf       	out	0x38, r24	; 56
}
    279e:	ff 91       	pop	r31
    27a0:	ef 91       	pop	r30
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	0f 90       	pop	r0
    27bc:	1f 90       	pop	r1
    27be:	18 95       	reti

000027c0 <__subsf3>:
    27c0:	50 58       	subi	r21, 0x80	; 128

000027c2 <__addsf3>:
    27c2:	bb 27       	eor	r27, r27
    27c4:	aa 27       	eor	r26, r26
    27c6:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__addsf3x>
    27ca:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__fp_round>
    27ce:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__fp_pscA>
    27d2:	38 f0       	brcs	.+14     	; 0x27e2 <__addsf3+0x20>
    27d4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_pscB>
    27d8:	20 f0       	brcs	.+8      	; 0x27e2 <__addsf3+0x20>
    27da:	39 f4       	brne	.+14     	; 0x27ea <__addsf3+0x28>
    27dc:	9f 3f       	cpi	r25, 0xFF	; 255
    27de:	19 f4       	brne	.+6      	; 0x27e6 <__addsf3+0x24>
    27e0:	26 f4       	brtc	.+8      	; 0x27ea <__addsf3+0x28>
    27e2:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_nan>
    27e6:	0e f4       	brtc	.+2      	; 0x27ea <__addsf3+0x28>
    27e8:	e0 95       	com	r30
    27ea:	e7 fb       	bst	r30, 7
    27ec:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__fp_inf>

000027f0 <__addsf3x>:
    27f0:	e9 2f       	mov	r30, r25
    27f2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_split3>
    27f6:	58 f3       	brcs	.-42     	; 0x27ce <__addsf3+0xc>
    27f8:	ba 17       	cp	r27, r26
    27fa:	62 07       	cpc	r22, r18
    27fc:	73 07       	cpc	r23, r19
    27fe:	84 07       	cpc	r24, r20
    2800:	95 07       	cpc	r25, r21
    2802:	20 f0       	brcs	.+8      	; 0x280c <__addsf3x+0x1c>
    2804:	79 f4       	brne	.+30     	; 0x2824 <__addsf3x+0x34>
    2806:	a6 f5       	brtc	.+104    	; 0x2870 <__addsf3x+0x80>
    2808:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__fp_zero>
    280c:	0e f4       	brtc	.+2      	; 0x2810 <__addsf3x+0x20>
    280e:	e0 95       	com	r30
    2810:	0b 2e       	mov	r0, r27
    2812:	ba 2f       	mov	r27, r26
    2814:	a0 2d       	mov	r26, r0
    2816:	0b 01       	movw	r0, r22
    2818:	b9 01       	movw	r22, r18
    281a:	90 01       	movw	r18, r0
    281c:	0c 01       	movw	r0, r24
    281e:	ca 01       	movw	r24, r20
    2820:	a0 01       	movw	r20, r0
    2822:	11 24       	eor	r1, r1
    2824:	ff 27       	eor	r31, r31
    2826:	59 1b       	sub	r21, r25
    2828:	99 f0       	breq	.+38     	; 0x2850 <__addsf3x+0x60>
    282a:	59 3f       	cpi	r21, 0xF9	; 249
    282c:	50 f4       	brcc	.+20     	; 0x2842 <__addsf3x+0x52>
    282e:	50 3e       	cpi	r21, 0xE0	; 224
    2830:	68 f1       	brcs	.+90     	; 0x288c <__addsf3x+0x9c>
    2832:	1a 16       	cp	r1, r26
    2834:	f0 40       	sbci	r31, 0x00	; 0
    2836:	a2 2f       	mov	r26, r18
    2838:	23 2f       	mov	r18, r19
    283a:	34 2f       	mov	r19, r20
    283c:	44 27       	eor	r20, r20
    283e:	58 5f       	subi	r21, 0xF8	; 248
    2840:	f3 cf       	rjmp	.-26     	; 0x2828 <__addsf3x+0x38>
    2842:	46 95       	lsr	r20
    2844:	37 95       	ror	r19
    2846:	27 95       	ror	r18
    2848:	a7 95       	ror	r26
    284a:	f0 40       	sbci	r31, 0x00	; 0
    284c:	53 95       	inc	r21
    284e:	c9 f7       	brne	.-14     	; 0x2842 <__addsf3x+0x52>
    2850:	7e f4       	brtc	.+30     	; 0x2870 <__addsf3x+0x80>
    2852:	1f 16       	cp	r1, r31
    2854:	ba 0b       	sbc	r27, r26
    2856:	62 0b       	sbc	r22, r18
    2858:	73 0b       	sbc	r23, r19
    285a:	84 0b       	sbc	r24, r20
    285c:	ba f0       	brmi	.+46     	; 0x288c <__addsf3x+0x9c>
    285e:	91 50       	subi	r25, 0x01	; 1
    2860:	a1 f0       	breq	.+40     	; 0x288a <__addsf3x+0x9a>
    2862:	ff 0f       	add	r31, r31
    2864:	bb 1f       	adc	r27, r27
    2866:	66 1f       	adc	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	88 1f       	adc	r24, r24
    286c:	c2 f7       	brpl	.-16     	; 0x285e <__addsf3x+0x6e>
    286e:	0e c0       	rjmp	.+28     	; 0x288c <__addsf3x+0x9c>
    2870:	ba 0f       	add	r27, r26
    2872:	62 1f       	adc	r22, r18
    2874:	73 1f       	adc	r23, r19
    2876:	84 1f       	adc	r24, r20
    2878:	48 f4       	brcc	.+18     	; 0x288c <__addsf3x+0x9c>
    287a:	87 95       	ror	r24
    287c:	77 95       	ror	r23
    287e:	67 95       	ror	r22
    2880:	b7 95       	ror	r27
    2882:	f7 95       	ror	r31
    2884:	9e 3f       	cpi	r25, 0xFE	; 254
    2886:	08 f0       	brcs	.+2      	; 0x288a <__addsf3x+0x9a>
    2888:	b0 cf       	rjmp	.-160    	; 0x27ea <__addsf3+0x28>
    288a:	93 95       	inc	r25
    288c:	88 0f       	add	r24, r24
    288e:	08 f0       	brcs	.+2      	; 0x2892 <__addsf3x+0xa2>
    2890:	99 27       	eor	r25, r25
    2892:	ee 0f       	add	r30, r30
    2894:	97 95       	ror	r25
    2896:	87 95       	ror	r24
    2898:	08 95       	ret

0000289a <__divsf3>:
    289a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__divsf3x>
    289e:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__fp_round>
    28a2:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_pscB>
    28a6:	58 f0       	brcs	.+22     	; 0x28be <__divsf3+0x24>
    28a8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__fp_pscA>
    28ac:	40 f0       	brcs	.+16     	; 0x28be <__divsf3+0x24>
    28ae:	29 f4       	brne	.+10     	; 0x28ba <__divsf3+0x20>
    28b0:	5f 3f       	cpi	r21, 0xFF	; 255
    28b2:	29 f0       	breq	.+10     	; 0x28be <__divsf3+0x24>
    28b4:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__fp_inf>
    28b8:	51 11       	cpse	r21, r1
    28ba:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__fp_szero>
    28be:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_nan>

000028c2 <__divsf3x>:
    28c2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_split3>
    28c6:	68 f3       	brcs	.-38     	; 0x28a2 <__divsf3+0x8>

000028c8 <__divsf3_pse>:
    28c8:	99 23       	and	r25, r25
    28ca:	b1 f3       	breq	.-20     	; 0x28b8 <__divsf3+0x1e>
    28cc:	55 23       	and	r21, r21
    28ce:	91 f3       	breq	.-28     	; 0x28b4 <__divsf3+0x1a>
    28d0:	95 1b       	sub	r25, r21
    28d2:	55 0b       	sbc	r21, r21
    28d4:	bb 27       	eor	r27, r27
    28d6:	aa 27       	eor	r26, r26
    28d8:	62 17       	cp	r22, r18
    28da:	73 07       	cpc	r23, r19
    28dc:	84 07       	cpc	r24, r20
    28de:	38 f0       	brcs	.+14     	; 0x28ee <__divsf3_pse+0x26>
    28e0:	9f 5f       	subi	r25, 0xFF	; 255
    28e2:	5f 4f       	sbci	r21, 0xFF	; 255
    28e4:	22 0f       	add	r18, r18
    28e6:	33 1f       	adc	r19, r19
    28e8:	44 1f       	adc	r20, r20
    28ea:	aa 1f       	adc	r26, r26
    28ec:	a9 f3       	breq	.-22     	; 0x28d8 <__divsf3_pse+0x10>
    28ee:	35 d0       	rcall	.+106    	; 0x295a <__divsf3_pse+0x92>
    28f0:	0e 2e       	mov	r0, r30
    28f2:	3a f0       	brmi	.+14     	; 0x2902 <__divsf3_pse+0x3a>
    28f4:	e0 e8       	ldi	r30, 0x80	; 128
    28f6:	32 d0       	rcall	.+100    	; 0x295c <__divsf3_pse+0x94>
    28f8:	91 50       	subi	r25, 0x01	; 1
    28fa:	50 40       	sbci	r21, 0x00	; 0
    28fc:	e6 95       	lsr	r30
    28fe:	00 1c       	adc	r0, r0
    2900:	ca f7       	brpl	.-14     	; 0x28f4 <__divsf3_pse+0x2c>
    2902:	2b d0       	rcall	.+86     	; 0x295a <__divsf3_pse+0x92>
    2904:	fe 2f       	mov	r31, r30
    2906:	29 d0       	rcall	.+82     	; 0x295a <__divsf3_pse+0x92>
    2908:	66 0f       	add	r22, r22
    290a:	77 1f       	adc	r23, r23
    290c:	88 1f       	adc	r24, r24
    290e:	bb 1f       	adc	r27, r27
    2910:	26 17       	cp	r18, r22
    2912:	37 07       	cpc	r19, r23
    2914:	48 07       	cpc	r20, r24
    2916:	ab 07       	cpc	r26, r27
    2918:	b0 e8       	ldi	r27, 0x80	; 128
    291a:	09 f0       	breq	.+2      	; 0x291e <__divsf3_pse+0x56>
    291c:	bb 0b       	sbc	r27, r27
    291e:	80 2d       	mov	r24, r0
    2920:	bf 01       	movw	r22, r30
    2922:	ff 27       	eor	r31, r31
    2924:	93 58       	subi	r25, 0x83	; 131
    2926:	5f 4f       	sbci	r21, 0xFF	; 255
    2928:	3a f0       	brmi	.+14     	; 0x2938 <__divsf3_pse+0x70>
    292a:	9e 3f       	cpi	r25, 0xFE	; 254
    292c:	51 05       	cpc	r21, r1
    292e:	78 f0       	brcs	.+30     	; 0x294e <__divsf3_pse+0x86>
    2930:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__fp_inf>
    2934:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__fp_szero>
    2938:	5f 3f       	cpi	r21, 0xFF	; 255
    293a:	e4 f3       	brlt	.-8      	; 0x2934 <__divsf3_pse+0x6c>
    293c:	98 3e       	cpi	r25, 0xE8	; 232
    293e:	d4 f3       	brlt	.-12     	; 0x2934 <__divsf3_pse+0x6c>
    2940:	86 95       	lsr	r24
    2942:	77 95       	ror	r23
    2944:	67 95       	ror	r22
    2946:	b7 95       	ror	r27
    2948:	f7 95       	ror	r31
    294a:	9f 5f       	subi	r25, 0xFF	; 255
    294c:	c9 f7       	brne	.-14     	; 0x2940 <__divsf3_pse+0x78>
    294e:	88 0f       	add	r24, r24
    2950:	91 1d       	adc	r25, r1
    2952:	96 95       	lsr	r25
    2954:	87 95       	ror	r24
    2956:	97 f9       	bld	r25, 7
    2958:	08 95       	ret
    295a:	e1 e0       	ldi	r30, 0x01	; 1
    295c:	66 0f       	add	r22, r22
    295e:	77 1f       	adc	r23, r23
    2960:	88 1f       	adc	r24, r24
    2962:	bb 1f       	adc	r27, r27
    2964:	62 17       	cp	r22, r18
    2966:	73 07       	cpc	r23, r19
    2968:	84 07       	cpc	r24, r20
    296a:	ba 07       	cpc	r27, r26
    296c:	20 f0       	brcs	.+8      	; 0x2976 <__divsf3_pse+0xae>
    296e:	62 1b       	sub	r22, r18
    2970:	73 0b       	sbc	r23, r19
    2972:	84 0b       	sbc	r24, r20
    2974:	ba 0b       	sbc	r27, r26
    2976:	ee 1f       	adc	r30, r30
    2978:	88 f7       	brcc	.-30     	; 0x295c <__divsf3_pse+0x94>
    297a:	e0 95       	com	r30
    297c:	08 95       	ret

0000297e <__fixunssfsi>:
    297e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__fp_splitA>
    2982:	88 f0       	brcs	.+34     	; 0x29a6 <__fixunssfsi+0x28>
    2984:	9f 57       	subi	r25, 0x7F	; 127
    2986:	98 f0       	brcs	.+38     	; 0x29ae <__fixunssfsi+0x30>
    2988:	b9 2f       	mov	r27, r25
    298a:	99 27       	eor	r25, r25
    298c:	b7 51       	subi	r27, 0x17	; 23
    298e:	b0 f0       	brcs	.+44     	; 0x29bc <__fixunssfsi+0x3e>
    2990:	e1 f0       	breq	.+56     	; 0x29ca <__fixunssfsi+0x4c>
    2992:	66 0f       	add	r22, r22
    2994:	77 1f       	adc	r23, r23
    2996:	88 1f       	adc	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	1a f0       	brmi	.+6      	; 0x29a2 <__fixunssfsi+0x24>
    299c:	ba 95       	dec	r27
    299e:	c9 f7       	brne	.-14     	; 0x2992 <__fixunssfsi+0x14>
    29a0:	14 c0       	rjmp	.+40     	; 0x29ca <__fixunssfsi+0x4c>
    29a2:	b1 30       	cpi	r27, 0x01	; 1
    29a4:	91 f0       	breq	.+36     	; 0x29ca <__fixunssfsi+0x4c>
    29a6:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fp_zero>
    29aa:	b1 e0       	ldi	r27, 0x01	; 1
    29ac:	08 95       	ret
    29ae:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__fp_zero>
    29b2:	67 2f       	mov	r22, r23
    29b4:	78 2f       	mov	r23, r24
    29b6:	88 27       	eor	r24, r24
    29b8:	b8 5f       	subi	r27, 0xF8	; 248
    29ba:	39 f0       	breq	.+14     	; 0x29ca <__fixunssfsi+0x4c>
    29bc:	b9 3f       	cpi	r27, 0xF9	; 249
    29be:	cc f3       	brlt	.-14     	; 0x29b2 <__fixunssfsi+0x34>
    29c0:	86 95       	lsr	r24
    29c2:	77 95       	ror	r23
    29c4:	67 95       	ror	r22
    29c6:	b3 95       	inc	r27
    29c8:	d9 f7       	brne	.-10     	; 0x29c0 <__fixunssfsi+0x42>
    29ca:	3e f4       	brtc	.+14     	; 0x29da <__fixunssfsi+0x5c>
    29cc:	90 95       	com	r25
    29ce:	80 95       	com	r24
    29d0:	70 95       	com	r23
    29d2:	61 95       	neg	r22
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255
    29d6:	8f 4f       	sbci	r24, 0xFF	; 255
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	08 95       	ret

000029dc <__floatunsisf>:
    29dc:	e8 94       	clt
    29de:	09 c0       	rjmp	.+18     	; 0x29f2 <__floatsisf+0x12>

000029e0 <__floatsisf>:
    29e0:	97 fb       	bst	r25, 7
    29e2:	3e f4       	brtc	.+14     	; 0x29f2 <__floatsisf+0x12>
    29e4:	90 95       	com	r25
    29e6:	80 95       	com	r24
    29e8:	70 95       	com	r23
    29ea:	61 95       	neg	r22
    29ec:	7f 4f       	sbci	r23, 0xFF	; 255
    29ee:	8f 4f       	sbci	r24, 0xFF	; 255
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	99 23       	and	r25, r25
    29f4:	a9 f0       	breq	.+42     	; 0x2a20 <__floatsisf+0x40>
    29f6:	f9 2f       	mov	r31, r25
    29f8:	96 e9       	ldi	r25, 0x96	; 150
    29fa:	bb 27       	eor	r27, r27
    29fc:	93 95       	inc	r25
    29fe:	f6 95       	lsr	r31
    2a00:	87 95       	ror	r24
    2a02:	77 95       	ror	r23
    2a04:	67 95       	ror	r22
    2a06:	b7 95       	ror	r27
    2a08:	f1 11       	cpse	r31, r1
    2a0a:	f8 cf       	rjmp	.-16     	; 0x29fc <__floatsisf+0x1c>
    2a0c:	fa f4       	brpl	.+62     	; 0x2a4c <__floatsisf+0x6c>
    2a0e:	bb 0f       	add	r27, r27
    2a10:	11 f4       	brne	.+4      	; 0x2a16 <__floatsisf+0x36>
    2a12:	60 ff       	sbrs	r22, 0
    2a14:	1b c0       	rjmp	.+54     	; 0x2a4c <__floatsisf+0x6c>
    2a16:	6f 5f       	subi	r22, 0xFF	; 255
    2a18:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1e:	16 c0       	rjmp	.+44     	; 0x2a4c <__floatsisf+0x6c>
    2a20:	88 23       	and	r24, r24
    2a22:	11 f0       	breq	.+4      	; 0x2a28 <__floatsisf+0x48>
    2a24:	96 e9       	ldi	r25, 0x96	; 150
    2a26:	11 c0       	rjmp	.+34     	; 0x2a4a <__floatsisf+0x6a>
    2a28:	77 23       	and	r23, r23
    2a2a:	21 f0       	breq	.+8      	; 0x2a34 <__floatsisf+0x54>
    2a2c:	9e e8       	ldi	r25, 0x8E	; 142
    2a2e:	87 2f       	mov	r24, r23
    2a30:	76 2f       	mov	r23, r22
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <__floatsisf+0x5e>
    2a34:	66 23       	and	r22, r22
    2a36:	71 f0       	breq	.+28     	; 0x2a54 <__floatsisf+0x74>
    2a38:	96 e8       	ldi	r25, 0x86	; 134
    2a3a:	86 2f       	mov	r24, r22
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	2a f0       	brmi	.+10     	; 0x2a4c <__floatsisf+0x6c>
    2a42:	9a 95       	dec	r25
    2a44:	66 0f       	add	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	88 1f       	adc	r24, r24
    2a4a:	da f7       	brpl	.-10     	; 0x2a42 <__floatsisf+0x62>
    2a4c:	88 0f       	add	r24, r24
    2a4e:	96 95       	lsr	r25
    2a50:	87 95       	ror	r24
    2a52:	97 f9       	bld	r25, 7
    2a54:	08 95       	ret

00002a56 <__fp_inf>:
    2a56:	97 f9       	bld	r25, 7
    2a58:	9f 67       	ori	r25, 0x7F	; 127
    2a5a:	80 e8       	ldi	r24, 0x80	; 128
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	08 95       	ret

00002a62 <__fp_nan>:
    2a62:	9f ef       	ldi	r25, 0xFF	; 255
    2a64:	80 ec       	ldi	r24, 0xC0	; 192
    2a66:	08 95       	ret

00002a68 <__fp_pscA>:
    2a68:	00 24       	eor	r0, r0
    2a6a:	0a 94       	dec	r0
    2a6c:	16 16       	cp	r1, r22
    2a6e:	17 06       	cpc	r1, r23
    2a70:	18 06       	cpc	r1, r24
    2a72:	09 06       	cpc	r0, r25
    2a74:	08 95       	ret

00002a76 <__fp_pscB>:
    2a76:	00 24       	eor	r0, r0
    2a78:	0a 94       	dec	r0
    2a7a:	12 16       	cp	r1, r18
    2a7c:	13 06       	cpc	r1, r19
    2a7e:	14 06       	cpc	r1, r20
    2a80:	05 06       	cpc	r0, r21
    2a82:	08 95       	ret

00002a84 <__fp_round>:
    2a84:	09 2e       	mov	r0, r25
    2a86:	03 94       	inc	r0
    2a88:	00 0c       	add	r0, r0
    2a8a:	11 f4       	brne	.+4      	; 0x2a90 <__fp_round+0xc>
    2a8c:	88 23       	and	r24, r24
    2a8e:	52 f0       	brmi	.+20     	; 0x2aa4 <__fp_round+0x20>
    2a90:	bb 0f       	add	r27, r27
    2a92:	40 f4       	brcc	.+16     	; 0x2aa4 <__fp_round+0x20>
    2a94:	bf 2b       	or	r27, r31
    2a96:	11 f4       	brne	.+4      	; 0x2a9c <__fp_round+0x18>
    2a98:	60 ff       	sbrs	r22, 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <__fp_round+0x20>
    2a9c:	6f 5f       	subi	r22, 0xFF	; 255
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	08 95       	ret

00002aa6 <__fp_split3>:
    2aa6:	57 fd       	sbrc	r21, 7
    2aa8:	90 58       	subi	r25, 0x80	; 128
    2aaa:	44 0f       	add	r20, r20
    2aac:	55 1f       	adc	r21, r21
    2aae:	59 f0       	breq	.+22     	; 0x2ac6 <__fp_splitA+0x10>
    2ab0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ab2:	71 f0       	breq	.+28     	; 0x2ad0 <__fp_splitA+0x1a>
    2ab4:	47 95       	ror	r20

00002ab6 <__fp_splitA>:
    2ab6:	88 0f       	add	r24, r24
    2ab8:	97 fb       	bst	r25, 7
    2aba:	99 1f       	adc	r25, r25
    2abc:	61 f0       	breq	.+24     	; 0x2ad6 <__fp_splitA+0x20>
    2abe:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac0:	79 f0       	breq	.+30     	; 0x2ae0 <__fp_splitA+0x2a>
    2ac2:	87 95       	ror	r24
    2ac4:	08 95       	ret
    2ac6:	12 16       	cp	r1, r18
    2ac8:	13 06       	cpc	r1, r19
    2aca:	14 06       	cpc	r1, r20
    2acc:	55 1f       	adc	r21, r21
    2ace:	f2 cf       	rjmp	.-28     	; 0x2ab4 <__fp_split3+0xe>
    2ad0:	46 95       	lsr	r20
    2ad2:	f1 df       	rcall	.-30     	; 0x2ab6 <__fp_splitA>
    2ad4:	08 c0       	rjmp	.+16     	; 0x2ae6 <__fp_splitA+0x30>
    2ad6:	16 16       	cp	r1, r22
    2ad8:	17 06       	cpc	r1, r23
    2ada:	18 06       	cpc	r1, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	f1 cf       	rjmp	.-30     	; 0x2ac2 <__fp_splitA+0xc>
    2ae0:	86 95       	lsr	r24
    2ae2:	71 05       	cpc	r23, r1
    2ae4:	61 05       	cpc	r22, r1
    2ae6:	08 94       	sec
    2ae8:	08 95       	ret

00002aea <__fp_zero>:
    2aea:	e8 94       	clt

00002aec <__fp_szero>:
    2aec:	bb 27       	eor	r27, r27
    2aee:	66 27       	eor	r22, r22
    2af0:	77 27       	eor	r23, r23
    2af2:	cb 01       	movw	r24, r22
    2af4:	97 f9       	bld	r25, 7
    2af6:	08 95       	ret

00002af8 <__udivmodhi4>:
    2af8:	aa 1b       	sub	r26, r26
    2afa:	bb 1b       	sub	r27, r27
    2afc:	51 e1       	ldi	r21, 0x11	; 17
    2afe:	07 c0       	rjmp	.+14     	; 0x2b0e <__udivmodhi4_ep>

00002b00 <__udivmodhi4_loop>:
    2b00:	aa 1f       	adc	r26, r26
    2b02:	bb 1f       	adc	r27, r27
    2b04:	a6 17       	cp	r26, r22
    2b06:	b7 07       	cpc	r27, r23
    2b08:	10 f0       	brcs	.+4      	; 0x2b0e <__udivmodhi4_ep>
    2b0a:	a6 1b       	sub	r26, r22
    2b0c:	b7 0b       	sbc	r27, r23

00002b0e <__udivmodhi4_ep>:
    2b0e:	88 1f       	adc	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	5a 95       	dec	r21
    2b14:	a9 f7       	brne	.-22     	; 0x2b00 <__udivmodhi4_loop>
    2b16:	80 95       	com	r24
    2b18:	90 95       	com	r25
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	08 95       	ret

00002b20 <__tablejump2__>:
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	05 90       	lpm	r0, Z+
    2b26:	f4 91       	lpm	r31, Z
    2b28:	e0 2d       	mov	r30, r0
    2b2a:	09 94       	ijmp

00002b2c <memcpy>:
    2b2c:	fb 01       	movw	r30, r22
    2b2e:	dc 01       	movw	r26, r24
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <memcpy+0xa>
    2b32:	01 90       	ld	r0, Z+
    2b34:	0d 92       	st	X+, r0
    2b36:	41 50       	subi	r20, 0x01	; 1
    2b38:	50 40       	sbci	r21, 0x00	; 0
    2b3a:	d8 f7       	brcc	.-10     	; 0x2b32 <memcpy+0x6>
    2b3c:	08 95       	ret

00002b3e <sprintf>:
    2b3e:	ae e0       	ldi	r26, 0x0E	; 14
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e5 ea       	ldi	r30, 0xA5	; 165
    2b44:	f5 e1       	ldi	r31, 0x15	; 21
    2b46:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x1c>
    2b4a:	0d 89       	ldd	r16, Y+21	; 0x15
    2b4c:	1e 89       	ldd	r17, Y+22	; 0x16
    2b4e:	86 e0       	ldi	r24, 0x06	; 6
    2b50:	8c 83       	std	Y+4, r24	; 0x04
    2b52:	1a 83       	std	Y+2, r17	; 0x02
    2b54:	09 83       	std	Y+1, r16	; 0x01
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	9f e7       	ldi	r25, 0x7F	; 127
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	ae 01       	movw	r20, r28
    2b60:	47 5e       	subi	r20, 0xE7	; 231
    2b62:	5f 4f       	sbci	r21, 0xFF	; 255
    2b64:	6f 89       	ldd	r22, Y+23	; 0x17
    2b66:	78 8d       	ldd	r23, Y+24	; 0x18
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <vfprintf>
    2b70:	ef 81       	ldd	r30, Y+7	; 0x07
    2b72:	f8 85       	ldd	r31, Y+8	; 0x08
    2b74:	e0 0f       	add	r30, r16
    2b76:	f1 1f       	adc	r31, r17
    2b78:	10 82       	st	Z, r1
    2b7a:	2e 96       	adiw	r28, 0x0e	; 14
    2b7c:	e4 e0       	ldi	r30, 0x04	; 4
    2b7e:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x1c>

00002b82 <vfprintf>:
    2b82:	ab e0       	ldi	r26, 0x0B	; 11
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e7 ec       	ldi	r30, 0xC7	; 199
    2b88:	f5 e1       	ldi	r31, 0x15	; 21
    2b8a:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__prologue_saves__>
    2b8e:	6c 01       	movw	r12, r24
    2b90:	7b 01       	movw	r14, r22
    2b92:	8a 01       	movw	r16, r20
    2b94:	fc 01       	movw	r30, r24
    2b96:	17 82       	std	Z+7, r1	; 0x07
    2b98:	16 82       	std	Z+6, r1	; 0x06
    2b9a:	83 81       	ldd	r24, Z+3	; 0x03
    2b9c:	81 ff       	sbrs	r24, 1
    2b9e:	cc c1       	rjmp	.+920    	; 0x2f38 <vfprintf+0x3b6>
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	3c 01       	movw	r6, r24
    2ba6:	f6 01       	movw	r30, r12
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	f7 01       	movw	r30, r14
    2bac:	93 fd       	sbrc	r25, 3
    2bae:	85 91       	lpm	r24, Z+
    2bb0:	93 ff       	sbrs	r25, 3
    2bb2:	81 91       	ld	r24, Z+
    2bb4:	7f 01       	movw	r14, r30
    2bb6:	88 23       	and	r24, r24
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <vfprintf+0x3a>
    2bba:	ba c1       	rjmp	.+884    	; 0x2f30 <vfprintf+0x3ae>
    2bbc:	85 32       	cpi	r24, 0x25	; 37
    2bbe:	39 f4       	brne	.+14     	; 0x2bce <vfprintf+0x4c>
    2bc0:	93 fd       	sbrc	r25, 3
    2bc2:	85 91       	lpm	r24, Z+
    2bc4:	93 ff       	sbrs	r25, 3
    2bc6:	81 91       	ld	r24, Z+
    2bc8:	7f 01       	movw	r14, r30
    2bca:	85 32       	cpi	r24, 0x25	; 37
    2bcc:	29 f4       	brne	.+10     	; 0x2bd8 <vfprintf+0x56>
    2bce:	b6 01       	movw	r22, r12
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2bd6:	e7 cf       	rjmp	.-50     	; 0x2ba6 <vfprintf+0x24>
    2bd8:	91 2c       	mov	r9, r1
    2bda:	21 2c       	mov	r2, r1
    2bdc:	31 2c       	mov	r3, r1
    2bde:	ff e1       	ldi	r31, 0x1F	; 31
    2be0:	f3 15       	cp	r31, r3
    2be2:	d8 f0       	brcs	.+54     	; 0x2c1a <vfprintf+0x98>
    2be4:	8b 32       	cpi	r24, 0x2B	; 43
    2be6:	79 f0       	breq	.+30     	; 0x2c06 <vfprintf+0x84>
    2be8:	38 f4       	brcc	.+14     	; 0x2bf8 <vfprintf+0x76>
    2bea:	80 32       	cpi	r24, 0x20	; 32
    2bec:	79 f0       	breq	.+30     	; 0x2c0c <vfprintf+0x8a>
    2bee:	83 32       	cpi	r24, 0x23	; 35
    2bf0:	a1 f4       	brne	.+40     	; 0x2c1a <vfprintf+0x98>
    2bf2:	23 2d       	mov	r18, r3
    2bf4:	20 61       	ori	r18, 0x10	; 16
    2bf6:	1d c0       	rjmp	.+58     	; 0x2c32 <vfprintf+0xb0>
    2bf8:	8d 32       	cpi	r24, 0x2D	; 45
    2bfa:	61 f0       	breq	.+24     	; 0x2c14 <vfprintf+0x92>
    2bfc:	80 33       	cpi	r24, 0x30	; 48
    2bfe:	69 f4       	brne	.+26     	; 0x2c1a <vfprintf+0x98>
    2c00:	23 2d       	mov	r18, r3
    2c02:	21 60       	ori	r18, 0x01	; 1
    2c04:	16 c0       	rjmp	.+44     	; 0x2c32 <vfprintf+0xb0>
    2c06:	83 2d       	mov	r24, r3
    2c08:	82 60       	ori	r24, 0x02	; 2
    2c0a:	38 2e       	mov	r3, r24
    2c0c:	e3 2d       	mov	r30, r3
    2c0e:	e4 60       	ori	r30, 0x04	; 4
    2c10:	3e 2e       	mov	r3, r30
    2c12:	2a c0       	rjmp	.+84     	; 0x2c68 <vfprintf+0xe6>
    2c14:	f3 2d       	mov	r31, r3
    2c16:	f8 60       	ori	r31, 0x08	; 8
    2c18:	1d c0       	rjmp	.+58     	; 0x2c54 <vfprintf+0xd2>
    2c1a:	37 fc       	sbrc	r3, 7
    2c1c:	2d c0       	rjmp	.+90     	; 0x2c78 <vfprintf+0xf6>
    2c1e:	20 ed       	ldi	r18, 0xD0	; 208
    2c20:	28 0f       	add	r18, r24
    2c22:	2a 30       	cpi	r18, 0x0A	; 10
    2c24:	40 f0       	brcs	.+16     	; 0x2c36 <vfprintf+0xb4>
    2c26:	8e 32       	cpi	r24, 0x2E	; 46
    2c28:	b9 f4       	brne	.+46     	; 0x2c58 <vfprintf+0xd6>
    2c2a:	36 fc       	sbrc	r3, 6
    2c2c:	81 c1       	rjmp	.+770    	; 0x2f30 <vfprintf+0x3ae>
    2c2e:	23 2d       	mov	r18, r3
    2c30:	20 64       	ori	r18, 0x40	; 64
    2c32:	32 2e       	mov	r3, r18
    2c34:	19 c0       	rjmp	.+50     	; 0x2c68 <vfprintf+0xe6>
    2c36:	36 fe       	sbrs	r3, 6
    2c38:	06 c0       	rjmp	.+12     	; 0x2c46 <vfprintf+0xc4>
    2c3a:	8a e0       	ldi	r24, 0x0A	; 10
    2c3c:	98 9e       	mul	r9, r24
    2c3e:	20 0d       	add	r18, r0
    2c40:	11 24       	eor	r1, r1
    2c42:	92 2e       	mov	r9, r18
    2c44:	11 c0       	rjmp	.+34     	; 0x2c68 <vfprintf+0xe6>
    2c46:	ea e0       	ldi	r30, 0x0A	; 10
    2c48:	2e 9e       	mul	r2, r30
    2c4a:	20 0d       	add	r18, r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	22 2e       	mov	r2, r18
    2c50:	f3 2d       	mov	r31, r3
    2c52:	f0 62       	ori	r31, 0x20	; 32
    2c54:	3f 2e       	mov	r3, r31
    2c56:	08 c0       	rjmp	.+16     	; 0x2c68 <vfprintf+0xe6>
    2c58:	8c 36       	cpi	r24, 0x6C	; 108
    2c5a:	21 f4       	brne	.+8      	; 0x2c64 <vfprintf+0xe2>
    2c5c:	83 2d       	mov	r24, r3
    2c5e:	80 68       	ori	r24, 0x80	; 128
    2c60:	38 2e       	mov	r3, r24
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <vfprintf+0xe6>
    2c64:	88 36       	cpi	r24, 0x68	; 104
    2c66:	41 f4       	brne	.+16     	; 0x2c78 <vfprintf+0xf6>
    2c68:	f7 01       	movw	r30, r14
    2c6a:	93 fd       	sbrc	r25, 3
    2c6c:	85 91       	lpm	r24, Z+
    2c6e:	93 ff       	sbrs	r25, 3
    2c70:	81 91       	ld	r24, Z+
    2c72:	7f 01       	movw	r14, r30
    2c74:	81 11       	cpse	r24, r1
    2c76:	b3 cf       	rjmp	.-154    	; 0x2bde <vfprintf+0x5c>
    2c78:	98 2f       	mov	r25, r24
    2c7a:	9f 7d       	andi	r25, 0xDF	; 223
    2c7c:	95 54       	subi	r25, 0x45	; 69
    2c7e:	93 30       	cpi	r25, 0x03	; 3
    2c80:	28 f4       	brcc	.+10     	; 0x2c8c <vfprintf+0x10a>
    2c82:	0c 5f       	subi	r16, 0xFC	; 252
    2c84:	1f 4f       	sbci	r17, 0xFF	; 255
    2c86:	9f e3       	ldi	r25, 0x3F	; 63
    2c88:	99 83       	std	Y+1, r25	; 0x01
    2c8a:	0d c0       	rjmp	.+26     	; 0x2ca6 <vfprintf+0x124>
    2c8c:	83 36       	cpi	r24, 0x63	; 99
    2c8e:	31 f0       	breq	.+12     	; 0x2c9c <vfprintf+0x11a>
    2c90:	83 37       	cpi	r24, 0x73	; 115
    2c92:	71 f0       	breq	.+28     	; 0x2cb0 <vfprintf+0x12e>
    2c94:	83 35       	cpi	r24, 0x53	; 83
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <vfprintf+0x118>
    2c98:	59 c0       	rjmp	.+178    	; 0x2d4c <vfprintf+0x1ca>
    2c9a:	21 c0       	rjmp	.+66     	; 0x2cde <vfprintf+0x15c>
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	80 81       	ld	r24, Z
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	0e 5f       	subi	r16, 0xFE	; 254
    2ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca6:	88 24       	eor	r8, r8
    2ca8:	83 94       	inc	r8
    2caa:	91 2c       	mov	r9, r1
    2cac:	53 01       	movw	r10, r6
    2cae:	13 c0       	rjmp	.+38     	; 0x2cd6 <vfprintf+0x154>
    2cb0:	28 01       	movw	r4, r16
    2cb2:	f2 e0       	ldi	r31, 0x02	; 2
    2cb4:	4f 0e       	add	r4, r31
    2cb6:	51 1c       	adc	r5, r1
    2cb8:	f8 01       	movw	r30, r16
    2cba:	a0 80       	ld	r10, Z
    2cbc:	b1 80       	ldd	r11, Z+1	; 0x01
    2cbe:	36 fe       	sbrs	r3, 6
    2cc0:	03 c0       	rjmp	.+6      	; 0x2cc8 <vfprintf+0x146>
    2cc2:	69 2d       	mov	r22, r9
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <vfprintf+0x14a>
    2cc8:	6f ef       	ldi	r22, 0xFF	; 255
    2cca:	7f ef       	ldi	r23, 0xFF	; 255
    2ccc:	c5 01       	movw	r24, r10
    2cce:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <strnlen>
    2cd2:	4c 01       	movw	r8, r24
    2cd4:	82 01       	movw	r16, r4
    2cd6:	f3 2d       	mov	r31, r3
    2cd8:	ff 77       	andi	r31, 0x7F	; 127
    2cda:	3f 2e       	mov	r3, r31
    2cdc:	16 c0       	rjmp	.+44     	; 0x2d0a <vfprintf+0x188>
    2cde:	28 01       	movw	r4, r16
    2ce0:	22 e0       	ldi	r18, 0x02	; 2
    2ce2:	42 0e       	add	r4, r18
    2ce4:	51 1c       	adc	r5, r1
    2ce6:	f8 01       	movw	r30, r16
    2ce8:	a0 80       	ld	r10, Z
    2cea:	b1 80       	ldd	r11, Z+1	; 0x01
    2cec:	36 fe       	sbrs	r3, 6
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <vfprintf+0x174>
    2cf0:	69 2d       	mov	r22, r9
    2cf2:	70 e0       	ldi	r23, 0x00	; 0
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <vfprintf+0x178>
    2cf6:	6f ef       	ldi	r22, 0xFF	; 255
    2cf8:	7f ef       	ldi	r23, 0xFF	; 255
    2cfa:	c5 01       	movw	r24, r10
    2cfc:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <strnlen_P>
    2d00:	4c 01       	movw	r8, r24
    2d02:	f3 2d       	mov	r31, r3
    2d04:	f0 68       	ori	r31, 0x80	; 128
    2d06:	3f 2e       	mov	r3, r31
    2d08:	82 01       	movw	r16, r4
    2d0a:	33 fc       	sbrc	r3, 3
    2d0c:	1b c0       	rjmp	.+54     	; 0x2d44 <vfprintf+0x1c2>
    2d0e:	82 2d       	mov	r24, r2
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	88 16       	cp	r8, r24
    2d14:	99 06       	cpc	r9, r25
    2d16:	b0 f4       	brcc	.+44     	; 0x2d44 <vfprintf+0x1c2>
    2d18:	b6 01       	movw	r22, r12
    2d1a:	80 e2       	ldi	r24, 0x20	; 32
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2d22:	2a 94       	dec	r2
    2d24:	f4 cf       	rjmp	.-24     	; 0x2d0e <vfprintf+0x18c>
    2d26:	f5 01       	movw	r30, r10
    2d28:	37 fc       	sbrc	r3, 7
    2d2a:	85 91       	lpm	r24, Z+
    2d2c:	37 fe       	sbrs	r3, 7
    2d2e:	81 91       	ld	r24, Z+
    2d30:	5f 01       	movw	r10, r30
    2d32:	b6 01       	movw	r22, r12
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2d3a:	21 10       	cpse	r2, r1
    2d3c:	2a 94       	dec	r2
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	82 1a       	sub	r8, r18
    2d42:	91 08       	sbc	r9, r1
    2d44:	81 14       	cp	r8, r1
    2d46:	91 04       	cpc	r9, r1
    2d48:	71 f7       	brne	.-36     	; 0x2d26 <vfprintf+0x1a4>
    2d4a:	e8 c0       	rjmp	.+464    	; 0x2f1c <vfprintf+0x39a>
    2d4c:	84 36       	cpi	r24, 0x64	; 100
    2d4e:	11 f0       	breq	.+4      	; 0x2d54 <vfprintf+0x1d2>
    2d50:	89 36       	cpi	r24, 0x69	; 105
    2d52:	41 f5       	brne	.+80     	; 0x2da4 <vfprintf+0x222>
    2d54:	f8 01       	movw	r30, r16
    2d56:	37 fe       	sbrs	r3, 7
    2d58:	07 c0       	rjmp	.+14     	; 0x2d68 <vfprintf+0x1e6>
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	0c 5f       	subi	r16, 0xFC	; 252
    2d64:	1f 4f       	sbci	r17, 0xFF	; 255
    2d66:	08 c0       	rjmp	.+16     	; 0x2d78 <vfprintf+0x1f6>
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	07 2e       	mov	r0, r23
    2d6e:	00 0c       	add	r0, r0
    2d70:	88 0b       	sbc	r24, r24
    2d72:	99 0b       	sbc	r25, r25
    2d74:	0e 5f       	subi	r16, 0xFE	; 254
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	f3 2d       	mov	r31, r3
    2d7a:	ff 76       	andi	r31, 0x6F	; 111
    2d7c:	3f 2e       	mov	r3, r31
    2d7e:	97 ff       	sbrs	r25, 7
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <vfprintf+0x212>
    2d82:	90 95       	com	r25
    2d84:	80 95       	com	r24
    2d86:	70 95       	com	r23
    2d88:	61 95       	neg	r22
    2d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d90:	f0 68       	ori	r31, 0x80	; 128
    2d92:	3f 2e       	mov	r3, r31
    2d94:	2a e0       	ldi	r18, 0x0A	; 10
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	a3 01       	movw	r20, r6
    2d9a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__ultoa_invert>
    2d9e:	88 2e       	mov	r8, r24
    2da0:	86 18       	sub	r8, r6
    2da2:	45 c0       	rjmp	.+138    	; 0x2e2e <vfprintf+0x2ac>
    2da4:	85 37       	cpi	r24, 0x75	; 117
    2da6:	31 f4       	brne	.+12     	; 0x2db4 <vfprintf+0x232>
    2da8:	23 2d       	mov	r18, r3
    2daa:	2f 7e       	andi	r18, 0xEF	; 239
    2dac:	b2 2e       	mov	r11, r18
    2dae:	2a e0       	ldi	r18, 0x0A	; 10
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	25 c0       	rjmp	.+74     	; 0x2dfe <vfprintf+0x27c>
    2db4:	93 2d       	mov	r25, r3
    2db6:	99 7f       	andi	r25, 0xF9	; 249
    2db8:	b9 2e       	mov	r11, r25
    2dba:	8f 36       	cpi	r24, 0x6F	; 111
    2dbc:	c1 f0       	breq	.+48     	; 0x2dee <vfprintf+0x26c>
    2dbe:	18 f4       	brcc	.+6      	; 0x2dc6 <vfprintf+0x244>
    2dc0:	88 35       	cpi	r24, 0x58	; 88
    2dc2:	79 f0       	breq	.+30     	; 0x2de2 <vfprintf+0x260>
    2dc4:	b5 c0       	rjmp	.+362    	; 0x2f30 <vfprintf+0x3ae>
    2dc6:	80 37       	cpi	r24, 0x70	; 112
    2dc8:	19 f0       	breq	.+6      	; 0x2dd0 <vfprintf+0x24e>
    2dca:	88 37       	cpi	r24, 0x78	; 120
    2dcc:	21 f0       	breq	.+8      	; 0x2dd6 <vfprintf+0x254>
    2dce:	b0 c0       	rjmp	.+352    	; 0x2f30 <vfprintf+0x3ae>
    2dd0:	e9 2f       	mov	r30, r25
    2dd2:	e0 61       	ori	r30, 0x10	; 16
    2dd4:	be 2e       	mov	r11, r30
    2dd6:	b4 fe       	sbrs	r11, 4
    2dd8:	0d c0       	rjmp	.+26     	; 0x2df4 <vfprintf+0x272>
    2dda:	fb 2d       	mov	r31, r11
    2ddc:	f4 60       	ori	r31, 0x04	; 4
    2dde:	bf 2e       	mov	r11, r31
    2de0:	09 c0       	rjmp	.+18     	; 0x2df4 <vfprintf+0x272>
    2de2:	34 fe       	sbrs	r3, 4
    2de4:	0a c0       	rjmp	.+20     	; 0x2dfa <vfprintf+0x278>
    2de6:	29 2f       	mov	r18, r25
    2de8:	26 60       	ori	r18, 0x06	; 6
    2dea:	b2 2e       	mov	r11, r18
    2dec:	06 c0       	rjmp	.+12     	; 0x2dfa <vfprintf+0x278>
    2dee:	28 e0       	ldi	r18, 0x08	; 8
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	05 c0       	rjmp	.+10     	; 0x2dfe <vfprintf+0x27c>
    2df4:	20 e1       	ldi	r18, 0x10	; 16
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <vfprintf+0x27c>
    2dfa:	20 e1       	ldi	r18, 0x10	; 16
    2dfc:	32 e0       	ldi	r19, 0x02	; 2
    2dfe:	f8 01       	movw	r30, r16
    2e00:	b7 fe       	sbrs	r11, 7
    2e02:	07 c0       	rjmp	.+14     	; 0x2e12 <vfprintf+0x290>
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	0c 5f       	subi	r16, 0xFC	; 252
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	06 c0       	rjmp	.+12     	; 0x2e1e <vfprintf+0x29c>
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 5f       	subi	r16, 0xFE	; 254
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	a3 01       	movw	r20, r6
    2e20:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__ultoa_invert>
    2e24:	88 2e       	mov	r8, r24
    2e26:	86 18       	sub	r8, r6
    2e28:	fb 2d       	mov	r31, r11
    2e2a:	ff 77       	andi	r31, 0x7F	; 127
    2e2c:	3f 2e       	mov	r3, r31
    2e2e:	36 fe       	sbrs	r3, 6
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <vfprintf+0x2ca>
    2e32:	23 2d       	mov	r18, r3
    2e34:	2e 7f       	andi	r18, 0xFE	; 254
    2e36:	a2 2e       	mov	r10, r18
    2e38:	89 14       	cp	r8, r9
    2e3a:	58 f4       	brcc	.+22     	; 0x2e52 <vfprintf+0x2d0>
    2e3c:	34 fe       	sbrs	r3, 4
    2e3e:	0b c0       	rjmp	.+22     	; 0x2e56 <vfprintf+0x2d4>
    2e40:	32 fc       	sbrc	r3, 2
    2e42:	09 c0       	rjmp	.+18     	; 0x2e56 <vfprintf+0x2d4>
    2e44:	83 2d       	mov	r24, r3
    2e46:	8e 7e       	andi	r24, 0xEE	; 238
    2e48:	a8 2e       	mov	r10, r24
    2e4a:	05 c0       	rjmp	.+10     	; 0x2e56 <vfprintf+0x2d4>
    2e4c:	b8 2c       	mov	r11, r8
    2e4e:	a3 2c       	mov	r10, r3
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <vfprintf+0x2d6>
    2e52:	b8 2c       	mov	r11, r8
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <vfprintf+0x2d6>
    2e56:	b9 2c       	mov	r11, r9
    2e58:	a4 fe       	sbrs	r10, 4
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <vfprintf+0x2f8>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e8 0d       	add	r30, r8
    2e60:	f1 1d       	adc	r31, r1
    2e62:	80 81       	ld	r24, Z
    2e64:	80 33       	cpi	r24, 0x30	; 48
    2e66:	21 f4       	brne	.+8      	; 0x2e70 <vfprintf+0x2ee>
    2e68:	9a 2d       	mov	r25, r10
    2e6a:	99 7e       	andi	r25, 0xE9	; 233
    2e6c:	a9 2e       	mov	r10, r25
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <vfprintf+0x300>
    2e70:	a2 fe       	sbrs	r10, 2
    2e72:	06 c0       	rjmp	.+12     	; 0x2e80 <vfprintf+0x2fe>
    2e74:	b3 94       	inc	r11
    2e76:	b3 94       	inc	r11
    2e78:	04 c0       	rjmp	.+8      	; 0x2e82 <vfprintf+0x300>
    2e7a:	8a 2d       	mov	r24, r10
    2e7c:	86 78       	andi	r24, 0x86	; 134
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <vfprintf+0x300>
    2e80:	b3 94       	inc	r11
    2e82:	a3 fc       	sbrc	r10, 3
    2e84:	11 c0       	rjmp	.+34     	; 0x2ea8 <vfprintf+0x326>
    2e86:	a0 fe       	sbrs	r10, 0
    2e88:	06 c0       	rjmp	.+12     	; 0x2e96 <vfprintf+0x314>
    2e8a:	b2 14       	cp	r11, r2
    2e8c:	88 f4       	brcc	.+34     	; 0x2eb0 <vfprintf+0x32e>
    2e8e:	28 0c       	add	r2, r8
    2e90:	92 2c       	mov	r9, r2
    2e92:	9b 18       	sub	r9, r11
    2e94:	0e c0       	rjmp	.+28     	; 0x2eb2 <vfprintf+0x330>
    2e96:	b2 14       	cp	r11, r2
    2e98:	60 f4       	brcc	.+24     	; 0x2eb2 <vfprintf+0x330>
    2e9a:	b6 01       	movw	r22, r12
    2e9c:	80 e2       	ldi	r24, 0x20	; 32
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2ea4:	b3 94       	inc	r11
    2ea6:	f7 cf       	rjmp	.-18     	; 0x2e96 <vfprintf+0x314>
    2ea8:	b2 14       	cp	r11, r2
    2eaa:	18 f4       	brcc	.+6      	; 0x2eb2 <vfprintf+0x330>
    2eac:	2b 18       	sub	r2, r11
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <vfprintf+0x332>
    2eb0:	98 2c       	mov	r9, r8
    2eb2:	21 2c       	mov	r2, r1
    2eb4:	a4 fe       	sbrs	r10, 4
    2eb6:	10 c0       	rjmp	.+32     	; 0x2ed8 <vfprintf+0x356>
    2eb8:	b6 01       	movw	r22, r12
    2eba:	80 e3       	ldi	r24, 0x30	; 48
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2ec2:	a2 fe       	sbrs	r10, 2
    2ec4:	17 c0       	rjmp	.+46     	; 0x2ef4 <vfprintf+0x372>
    2ec6:	a1 fc       	sbrc	r10, 1
    2ec8:	03 c0       	rjmp	.+6      	; 0x2ed0 <vfprintf+0x34e>
    2eca:	88 e7       	ldi	r24, 0x78	; 120
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <vfprintf+0x352>
    2ed0:	88 e5       	ldi	r24, 0x58	; 88
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	b6 01       	movw	r22, r12
    2ed6:	0c c0       	rjmp	.+24     	; 0x2ef0 <vfprintf+0x36e>
    2ed8:	8a 2d       	mov	r24, r10
    2eda:	86 78       	andi	r24, 0x86	; 134
    2edc:	59 f0       	breq	.+22     	; 0x2ef4 <vfprintf+0x372>
    2ede:	a1 fe       	sbrs	r10, 1
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <vfprintf+0x364>
    2ee2:	8b e2       	ldi	r24, 0x2B	; 43
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <vfprintf+0x366>
    2ee6:	80 e2       	ldi	r24, 0x20	; 32
    2ee8:	a7 fc       	sbrc	r10, 7
    2eea:	8d e2       	ldi	r24, 0x2D	; 45
    2eec:	b6 01       	movw	r22, r12
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2ef4:	89 14       	cp	r8, r9
    2ef6:	38 f4       	brcc	.+14     	; 0x2f06 <vfprintf+0x384>
    2ef8:	b6 01       	movw	r22, r12
    2efa:	80 e3       	ldi	r24, 0x30	; 48
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2f02:	9a 94       	dec	r9
    2f04:	f7 cf       	rjmp	.-18     	; 0x2ef4 <vfprintf+0x372>
    2f06:	8a 94       	dec	r8
    2f08:	f3 01       	movw	r30, r6
    2f0a:	e8 0d       	add	r30, r8
    2f0c:	f1 1d       	adc	r31, r1
    2f0e:	80 81       	ld	r24, Z
    2f10:	b6 01       	movw	r22, r12
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2f18:	81 10       	cpse	r8, r1
    2f1a:	f5 cf       	rjmp	.-22     	; 0x2f06 <vfprintf+0x384>
    2f1c:	22 20       	and	r2, r2
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <vfprintf+0x3a0>
    2f20:	42 ce       	rjmp	.-892    	; 0x2ba6 <vfprintf+0x24>
    2f22:	b6 01       	movw	r22, r12
    2f24:	80 e2       	ldi	r24, 0x20	; 32
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <fputc>
    2f2c:	2a 94       	dec	r2
    2f2e:	f6 cf       	rjmp	.-20     	; 0x2f1c <vfprintf+0x39a>
    2f30:	f6 01       	movw	r30, r12
    2f32:	86 81       	ldd	r24, Z+6	; 0x06
    2f34:	97 81       	ldd	r25, Z+7	; 0x07
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <vfprintf+0x3ba>
    2f38:	8f ef       	ldi	r24, 0xFF	; 255
    2f3a:	9f ef       	ldi	r25, 0xFF	; 255
    2f3c:	2b 96       	adiw	r28, 0x0b	; 11
    2f3e:	e2 e1       	ldi	r30, 0x12	; 18
    2f40:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__epilogue_restores__>

00002f44 <strnlen_P>:
    2f44:	fc 01       	movw	r30, r24
    2f46:	05 90       	lpm	r0, Z+
    2f48:	61 50       	subi	r22, 0x01	; 1
    2f4a:	70 40       	sbci	r23, 0x00	; 0
    2f4c:	01 10       	cpse	r0, r1
    2f4e:	d8 f7       	brcc	.-10     	; 0x2f46 <strnlen_P+0x2>
    2f50:	80 95       	com	r24
    2f52:	90 95       	com	r25
    2f54:	8e 0f       	add	r24, r30
    2f56:	9f 1f       	adc	r25, r31
    2f58:	08 95       	ret

00002f5a <strnlen>:
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	61 50       	subi	r22, 0x01	; 1
    2f5e:	70 40       	sbci	r23, 0x00	; 0
    2f60:	01 90       	ld	r0, Z+
    2f62:	01 10       	cpse	r0, r1
    2f64:	d8 f7       	brcc	.-10     	; 0x2f5c <strnlen+0x2>
    2f66:	80 95       	com	r24
    2f68:	90 95       	com	r25
    2f6a:	8e 0f       	add	r24, r30
    2f6c:	9f 1f       	adc	r25, r31
    2f6e:	08 95       	ret

00002f70 <fputc>:
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	fb 01       	movw	r30, r22
    2f7a:	23 81       	ldd	r18, Z+3	; 0x03
    2f7c:	21 fd       	sbrc	r18, 1
    2f7e:	03 c0       	rjmp	.+6      	; 0x2f86 <fputc+0x16>
    2f80:	8f ef       	ldi	r24, 0xFF	; 255
    2f82:	9f ef       	ldi	r25, 0xFF	; 255
    2f84:	2c c0       	rjmp	.+88     	; 0x2fde <fputc+0x6e>
    2f86:	22 ff       	sbrs	r18, 2
    2f88:	16 c0       	rjmp	.+44     	; 0x2fb6 <fputc+0x46>
    2f8a:	46 81       	ldd	r20, Z+6	; 0x06
    2f8c:	57 81       	ldd	r21, Z+7	; 0x07
    2f8e:	24 81       	ldd	r18, Z+4	; 0x04
    2f90:	35 81       	ldd	r19, Z+5	; 0x05
    2f92:	42 17       	cp	r20, r18
    2f94:	53 07       	cpc	r21, r19
    2f96:	44 f4       	brge	.+16     	; 0x2fa8 <fputc+0x38>
    2f98:	a0 81       	ld	r26, Z
    2f9a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f9c:	9d 01       	movw	r18, r26
    2f9e:	2f 5f       	subi	r18, 0xFF	; 255
    2fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa2:	31 83       	std	Z+1, r19	; 0x01
    2fa4:	20 83       	st	Z, r18
    2fa6:	8c 93       	st	X, r24
    2fa8:	26 81       	ldd	r18, Z+6	; 0x06
    2faa:	37 81       	ldd	r19, Z+7	; 0x07
    2fac:	2f 5f       	subi	r18, 0xFF	; 255
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	37 83       	std	Z+7, r19	; 0x07
    2fb2:	26 83       	std	Z+6, r18	; 0x06
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <fputc+0x6e>
    2fb6:	8b 01       	movw	r16, r22
    2fb8:	ec 01       	movw	r28, r24
    2fba:	fb 01       	movw	r30, r22
    2fbc:	00 84       	ldd	r0, Z+8	; 0x08
    2fbe:	f1 85       	ldd	r31, Z+9	; 0x09
    2fc0:	e0 2d       	mov	r30, r0
    2fc2:	09 95       	icall
    2fc4:	89 2b       	or	r24, r25
    2fc6:	e1 f6       	brne	.-72     	; 0x2f80 <fputc+0x10>
    2fc8:	d8 01       	movw	r26, r16
    2fca:	16 96       	adiw	r26, 0x06	; 6
    2fcc:	8d 91       	ld	r24, X+
    2fce:	9c 91       	ld	r25, X
    2fd0:	17 97       	sbiw	r26, 0x07	; 7
    2fd2:	01 96       	adiw	r24, 0x01	; 1
    2fd4:	17 96       	adiw	r26, 0x07	; 7
    2fd6:	9c 93       	st	X, r25
    2fd8:	8e 93       	st	-X, r24
    2fda:	16 97       	sbiw	r26, 0x06	; 6
    2fdc:	ce 01       	movw	r24, r28
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <__ultoa_invert>:
    2fe8:	fa 01       	movw	r30, r20
    2fea:	aa 27       	eor	r26, r26
    2fec:	28 30       	cpi	r18, 0x08	; 8
    2fee:	51 f1       	breq	.+84     	; 0x3044 <__ultoa_invert+0x5c>
    2ff0:	20 31       	cpi	r18, 0x10	; 16
    2ff2:	81 f1       	breq	.+96     	; 0x3054 <__ultoa_invert+0x6c>
    2ff4:	e8 94       	clt
    2ff6:	6f 93       	push	r22
    2ff8:	6e 7f       	andi	r22, 0xFE	; 254
    2ffa:	6e 5f       	subi	r22, 0xFE	; 254
    2ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    3000:	9f 4f       	sbci	r25, 0xFF	; 255
    3002:	af 4f       	sbci	r26, 0xFF	; 255
    3004:	b1 e0       	ldi	r27, 0x01	; 1
    3006:	3e d0       	rcall	.+124    	; 0x3084 <__ultoa_invert+0x9c>
    3008:	b4 e0       	ldi	r27, 0x04	; 4
    300a:	3c d0       	rcall	.+120    	; 0x3084 <__ultoa_invert+0x9c>
    300c:	67 0f       	add	r22, r23
    300e:	78 1f       	adc	r23, r24
    3010:	89 1f       	adc	r24, r25
    3012:	9a 1f       	adc	r25, r26
    3014:	a1 1d       	adc	r26, r1
    3016:	68 0f       	add	r22, r24
    3018:	79 1f       	adc	r23, r25
    301a:	8a 1f       	adc	r24, r26
    301c:	91 1d       	adc	r25, r1
    301e:	a1 1d       	adc	r26, r1
    3020:	6a 0f       	add	r22, r26
    3022:	71 1d       	adc	r23, r1
    3024:	81 1d       	adc	r24, r1
    3026:	91 1d       	adc	r25, r1
    3028:	a1 1d       	adc	r26, r1
    302a:	20 d0       	rcall	.+64     	; 0x306c <__ultoa_invert+0x84>
    302c:	09 f4       	brne	.+2      	; 0x3030 <__ultoa_invert+0x48>
    302e:	68 94       	set
    3030:	3f 91       	pop	r19
    3032:	2a e0       	ldi	r18, 0x0A	; 10
    3034:	26 9f       	mul	r18, r22
    3036:	11 24       	eor	r1, r1
    3038:	30 19       	sub	r19, r0
    303a:	30 5d       	subi	r19, 0xD0	; 208
    303c:	31 93       	st	Z+, r19
    303e:	de f6       	brtc	.-74     	; 0x2ff6 <__ultoa_invert+0xe>
    3040:	cf 01       	movw	r24, r30
    3042:	08 95       	ret
    3044:	46 2f       	mov	r20, r22
    3046:	47 70       	andi	r20, 0x07	; 7
    3048:	40 5d       	subi	r20, 0xD0	; 208
    304a:	41 93       	st	Z+, r20
    304c:	b3 e0       	ldi	r27, 0x03	; 3
    304e:	0f d0       	rcall	.+30     	; 0x306e <__ultoa_invert+0x86>
    3050:	c9 f7       	brne	.-14     	; 0x3044 <__ultoa_invert+0x5c>
    3052:	f6 cf       	rjmp	.-20     	; 0x3040 <__ultoa_invert+0x58>
    3054:	46 2f       	mov	r20, r22
    3056:	4f 70       	andi	r20, 0x0F	; 15
    3058:	40 5d       	subi	r20, 0xD0	; 208
    305a:	4a 33       	cpi	r20, 0x3A	; 58
    305c:	18 f0       	brcs	.+6      	; 0x3064 <__ultoa_invert+0x7c>
    305e:	49 5d       	subi	r20, 0xD9	; 217
    3060:	31 fd       	sbrc	r19, 1
    3062:	40 52       	subi	r20, 0x20	; 32
    3064:	41 93       	st	Z+, r20
    3066:	02 d0       	rcall	.+4      	; 0x306c <__ultoa_invert+0x84>
    3068:	a9 f7       	brne	.-22     	; 0x3054 <__ultoa_invert+0x6c>
    306a:	ea cf       	rjmp	.-44     	; 0x3040 <__ultoa_invert+0x58>
    306c:	b4 e0       	ldi	r27, 0x04	; 4
    306e:	a6 95       	lsr	r26
    3070:	97 95       	ror	r25
    3072:	87 95       	ror	r24
    3074:	77 95       	ror	r23
    3076:	67 95       	ror	r22
    3078:	ba 95       	dec	r27
    307a:	c9 f7       	brne	.-14     	; 0x306e <__ultoa_invert+0x86>
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	61 05       	cpc	r22, r1
    3080:	71 05       	cpc	r23, r1
    3082:	08 95       	ret
    3084:	9b 01       	movw	r18, r22
    3086:	ac 01       	movw	r20, r24
    3088:	0a 2e       	mov	r0, r26
    308a:	06 94       	lsr	r0
    308c:	57 95       	ror	r21
    308e:	47 95       	ror	r20
    3090:	37 95       	ror	r19
    3092:	27 95       	ror	r18
    3094:	ba 95       	dec	r27
    3096:	c9 f7       	brne	.-14     	; 0x308a <__ultoa_invert+0xa2>
    3098:	62 0f       	add	r22, r18
    309a:	73 1f       	adc	r23, r19
    309c:	84 1f       	adc	r24, r20
    309e:	95 1f       	adc	r25, r21
    30a0:	a0 1d       	adc	r26, r0
    30a2:	08 95       	ret

000030a4 <__prologue_saves__>:
    30a4:	2f 92       	push	r2
    30a6:	3f 92       	push	r3
    30a8:	4f 92       	push	r4
    30aa:	5f 92       	push	r5
    30ac:	6f 92       	push	r6
    30ae:	7f 92       	push	r7
    30b0:	8f 92       	push	r8
    30b2:	9f 92       	push	r9
    30b4:	af 92       	push	r10
    30b6:	bf 92       	push	r11
    30b8:	cf 92       	push	r12
    30ba:	df 92       	push	r13
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	ca 1b       	sub	r28, r26
    30ce:	db 0b       	sbc	r29, r27
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	09 94       	ijmp

000030dc <__epilogue_restores__>:
    30dc:	2a 88       	ldd	r2, Y+18	; 0x12
    30de:	39 88       	ldd	r3, Y+17	; 0x11
    30e0:	48 88       	ldd	r4, Y+16	; 0x10
    30e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    30ee:	b9 84       	ldd	r11, Y+9	; 0x09
    30f0:	c8 84       	ldd	r12, Y+8	; 0x08
    30f2:	df 80       	ldd	r13, Y+7	; 0x07
    30f4:	ee 80       	ldd	r14, Y+6	; 0x06
    30f6:	fd 80       	ldd	r15, Y+5	; 0x05
    30f8:	0c 81       	ldd	r16, Y+4	; 0x04
    30fa:	1b 81       	ldd	r17, Y+3	; 0x03
    30fc:	aa 81       	ldd	r26, Y+2	; 0x02
    30fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3100:	ce 0f       	add	r28, r30
    3102:	d1 1d       	adc	r29, r1
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	ed 01       	movw	r28, r26
    3110:	08 95       	ret

00003112 <_exit>:
    3112:	f8 94       	cli

00003114 <__stop_program>:
    3114:	ff cf       	rjmp	.-2      	; 0x3114 <__stop_program>
