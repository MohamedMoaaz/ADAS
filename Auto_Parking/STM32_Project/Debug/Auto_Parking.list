
Auto_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003580  08003588  00013588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08003580  08003580  00013588  2**0
                  CONTENTS
  4 .ARM          00000000  08003580  08003580  00013588  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003580  08003588  00013588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00013588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000000  08003588  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003588  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bee  00000000  00000000  000135b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011c6  00000000  00000000  000171a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000480  00000000  00000000  00018370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000358  00000000  00000000  000187f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001b44  00000000  00000000  00018b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002d86  00000000  00000000  0001a68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007052  00000000  00000000  0001d412  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00024464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ebc  00000000  00000000  000244e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003568 	.word	0x08003568

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08003568 	.word	0x08003568

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <APP1_voidSetup>:

static USART_Config _APP1_UART1_ ;


void APP1_voidSetup(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	// Clock of UART1
	RCC_voidEnableClock(RCC_APB2,14 );		/*	USART1	*/
 80009b8:	210e      	movs	r1, #14
 80009ba:	2002      	movs	r0, #2
 80009bc:	f001 fdd6 	bl	800256c <RCC_voidEnableClock>
	/******************* GPIO AFIOs	**********************************/
	USART_voidSetPins(USART_1);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f001 fffb 	bl	80029bc <USART_voidSetPins>
	/******************* USART INIT	******************************/
	_APP1_UART1_.USART_OperationMode = USART_TRANCIVER ;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <APP1_voidSetup+0x68>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	701a      	strb	r2, [r3, #0]
	_APP1_UART1_.USART_BuadRate = 9600 ;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <APP1_voidSetup+0x68>)
 80009ce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d2:	605a      	str	r2, [r3, #4]
	_APP1_UART1_.USART_DataLength = USART_8BIT ;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <APP1_voidSetup+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
	_APP1_UART1_.USART_Parity =USART_DISABLE_PARITY ;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <APP1_voidSetup+0x68>)
 80009dc:	2200      	movs	r2, #0
 80009de:	819a      	strh	r2, [r3, #12]
	_APP1_UART1_.USART_StopBit = USART_1_STOPBIT ;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <APP1_voidSetup+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	81da      	strh	r2, [r3, #14]
	_APP1_UART1_.USART_HWFlowControl = USART_HW_FLOW_CONTROLLED_DISALBED ;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <APP1_voidSetup+0x68>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	821a      	strh	r2, [r3, #16]
	_APP1_UART1_.USART_IdleLevel     = USART_ASYNC ;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <APP1_voidSetup+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	825a      	strh	r2, [r3, #18]
	_APP1_UART1_.USART_DataSampling  = USART_ASYNC ;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <APP1_voidSetup+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	829a      	strh	r2, [r3, #20]
	_APP1_UART1_.USART_DMA = DMA_DISABLE ;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <APP1_voidSetup+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	759a      	strb	r2, [r3, #22]
	_APP1_UART1_.P_IRQ_CallBack = NULL ;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <APP1_voidSetup+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
	_APP1_UART1_.USART_IRQ_t = USART_DISABLE_IRQs ;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <APP1_voidSetup+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	831a      	strh	r2, [r3, #24]
	USART_voidInit(USART_1, &_APP1_UART1_);
 8000a0a:	4904      	ldr	r1, [pc, #16]	; (8000a1c <APP1_voidSetup+0x68>)
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f001 fed3 	bl	80027b8 <USART_voidInit>


	/*************** Init Used Services ***************************/
	C2VCONTROL_voidInit();
 8000a12:	f002 f941 	bl	8002c98 <C2VCONTROL_voidInit>


}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000001c 	.word	0x2000001c

08000a20 <APP1_voidControlVehcileThroughBTL>:
void APP1_voidControlVehcileThroughBTL(VehicleStates_t *copy_xSystemState)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	u16 rxData = 0 ;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	81fb      	strh	r3, [r7, #14]
	static u8 LOC_u8defaultSpeed;

	while(*copy_xSystemState == USR_CONTROLLED)
 8000a2c:	e0c6      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	{
		// Get Data
		USART_voidReceiveDataSynch(USART_1,  &rxData);
 8000a2e:	f107 030e 	add.w	r3, r7, #14
 8000a32:	4619      	mov	r1, r3
 8000a34:	2000      	movs	r0, #0
 8000a36:	f001 ff27 	bl	8002888 <USART_voidReceiveDataSynch>

		// Check Data
	    if((u8)(u8)rxData == 'F')
 8000a3a:	89fb      	ldrh	r3, [r7, #14]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b46      	cmp	r3, #70	; 0x46
 8000a40:	d107      	bne.n	8000a52 <APP1_voidControlVehcileThroughBTL+0x32>
	    {
	      // Forward
	    	C2VCONTROL_voidChangeDirection(VCLE_FWD, LOC_u8defaultSpeed);;
 8000a42:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f002 f96a 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000a50:	e0b4      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if((u8)(u8)rxData == 'B')
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b42      	cmp	r3, #66	; 0x42
 8000a58:	d107      	bne.n	8000a6a <APP1_voidControlVehcileThroughBTL+0x4a>
	    {
	      // Backward
	    	C2VCONTROL_voidChangeDirection(VCLE_BWD, LOC_u8defaultSpeed);;
 8000a5a:	4b60      	ldr	r3, [pc, #384]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	2002      	movs	r0, #2
 8000a64:	f002 f95e 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000a68:	e0a8      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if((u8)(u8)rxData == 'R')
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b52      	cmp	r3, #82	; 0x52
 8000a70:	d104      	bne.n	8000a7c <APP1_voidControlVehcileThroughBTL+0x5c>
	    {
	    	C2VCONTROL_voidChangeDirection(VCLE_LEFT_FWD, 0);
 8000a72:	2100      	movs	r1, #0
 8000a74:	2006      	movs	r0, #6
 8000a76:	f002 f955 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000a7a:	e09f      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if((u8)(u8)rxData == 'L')
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b4c      	cmp	r3, #76	; 0x4c
 8000a82:	d104      	bne.n	8000a8e <APP1_voidControlVehcileThroughBTL+0x6e>
	    {
	      // Left
	    	C2VCONTROL_voidChangeDirection(VCLE_RIGHT_FWD, 0);
 8000a84:	2100      	movs	r1, #0
 8000a86:	2003      	movs	r0, #3
 8000a88:	f002 f94c 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000a8c:	e096      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if((u8)rxData == 'I')
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b49      	cmp	r3, #73	; 0x49
 8000a94:	d107      	bne.n	8000aa6 <APP1_voidControlVehcileThroughBTL+0x86>
	    {
	      // FWD Right
	    	C2VCONTROL_voidChangeDirection(VCLE_LEFT_FWD, LOC_u8defaultSpeed);
 8000a96:	4b51      	ldr	r3, [pc, #324]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	2006      	movs	r0, #6
 8000aa0:	f002 f940 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000aa4:	e08a      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>

	    }
	    else if ((u8)rxData == 'G')
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b47      	cmp	r3, #71	; 0x47
 8000aac:	d107      	bne.n	8000abe <APP1_voidControlVehcileThroughBTL+0x9e>
	    {
	      // FWD Left
	    	C2VCONTROL_voidChangeDirection(VCLE_RIGHT_FWD, LOC_u8defaultSpeed);
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f002 f934 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000abc:	e07e      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>

	    }
	    else if ((u8)rxData == 'H')
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b48      	cmp	r3, #72	; 0x48
 8000ac4:	d107      	bne.n	8000ad6 <APP1_voidControlVehcileThroughBTL+0xb6>
	    {
	      // Back Left
	    	C2VCONTROL_voidChangeDirection(VCLE_LEFT_BWD, LOC_u8defaultSpeed);
 8000ac6:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	4619      	mov	r1, r3
 8000ace:	2005      	movs	r0, #5
 8000ad0:	f002 f928 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000ad4:	e072      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>

	    }
	    else if ((u8)rxData == 'J')
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b4a      	cmp	r3, #74	; 0x4a
 8000adc:	d107      	bne.n	8000aee <APP1_voidControlVehcileThroughBTL+0xce>
	    {
	      // Back RIGHT
	    	C2VCONTROL_voidChangeDirection(VCLE_RIGHT_BWD, LOC_u8defaultSpeed);
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f002 f91c 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8000aec:	e066      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>

	    }
	    else if ((u8)rxData == 'X')
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b58      	cmp	r3, #88	; 0x58
 8000af4:	d103      	bne.n	8000afe <APP1_voidControlVehcileThroughBTL+0xde>
	    {
	      // Parking State On
	    	*copy_xSystemState = PARKING_MODE ;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
	    	break ;
 8000afc:	e063      	b.n	8000bc6 <APP1_voidControlVehcileThroughBTL+0x1a6>
	    }
	    else if ((u8)rxData == 'V')
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b56      	cmp	r3, #86	; 0x56
 8000b04:	d103      	bne.n	8000b0e <APP1_voidControlVehcileThroughBTL+0xee>
	    {
	      // Parking State On
	    	*copy_xSystemState =  TF_START_V2I;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	701a      	strb	r2, [r3, #0]
	    	break ;
 8000b0c:	e05b      	b.n	8000bc6 <APP1_voidControlVehcileThroughBTL+0x1a6>
	    }
	    else if ((u8)rxData == '1')
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b31      	cmp	r3, #49	; 0x31
 8000b14:	d103      	bne.n	8000b1e <APP1_voidControlVehcileThroughBTL+0xfe>
	    {
	      LOC_u8defaultSpeed = 50 ;
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b18:	2232      	movs	r2, #50	; 0x32
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e04e      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '2')
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b32      	cmp	r3, #50	; 0x32
 8000b24:	d103      	bne.n	8000b2e <APP1_voidControlVehcileThroughBTL+0x10e>
	    {
	      LOC_u8defaultSpeed = 100 ;
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b28:	2264      	movs	r2, #100	; 0x64
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e046      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '3')
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b33      	cmp	r3, #51	; 0x33
 8000b34:	d103      	bne.n	8000b3e <APP1_voidControlVehcileThroughBTL+0x11e>
	    {
	      LOC_u8defaultSpeed = 150 ;
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b38:	2296      	movs	r2, #150	; 0x96
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e03e      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '4')
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b34      	cmp	r3, #52	; 0x34
 8000b44:	d103      	bne.n	8000b4e <APP1_voidControlVehcileThroughBTL+0x12e>
	    {
	      LOC_u8defaultSpeed = 200 ;
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b48:	22c8      	movs	r2, #200	; 0xc8
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e036      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '5')
 8000b4e:	89fb      	ldrh	r3, [r7, #14]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b35      	cmp	r3, #53	; 0x35
 8000b54:	d103      	bne.n	8000b5e <APP1_voidControlVehcileThroughBTL+0x13e>
	    {
	      LOC_u8defaultSpeed = 210 ;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b58:	22d2      	movs	r2, #210	; 0xd2
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e02e      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '6')
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b36      	cmp	r3, #54	; 0x36
 8000b64:	d103      	bne.n	8000b6e <APP1_voidControlVehcileThroughBTL+0x14e>
	    {
	      LOC_u8defaultSpeed = 220 ;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b68:	22dc      	movs	r2, #220	; 0xdc
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e026      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '7')
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b37      	cmp	r3, #55	; 0x37
 8000b74:	d103      	bne.n	8000b7e <APP1_voidControlVehcileThroughBTL+0x15e>
	    {
	      LOC_u8defaultSpeed = 230 ;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b78:	22e6      	movs	r2, #230	; 0xe6
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e01e      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '8')
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b38      	cmp	r3, #56	; 0x38
 8000b84:	d103      	bne.n	8000b8e <APP1_voidControlVehcileThroughBTL+0x16e>
	    {
	      LOC_u8defaultSpeed = 240 ;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b88:	22f0      	movs	r2, #240	; 0xf0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e016      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else if ((u8)rxData == '9')
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b39      	cmp	r3, #57	; 0x39
 8000b94:	d103      	bne.n	8000b9e <APP1_voidControlVehcileThroughBTL+0x17e>
	    {
	      LOC_u8defaultSpeed = 250 ;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000b98:	22fa      	movs	r2, #250	; 0xfa
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e00e      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	        else if ((u8)rxData == 'q')
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b71      	cmp	r3, #113	; 0x71
 8000ba4:	d103      	bne.n	8000bae <APP1_voidControlVehcileThroughBTL+0x18e>
	    {
	      LOC_u8defaultSpeed = 255 ;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e006      	b.n	8000bbc <APP1_voidControlVehcileThroughBTL+0x19c>
	    }
	    else
	    {
	      // S or anything else
	    	C2VCONTROL_voidChangeDirection(VCLE_STOP, LOC_u8defaultSpeed);
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <APP1_voidControlVehcileThroughBTL+0x1bc>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f002 f8b4 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
	while(*copy_xSystemState == USR_CONTROLLED)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f43f af34 	beq.w	8000a2e <APP1_voidControlVehcileThroughBTL+0xe>

	    }
	}

	// To Exit From Unparking Mode
    if ((u8)rxData == 'x')
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b78      	cmp	r3, #120	; 0x78
 8000bcc:	d102      	bne.n	8000bd4 <APP1_voidControlVehcileThroughBTL+0x1b4>
    {
      // Parking State Off
    	*copy_xSystemState = USR_CONTROLLED ;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000003c 	.word	0x2000003c

08000be0 <DCMOTOR_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void DCMOTOR_voidInit(DCMotor_Cfg* p2UserConfig)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    // Only Supported Timer3 
    if(p2UserConfig->Timerx == Timer3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d16a      	bne.n	8000cc6 <DCMOTOR_voidInit+0xe6>
    {
        // Init Timer Clocks and Used Ports 
    	RCC_voidInitSysClocks();
 8000bf0:	f001 fcfc 	bl	80025ec <RCC_voidInitSysClocks>
    	RCC_voidEnableClock(RCC_AHB, p2UserConfig->CW_Port);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	789b      	ldrb	r3, [r3, #2]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f001 fcb6 	bl	800256c <RCC_voidEnableClock>
    	RCC_voidEnableClock(RCC_AHB, p2UserConfig->CCW_Port);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	791b      	ldrb	r3, [r3, #4]
 8000c04:	4619      	mov	r1, r3
 8000c06:	2000      	movs	r0, #0
 8000c08:	f001 fcb0 	bl	800256c <RCC_voidEnableClock>

    	RCC_voidEnableClock(RCC_APB1, Timer3);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f001 fcac 	bl	800256c <RCC_voidEnableClock>

    	// Set CW/CCW Port Pin as output
    	GPIO_voidSetPinDirection( p2UserConfig->CW_Port, p2UserConfig->CW_Pin, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7898      	ldrb	r0, [r3, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	78db      	ldrb	r3, [r3, #3]
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f000 faa4 	bl	800116c <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection( p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7918      	ldrb	r0, [r3, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f000 fa9c 	bl	800116c <GPIO_voidSetPinDirection>

    	// Set CW to HIGH and CCW to HIGH to Brake Motor @ first
    	GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7898      	ldrb	r0, [r3, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f000 fca2 	bl	8001588 <GPIO_voidSetPinValue>
    	GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , LOW);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7918      	ldrb	r0, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	795b      	ldrb	r3, [r3, #5]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f000 fc9a 	bl	8001588 <GPIO_voidSetPinValue>


    	// AFIOs Based on Channel Support only Channel 1 and Channel 2
        if(p2UserConfig->CHANNEL_x == CHANNEL_1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	785b      	ldrb	r3, [r3, #1]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10e      	bne.n	8000c7a <DCMOTOR_voidInit+0x9a>
        {
        	RCC_voidEnableClock(RCC_AHB, PORTB);
 8000c5c:	2112      	movs	r1, #18
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f001 fc84 	bl	800256c <RCC_voidEnableClock>
        	GPIO_voidSetPinDirection(PORTB	, PIN4, GPIO_AF_LOW_SPD);
 8000c64:	2240      	movs	r2, #64	; 0x40
 8000c66:	2104      	movs	r1, #4
 8000c68:	2012      	movs	r0, #18
 8000c6a:	f000 fa7f 	bl	800116c <GPIO_voidSetPinDirection>
        	GPIO_voidSetAFIO(PORTB	, PIN4, AFIO_2);	//TIM3CH1
 8000c6e:	2202      	movs	r2, #2
 8000c70:	2104      	movs	r1, #4
 8000c72:	2012      	movs	r0, #18
 8000c74:	f000 fcfc 	bl	8001670 <GPIO_voidSetAFIO>
 8000c78:	e011      	b.n	8000c9e <DCMOTOR_voidInit+0xbe>
        }
        else if (p2UserConfig->CHANNEL_x == CHANNEL_2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	785b      	ldrb	r3, [r3, #1]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d10d      	bne.n	8000c9e <DCMOTOR_voidInit+0xbe>
        {
        	RCC_voidEnableClock(RCC_AHB, PORTC);
 8000c82:	2113      	movs	r1, #19
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 fc71 	bl	800256c <RCC_voidEnableClock>

        	GPIO_voidSetPinDirection(PORTC	, PIN7, GPIO_AF_LOW_SPD);
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	2107      	movs	r1, #7
 8000c8e:	2013      	movs	r0, #19
 8000c90:	f000 fa6c 	bl	800116c <GPIO_voidSetPinDirection>
        	GPIO_voidSetAFIO(PORTC	, PIN7, AFIO_2);	//TIM3CH2
 8000c94:	2202      	movs	r2, #2
 8000c96:	2107      	movs	r1, #7
 8000c98:	2013      	movs	r0, #19
 8000c9a:	f000 fce9 	bl	8001670 <GPIO_voidSetAFIO>
        else
        {
            // <!TODO> Not Supported Yet 
        }
        //  PWM Configurations config name _Global_PWM_Timer3_Inst
        _Global_PWM_Timer3_Inst.Timerx = Timer3;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <DCMOTOR_voidInit+0xf0>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
        _Global_PWM_Timer3_Inst.DIR_xCOUNTING = DIR_UPCOUNTING;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <DCMOTOR_voidInit+0xf0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	705a      	strb	r2, [r3, #1]
        _Global_PWM_Timer3_Inst.TIMx_u32TopValue = 256;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <DCMOTOR_voidInit+0xf0>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	605a      	str	r2, [r3, #4]
        _Global_PWM_Timer3_Inst.TIMx_PWM_Mode_CHx[p2UserConfig->CHANNEL_x] = PWM_MODE_1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <DCMOTOR_voidInit+0xf0>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	2206      	movs	r2, #6
 8000cbe:	721a      	strb	r2, [r3, #8]

        // Init PWM 
    	PWM_voidInit(& _Global_PWM_Timer3_Inst);
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <DCMOTOR_voidInit+0xf0>)
 8000cc2:	f001 fb71 	bl	80023a8 <PWM_voidInit>
    }
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000040 	.word	0x20000040

08000cd4 <DCMOTOR_voidSetDirection>:

void DCMOTOR_voidSetDirection(DCMotor_Cfg* p2UserConfig,Motor_Dir_t copy_xMotorDir)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
    // Only Supported Timer3 
	if(p2UserConfig->Timerx == Timer3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d13a      	bne.n	8000d5e <DCMOTOR_voidSetDirection+0x8a>
	{
		switch (copy_xMotorDir)
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d015      	beq.n	8000d1a <DCMOTOR_voidSetDirection+0x46>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d024      	beq.n	8000d3c <DCMOTOR_voidSetDirection+0x68>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <DCMOTOR_voidSetDirection+0x24>
			/*IN1 = 0 & IN2 = 1*/
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , HIGH);
			break;
        default:
            break;
 8000cf6:	e033      	b.n	8000d60 <DCMOTOR_voidSetDirection+0x8c>
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7898      	ldrb	r0, [r3, #2]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	78db      	ldrb	r3, [r3, #3]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	f000 fc40 	bl	8001588 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , LOW);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7918      	ldrb	r0, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	795b      	ldrb	r3, [r3, #5]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f000 fc38 	bl	8001588 <GPIO_voidSetPinValue>
			break;
 8000d18:	e022      	b.n	8000d60 <DCMOTOR_voidSetDirection+0x8c>
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , HIGH);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7898      	ldrb	r0, [r3, #2]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	2201      	movs	r2, #1
 8000d24:	4619      	mov	r1, r3
 8000d26:	f000 fc2f 	bl	8001588 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , LOW);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7918      	ldrb	r0, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	795b      	ldrb	r3, [r3, #5]
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	f000 fc27 	bl	8001588 <GPIO_voidSetPinValue>
			break;
 8000d3a:	e011      	b.n	8000d60 <DCMOTOR_voidSetDirection+0x8c>
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7898      	ldrb	r0, [r3, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	2200      	movs	r2, #0
 8000d46:	4619      	mov	r1, r3
 8000d48:	f000 fc1e 	bl	8001588 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , HIGH);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7918      	ldrb	r0, [r3, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	795b      	ldrb	r3, [r3, #5]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	f000 fc16 	bl	8001588 <GPIO_voidSetPinValue>
			break;
 8000d5c:	e000      	b.n	8000d60 <DCMOTOR_voidSetDirection+0x8c>
        }
    }
 8000d5e:	bf00      	nop
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <DCMOTOR_voidSetSpeed>:

void DCMOTOR_voidSetSpeed(DCMotor_Cfg* p2UserConfig,u16 copy_u16MotorSpeed)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
    // Only Supported Timer3 
    if(p2UserConfig->Timerx == Timer3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10b      	bne.n	8000d94 <DCMOTOR_voidSetSpeed+0x2c>
    {   
    	if(_Global_PWM_Timer3_Inst.TIMx_u32TopValue > copy_u16MotorSpeed)
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <DCMOTOR_voidSetSpeed+0x34>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d906      	bls.n	8000d94 <DCMOTOR_voidSetSpeed+0x2c>
    	{
            // Only TWO Channels Supported
        	PWM_voidSetDutyCycle(&_Global_PWM_Timer3_Inst , copy_u16MotorSpeed , p2UserConfig->CHANNEL_x);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <DCMOTOR_voidSetSpeed+0x34>)
 8000d90:	f001 fbd0 	bl	8002534 <PWM_voidSetDutyCycle>

    	}

    }   
 }
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000040 	.word	0x20000040

08000da0 <ICU_TIM2_EdgeCallback>:

/******************************************************************************
* Module Private Functions 
*******************************************************************************/
static void ICU_TIM2_EdgeCallback(u32 Counts)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    /************** LOCAL Variables **********************/ 
    static u32 IC_Val1 = 0;
    static u32 IC_Val2 = 0;
    static u32 Difference = 0;
    static u8 Is_First_Captured = 0;
    u8 Distance  = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
    if (Is_First_Captured==0) // if the first value is not captured
 8000dac:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <ICU_TIM2_EdgeCallback+0x108>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10c      	bne.n	8000dce <ICU_TIM2_EdgeCallback+0x2e>
    {
        IC_Val1 = Counts; // read the first value
 8000db4:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <ICU_TIM2_EdgeCallback+0x10c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
        IC_Val2= 0 ;
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
        Is_First_Captured = 1;  // set the first captured as true
 8000dc0:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <ICU_TIM2_EdgeCallback+0x108>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
        Is_Timer_Busy[2] = 1 ;
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <ICU_TIM2_EdgeCallback+0x114>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	709a      	strb	r2, [r3, #2]
        // Interrupt will be disabled
        ICU_voidDisableChannelIRQ(&Global_ICU_TIMx, CHANNEL_3);
        Is_Timer_Busy[2] = 0 ; 
    }

}
 8000dcc:	e061      	b.n	8000e92 <ICU_TIM2_EdgeCallback+0xf2>
    else if (Is_First_Captured==1)   // if the first is already captured
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <ICU_TIM2_EdgeCallback+0x108>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d15d      	bne.n	8000e92 <ICU_TIM2_EdgeCallback+0xf2>
        IC_Val2 = Counts;  // read second value
 8000dd6:	4a36      	ldr	r2, [pc, #216]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
        if (IC_Val2 > IC_Val1)
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <ICU_TIM2_EdgeCallback+0x10c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d907      	bls.n	8000df8 <ICU_TIM2_EdgeCallback+0x58>
            Difference = IC_Val2-IC_Val1;
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <ICU_TIM2_EdgeCallback+0x10c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <ICU_TIM2_EdgeCallback+0x118>)
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e00f      	b.n	8000e18 <ICU_TIM2_EdgeCallback+0x78>
        else if (IC_Val1 > IC_Val2)
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <ICU_TIM2_EdgeCallback+0x10c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d909      	bls.n	8000e18 <ICU_TIM2_EdgeCallback+0x78>
            Difference = (Global_ICU_TIMx.ICU_Max_Counting - IC_Val1) + IC_Val2;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <ICU_TIM2_EdgeCallback+0x11c>)
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <ICU_TIM2_EdgeCallback+0x10c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <ICU_TIM2_EdgeCallback+0x118>)
 8000e16:	6013      	str	r3, [r2, #0]
        Distance = ((Difference * 0.017) / (8)) + FIXED_US_ERROR_IN_CM;
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <ICU_TIM2_EdgeCallback+0x118>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fb1d 	bl	800045c <__aeabi_ui2d>
 8000e22:	a31f      	add	r3, pc, #124	; (adr r3, 8000ea0 <ICU_TIM2_EdgeCallback+0x100>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fb92 	bl	8000550 <__aeabi_dmul>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	4618      	mov	r0, r3
 8000e32:	4621      	mov	r1, r4
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <ICU_TIM2_EdgeCallback+0x120>)
 8000e3a:	f7ff fcb3 	bl	80007a4 <__aeabi_ddiv>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460c      	mov	r4, r1
 8000e42:	4618      	mov	r0, r3
 8000e44:	4621      	mov	r1, r4
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <ICU_TIM2_EdgeCallback+0x124>)
 8000e4c:	f7ff f9ca 	bl	80001e4 <__adddf3>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	4618      	mov	r0, r3
 8000e56:	4621      	mov	r1, r4
 8000e58:	f7ff fd8c 	bl	8000974 <__aeabi_d2uiz>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]
        Is_First_Captured = 0; // set it back to false
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <ICU_TIM2_EdgeCallback+0x108>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
        IC_Val1 = 0 ;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <ICU_TIM2_EdgeCallback+0x10c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
        IC_Val2 = 0 ;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <ICU_TIM2_EdgeCallback+0x110>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
        Global_US_Config[2][2]->p2Function(Distance);
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <ICU_TIM2_EdgeCallback+0x128>)
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
        ICU_voidResetTimer(&Global_ICU_TIMx);
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <ICU_TIM2_EdgeCallback+0x11c>)
 8000e80:	f001 f9d2 	bl	8002228 <ICU_voidResetTimer>
        ICU_voidDisableChannelIRQ(&Global_ICU_TIMx, CHANNEL_3);
 8000e84:	2102      	movs	r1, #2
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <ICU_TIM2_EdgeCallback+0x11c>)
 8000e88:	f001 f932 	bl	80020f0 <ICU_voidDisableChannelIRQ>
        Is_Timer_Busy[2] = 0 ; 
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <ICU_TIM2_EdgeCallback+0x114>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	709a      	strb	r2, [r3, #2]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd90      	pop	{r4, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	b020c49c 	.word	0xb020c49c
 8000ea4:	3f916872 	.word	0x3f916872
 8000ea8:	200000a0 	.word	0x200000a0
 8000eac:	200000a4 	.word	0x200000a4
 8000eb0:	200000a8 	.word	0x200000a8
 8000eb4:	2000009c 	.word	0x2000009c
 8000eb8:	200000ac 	.word	0x200000ac
 8000ebc:	2000004c 	.word	0x2000004c
 8000ec0:	40200000 	.word	0x40200000
 8000ec4:	3ff00000 	.word	0x3ff00000
 8000ec8:	2000005c 	.word	0x2000005c

08000ecc <US_voidInit>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void US_voidInit(Ultrasonic_Cfg *p2UserConfig)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    // Only Timer 2 Supported 
    if(p2UserConfig->Timerx == Timer2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d16c      	bne.n	8000fb6 <US_voidInit+0xea>
    {
        /*          RCC Init        */
        #if NUXED_US_ENABLE == 1 
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < US_NUMBER; LOC_u8Counter++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e022      	b.n	8000f28 <US_voidInit+0x5c>
        {
            RCC_voidEnableClock(RCC_AHB, p2UserConfig->Trig_Port[LOC_u8Counter]);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	789b      	ldrb	r3, [r3, #2]
 8000eea:	4619      	mov	r1, r3
 8000eec:	2000      	movs	r0, #0
 8000eee:	f001 fb3d 	bl	800256c <RCC_voidEnableClock>
            GPIO_voidSetPinDirection(p2UserConfig->Trig_Port[LOC_u8Counter],p2UserConfig->Trig_Pin[LOC_u8Counter], GPIO_OUTPUT_HIGH_SPD_PUSH_PULL);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	7898      	ldrb	r0, [r3, #2]
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	799b      	ldrb	r3, [r3, #6]
 8000f02:	222c      	movs	r2, #44	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	f000 f931 	bl	800116c <GPIO_voidSetPinDirection>
            GPIO_voidSetPinValue(p2UserConfig->Trig_Port[LOC_u8Counter],p2UserConfig->Trig_Pin[LOC_u8Counter], LOW);
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	7898      	ldrb	r0, [r3, #2]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	799b      	ldrb	r3, [r3, #6]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f000 fb33 	bl	8001588 <GPIO_voidSetPinValue>
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < US_NUMBER; LOC_u8Counter++)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d9d9      	bls.n	8000ee2 <US_voidInit+0x16>
        RCC_voidEnableClock(RCC_AHB, p2UserConfig->Trig_Port);
        /*          Trig Port as Output     */ 
        GPIO_voidSetPinDirection(p2UserConfig->Trig_Port,p2UserConfig->Trig_Pin, GPIO_OUTPUT_HIGH_SPD_PUSH_PULL);
        #endif 
        // PWM Init
        Global_ICU_TIMx.Timerx = Timer2 ;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <US_voidInit+0xf4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
        Global_ICU_TIMx.ICU_u16Prescaler = 0 ;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <US_voidInit+0xf4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	815a      	strh	r2, [r3, #10]
        Global_ICU_TIMx.ICU_Max_Counting = 0xFFFFFFFF ;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <US_voidInit+0xf4>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	60da      	str	r2, [r3, #12]
        // Channel Related 
        if(p2UserConfig->CHANNEL_x == CHANNEL_3)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d127      	bne.n	8000f9a <US_voidInit+0xce>
        {
            // Echo Pin
            RCC_voidEnableClock(RCC_APB1, Timer2);	/*	TIMER2	*/
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f001 fb0d 	bl	800256c <RCC_voidEnableClock>
            /*          AFIOs                   */
            // Configure PB10 alternate function
            GPIO_voidSetPinDirection(PORTB	, PIN10, GPIO_AF_HIGH_SPD);
 8000f52:	224c      	movs	r2, #76	; 0x4c
 8000f54:	210a      	movs	r1, #10
 8000f56:	2012      	movs	r0, #18
 8000f58:	f000 f908 	bl	800116c <GPIO_voidSetPinDirection>
            GPIO_voidSetAFIO(PORTB	, PIN10, AFIO_1);	//TIM2CH3
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	210a      	movs	r1, #10
 8000f60:	2012      	movs	r0, #18
 8000f62:	f000 fb85 	bl	8001670 <GPIO_voidSetAFIO>

            /*      Inits       */
            Global_ICU_TIMx.ICU_CAPTURE_x_EDGE[CHANNEL_3] = ICU_CAPTURE_BOTH_EDGE ;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <US_voidInit+0xf4>)
 8000f68:	2203      	movs	r2, #3
 8000f6a:	71da      	strb	r2, [r3, #7]
            if(p2UserConfig->US_x == US_IRQs && p2UserConfig->p2Function != NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7a9b      	ldrb	r3, [r3, #10]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d10f      	bne.n	8000f94 <US_voidInit+0xc8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <US_voidInit+0xc8>
            {
                Global_ICU_TIMx.ICU_CHECK_MECHNSIM_x[CHANNEL_3] = ICU_CHECK_MECHNSIM_IRQs ;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <US_voidInit+0xf4>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	70da      	strb	r2, [r3, #3]
                ICU_voidGetCapturedValueAsynch(&Global_ICU_TIMx, CHANNEL_3, ICU_TIM2_EdgeCallback);
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <US_voidInit+0xf8>)
 8000f84:	2102      	movs	r1, #2
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <US_voidInit+0xf4>)
 8000f88:	f001 f882 	bl	8002090 <ICU_voidGetCapturedValueAsynch>
                /******************************** ICU NVIC	**********************************************/
                nvic_enableInterrupt(28);
 8000f8c:	201c      	movs	r0, #28
 8000f8e:	f001 f9e7 	bl	8002360 <nvic_enableInterrupt>
 8000f92:	e002      	b.n	8000f9a <US_voidInit+0xce>
            }
            else 
                Global_ICU_TIMx.ICU_CHECK_MECHNSIM_x[CHANNEL_3] = ICU_CHECK_MECHNSIM_POLLING ;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <US_voidInit+0xf4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	70da      	strb	r2, [r3, #3]

        }
    	ICU_voidInit(&Global_ICU_TIMx);
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <US_voidInit+0xf4>)
 8000f9c:	f000 fc18 	bl	80017d0 <ICU_voidInit>
    	// For Channel 3 Only
        ICU_voidDisableChannelIRQ(&Global_ICU_TIMx, CHANNEL_3);
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <US_voidInit+0xf4>)
 8000fa4:	f001 f8a4 	bl	80020f0 <ICU_voidDisableChannelIRQ>

    	Global_US_Config[2][p2UserConfig->CHANNEL_x] = p2UserConfig ;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	4906      	ldr	r1, [pc, #24]	; (8000fc8 <US_voidInit+0xfc>)
 8000fae:	3308      	adds	r3, #8
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    }
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000004c 	.word	0x2000004c
 8000fc4:	08000da1 	.word	0x08000da1
 8000fc8:	2000005c 	.word	0x2000005c
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <US_voidGetDistanceSynch>:

US_ERROR_t US_voidGetDistanceSynch(Ultrasonic_Cfg *p2UserConfig , u16* pData_DistanceInCM,u8 copy_u8UltrasonicIndex)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	71fb      	strb	r3, [r7, #7]
     u32 IC_Val1 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
     u32 IC_Val2 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
     u32 Difference = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
     u16 Distance ;
     ICU_Error_t LOC_eICU_Signal1_State = ICU_OK ;
 8000fea:	2303      	movs	r3, #3
 8000fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
     ICU_Error_t LOC_eICU_Signal2_State = ICU_OK ;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
     US_ERROR_t LOC_eReturnState = US_INVALID_READING ;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

     volatile u32 LOC_u32Counter = 0 ;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
    if(p2UserConfig->Timerx == Timer2)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f040 8081 	bne.w	800110c <US_voidGetDistanceSynch+0x13c>
    {
        if(Is_Timer_Busy[2] == 0)
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <US_voidGetDistanceSynch+0x150>)
 800100c:	789b      	ldrb	r3, [r3, #2]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d17c      	bne.n	800110c <US_voidGetDistanceSynch+0x13c>
        {
            // Trig Pin
            TrigUltrasonic( p2UserConfig->Trig_Port[copy_u8UltrasonicIndex],p2UserConfig->Trig_Pin[copy_u8UltrasonicIndex]) ;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	7899      	ldrb	r1, [r3, #2]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	799b      	ldrb	r3, [r3, #6]
 8001022:	460a      	mov	r2, r1
 8001024:	777a      	strb	r2, [r7, #29]
 8001026:	773b      	strb	r3, [r7, #28]
    GPIO_voidSetPinValue(copy_u8TrigPort, copy_u8Pin , HIGH);
 8001028:	7f39      	ldrb	r1, [r7, #28]
 800102a:	7f7b      	ldrb	r3, [r7, #29]
 800102c:	2201      	movs	r2, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f000 faaa 	bl	8001588 <GPIO_voidSetPinValue>
    delay_us(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f000 f87f 	bl	8001138 <delay_us>
    GPIO_voidSetPinValue(copy_u8TrigPort, copy_u8Pin , LOW);
 800103a:	7f39      	ldrb	r1, [r7, #28]
 800103c:	7f7b      	ldrb	r3, [r7, #29]
 800103e:	2200      	movs	r2, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f000 faa1 	bl	8001588 <GPIO_voidSetPinValue>

            LOC_eICU_Signal1_State = ICU_voidGetCapturedValueSynch(&Global_ICU_TIMx, CHANNEL_3, &IC_Val1);
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	461a      	mov	r2, r3
 800104c:	2102      	movs	r1, #2
 800104e:	4835      	ldr	r0, [pc, #212]	; (8001124 <US_voidGetDistanceSynch+0x154>)
 8001050:	f000 ff8e 	bl	8001f70 <ICU_voidGetCapturedValueSynch>
 8001054:	4603      	mov	r3, r0
 8001056:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            LOC_eICU_Signal2_State = ICU_voidGetCapturedValueSynch(&Global_ICU_TIMx, CHANNEL_3, &IC_Val2);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	461a      	mov	r2, r3
 8001060:	2102      	movs	r1, #2
 8001062:	4830      	ldr	r0, [pc, #192]	; (8001124 <US_voidGetDistanceSynch+0x154>)
 8001064:	f000 ff84 	bl	8001f70 <ICU_voidGetCapturedValueSynch>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            if(LOC_eICU_Signal1_State == ICU_OK && LOC_eICU_Signal2_State == ICU_OK)
 800106e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001072:	2b03      	cmp	r3, #3
 8001074:	d147      	bne.n	8001106 <US_voidGetDistanceSynch+0x136>
 8001076:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800107a:	2b03      	cmp	r3, #3
 800107c:	d143      	bne.n	8001106 <US_voidGetDistanceSynch+0x136>
            {
            	/*	Set it as valid Reading	*/
            	LOC_eReturnState = US_VALID_READING;
 800107e:	2301      	movs	r3, #1
 8001080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                /*  Reset The Counter   */
                if (IC_Val2 > IC_Val1)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	429a      	cmp	r2, r3
 800108a:	d904      	bls.n	8001096 <US_voidGetDistanceSynch+0xc6>
                {
                    Difference = IC_Val2-IC_Val1;
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
 8001094:	e00a      	b.n	80010ac <US_voidGetDistanceSynch+0xdc>
                }

                else if (IC_Val1 > IC_Val2)
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	429a      	cmp	r2, r3
 800109c:	d906      	bls.n	80010ac <US_voidGetDistanceSynch+0xdc>
                {
                    Difference = (Global_ICU_TIMx.ICU_Max_Counting - IC_Val1) + IC_Val2;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <US_voidGetDistanceSynch+0x154>)
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad2      	subs	r2, r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // Tick Time = 0.25 ;
                // 	DISTANCE(M) = (DIFF * 0.017)/(TIM_CLK_MHz/(PS+1));
                Distance = (Difference * 0.017) / (8);
 80010ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ae:	f7ff f9d5 	bl	800045c <__aeabi_ui2d>
 80010b2:	a319      	add	r3, pc, #100	; (adr r3, 8001118 <US_voidGetDistanceSynch+0x148>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fa4a 	bl	8000550 <__aeabi_dmul>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <US_voidGetDistanceSynch+0x158>)
 80010ca:	f7ff fb6b 	bl	80007a4 <__aeabi_ddiv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4618      	mov	r0, r3
 80010d4:	4621      	mov	r1, r4
 80010d6:	f7ff fc4d 	bl	8000974 <__aeabi_d2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	83fb      	strh	r3, [r7, #30]
               // Distance = (Difference * (0.017));
                *pData_DistanceInCM = (Distance+FIXED_US_ERROR_IN_CM) ;
 80010de:	8bfb      	ldrh	r3, [r7, #30]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	801a      	strh	r2, [r3, #0]
                ICU_voidResetTimer(&Global_ICU_TIMx);
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <US_voidGetDistanceSynch+0x154>)
 80010ea:	f001 f89d 	bl	8002228 <ICU_voidResetTimer>
            	for(LOC_u32Counter=0 ; LOC_u32Counter < DELAYS_BETWEEN_READINGS_IN_TERMS_OF_COUNTS ;LOC_u32Counter++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	e003      	b.n	80010fc <US_voidGetDistanceSynch+0x12c>
            	{
            		__asm("NOP");
 80010f4:	bf00      	nop
            	for(LOC_u32Counter=0 ; LOC_u32Counter < DELAYS_BETWEEN_READINGS_IN_TERMS_OF_COUNTS ;LOC_u32Counter++)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001102:	d3f7      	bcc.n	80010f4 <US_voidGetDistanceSynch+0x124>
            if(LOC_eICU_Signal1_State == ICU_OK && LOC_eICU_Signal2_State == ICU_OK)
 8001104:	e002      	b.n	800110c <US_voidGetDistanceSynch+0x13c>
            	}

            }
            else
            {
            	LOC_eReturnState = US_INVALID_READING ;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
        }
    }
    return LOC_eReturnState ;
 800110c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001110:	4618      	mov	r0, r3
 8001112:	372c      	adds	r7, #44	; 0x2c
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	b020c49c 	.word	0xb020c49c
 800111c:	3f916872 	.word	0x3f916872
 8001120:	2000009c 	.word	0x2000009c
 8001124:	2000004c 	.word	0x2000004c
 8001128:	40200000 	.word	0x40200000

0800112c <delay_init>:
#include "STK/STK_interface.h"
#endif
#include "SW_Delay.h"

void delay_init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
#if DELAY_BASED_ON == STK_DELAY
    STK_voidInit();
 8001130:	f001 fa98 	bl	8002664 <STK_voidInit>
#endif

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <delay_us>:
void delay_us(u32 microseconds)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    for (u32 i = 0; i < loops; ++i)
    {
        __asm("NOP");
    }
#elif DELAY_BASED_ON == STK_DELAY
    STK_voidSetBusyWait_US((u16)microseconds);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fad1 	bl	80026ec <STK_voidSetBusyWait_US>
#endif
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <delay_ms>:

void delay_ms(u32 milliseconds) {
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
        : [loops] "+r" (loops)
        :
        :
    );
#elif DELAY_BASED_ON == STK_DELAY
    STK_voidSetBusyWait_MS((u16)milliseconds);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fa90 	bl	8002684 <STK_voidSetBusyWait_MS>
#endif

}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	460b      	mov	r3, r1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	4613      	mov	r3, r2
 800117c:	717b      	strb	r3, [r7, #5]

	u8 copy_u8Moder = 0, copy_OTYPER= 0 , copy_OSPEEDR = 0 , copy_PUPDR = 0  ;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	2300      	movs	r3, #0
 8001184:	73bb      	strb	r3, [r7, #14]
 8001186:	2300      	movs	r3, #0
 8001188:	737b      	strb	r3, [r7, #13]
 800118a:	2300      	movs	r3, #0
 800118c:	733b      	strb	r3, [r7, #12]

	copy_u8Moder |= (CHECK_BIT(Copy_u8Mode,6)<<1) | CHECK_BIT(Copy_u8Mode,5) ;
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	099b      	lsrs	r3, r3, #6
 8001192:	b2db      	uxtb	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	b25a      	sxtb	r2, r3
 800119e:	797b      	ldrb	r3, [r7, #5]
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	73fb      	strb	r3, [r7, #15]
	copy_OTYPER  |= CHECK_BIT(Copy_u8Mode,4);
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	73bb      	strb	r3, [r7, #14]
	copy_OSPEEDR |= (CHECK_BIT(Copy_u8Mode,3)<<1) | CHECK_BIT(Copy_u8Mode,2) ;
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	737b      	strb	r3, [r7, #13]
	copy_PUPDR   |=(CHECK_BIT(Copy_u8Mode,1)<<1) | CHECK_BIT(Copy_u8Mode,0) ;
 80011fe:	797b      	ldrb	r3, [r7, #5]
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	b25b      	sxtb	r3, r3
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	b25a      	sxtb	r2, r3
 800120e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	b25b      	sxtb	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b25a      	sxtb	r2, r3
 800121c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	b25b      	sxtb	r3, r3
 8001224:	733b      	strb	r3, [r7, #12]
	switch(Copy_u8Port)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3b11      	subs	r3, #17
 800122a:	2b03      	cmp	r3, #3
 800122c:	f200 8197 	bhi.w	800155e <GPIO_voidSetPinDirection+0x3f2>
 8001230:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <GPIO_voidSetPinDirection+0xcc>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	08001249 	.word	0x08001249
 800123c:	08001327 	.word	0x08001327
 8001240:	080013e5 	.word	0x080013e5
 8001244:	080014a3 	.word	0x080014a3
	{
		case PORTA :

			if (Copy_Pin <= PIN15 )
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f200 8189 	bhi.w	8001562 <GPIO_voidSetPinDirection+0x3f6>
			{
				GPIOA->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 8001250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	0052      	lsls	r2, r2, #1
 800125a:	2103      	movs	r1, #3
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	43d2      	mvns	r2, r2
 8001262:	4611      	mov	r1, r2
 8001264:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001268:	400b      	ands	r3, r1
 800126a:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER &= ~(1 << Copy_Pin );
 800126c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	79ba      	ldrb	r2, [r7, #6]
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	43d2      	mvns	r2, r2
 800127c:	4611      	mov	r1, r2
 800127e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001282:	400b      	ands	r3, r1
 8001284:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 8001286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	79ba      	ldrb	r2, [r7, #6]
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	2103      	movs	r1, #3
 8001292:	fa01 f202 	lsl.w	r2, r1, r2
 8001296:	43d2      	mvns	r2, r2
 8001298:	4611      	mov	r1, r2
 800129a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800129e:	400b      	ands	r3, r1
 80012a0:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 80012a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	0052      	lsls	r2, r2, #1
 80012ac:	2103      	movs	r1, #3
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	43d2      	mvns	r2, r2
 80012b4:	4611      	mov	r1, r2
 80012b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ba:	400b      	ands	r3, r1
 80012bc:	60d3      	str	r3, [r2, #12]


				GPIOA->MODER |= (copy_u8Moder <<  (2*Copy_Pin));
 80012be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	7bf9      	ldrb	r1, [r7, #15]
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	0052      	lsls	r2, r2, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	4611      	mov	r1, r2
 80012d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 80012d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	7bb9      	ldrb	r1, [r7, #14]
 80012e0:	79ba      	ldrb	r2, [r7, #6]
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ec:	430b      	orrs	r3, r1
 80012ee:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 80012f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	7b79      	ldrb	r1, [r7, #13]
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	0052      	lsls	r2, r2, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4611      	mov	r1, r2
 8001302:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001306:	430b      	orrs	r3, r1
 8001308:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 800130a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	7b39      	ldrb	r1, [r7, #12]
 8001312:	79ba      	ldrb	r2, [r7, #6]
 8001314:	0052      	lsls	r2, r2, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4611      	mov	r1, r2
 800131c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001320:	430b      	orrs	r3, r1
 8001322:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 8001324:	e11d      	b.n	8001562 <GPIO_voidSetPinDirection+0x3f6>
		case PORTB :
			if (Copy_Pin <= PIN15 )
 8001326:	79bb      	ldrb	r3, [r7, #6]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	f200 811c 	bhi.w	8001566 <GPIO_voidSetPinDirection+0x3fa>
			{

				GPIOB->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 800132e:	4b93      	ldr	r3, [pc, #588]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	0052      	lsls	r2, r2, #1
 8001336:	2103      	movs	r1, #3
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	43d2      	mvns	r2, r2
 800133e:	4611      	mov	r1, r2
 8001340:	4a8e      	ldr	r2, [pc, #568]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001342:	400b      	ands	r3, r1
 8001344:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER &= ~(1 << Copy_Pin );
 8001346:	4b8d      	ldr	r3, [pc, #564]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	43d2      	mvns	r2, r2
 8001354:	4611      	mov	r1, r2
 8001356:	4a89      	ldr	r2, [pc, #548]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001358:	400b      	ands	r3, r1
 800135a:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 800135c:	4b87      	ldr	r3, [pc, #540]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	79ba      	ldrb	r2, [r7, #6]
 8001362:	0052      	lsls	r2, r2, #1
 8001364:	2103      	movs	r1, #3
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	43d2      	mvns	r2, r2
 800136c:	4611      	mov	r1, r2
 800136e:	4a83      	ldr	r2, [pc, #524]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001370:	400b      	ands	r3, r1
 8001372:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	79ba      	ldrb	r2, [r7, #6]
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	2103      	movs	r1, #3
 800137e:	fa01 f202 	lsl.w	r2, r1, r2
 8001382:	43d2      	mvns	r2, r2
 8001384:	4611      	mov	r1, r2
 8001386:	4a7d      	ldr	r2, [pc, #500]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 8001388:	400b      	ands	r3, r1
 800138a:	60d3      	str	r3, [r2, #12]

				GPIOB->MODER |= (copy_u8Moder << (2*Copy_Pin)) ;
 800138c:	4b7b      	ldr	r3, [pc, #492]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7bf9      	ldrb	r1, [r7, #15]
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	0052      	lsls	r2, r2, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	4611      	mov	r1, r2
 800139c:	4a77      	ldr	r2, [pc, #476]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 800139e:	430b      	orrs	r3, r1
 80013a0:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER |= (copy_OTYPER << Copy_Pin );
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	7bb9      	ldrb	r1, [r7, #14]
 80013a8:	79ba      	ldrb	r2, [r7, #6]
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4a72      	ldr	r2, [pc, #456]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR |= (copy_OSPEEDR << ( 2*Copy_Pin )) ;
 80013b6:	4b71      	ldr	r3, [pc, #452]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	7b79      	ldrb	r1, [r7, #13]
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	0052      	lsls	r2, r2, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	4611      	mov	r1, r2
 80013c6:	4a6d      	ldr	r2, [pc, #436]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  |= (copy_PUPDR<< (2*Copy_Pin));
 80013cc:	4b6b      	ldr	r3, [pc, #428]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	7b39      	ldrb	r1, [r7, #12]
 80013d2:	79ba      	ldrb	r2, [r7, #6]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	4611      	mov	r1, r2
 80013dc:	4a67      	ldr	r2, [pc, #412]	; (800157c <GPIO_voidSetPinDirection+0x410>)
 80013de:	430b      	orrs	r3, r1
 80013e0:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 80013e2:	e0c0      	b.n	8001566 <GPIO_voidSetPinDirection+0x3fa>
		case PORTC :
			if (Copy_Pin <= PIN15 )
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f200 80bf 	bhi.w	800156a <GPIO_voidSetPinDirection+0x3fe>
			{
				GPIOC->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 80013ec:	4b64      	ldr	r3, [pc, #400]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	79ba      	ldrb	r2, [r7, #6]
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	2103      	movs	r1, #3
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	43d2      	mvns	r2, r2
 80013fc:	4611      	mov	r1, r2
 80013fe:	4a60      	ldr	r2, [pc, #384]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001400:	400b      	ands	r3, r1
 8001402:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER &= ~(1 << Copy_Pin );
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	79ba      	ldrb	r2, [r7, #6]
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	43d2      	mvns	r2, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4a5a      	ldr	r2, [pc, #360]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001416:	400b      	ands	r3, r1
 8001418:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 800141a:	4b59      	ldr	r3, [pc, #356]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	0052      	lsls	r2, r2, #1
 8001422:	2103      	movs	r1, #3
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	43d2      	mvns	r2, r2
 800142a:	4611      	mov	r1, r2
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 800142e:	400b      	ands	r3, r1
 8001430:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 8001432:	4b53      	ldr	r3, [pc, #332]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	79ba      	ldrb	r2, [r7, #6]
 8001438:	0052      	lsls	r2, r2, #1
 800143a:	2103      	movs	r1, #3
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	43d2      	mvns	r2, r2
 8001442:	4611      	mov	r1, r2
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001446:	400b      	ands	r3, r1
 8001448:	60d3      	str	r3, [r2, #12]

				GPIOC->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	7bf9      	ldrb	r1, [r7, #15]
 8001450:	79ba      	ldrb	r2, [r7, #6]
 8001452:	0052      	lsls	r2, r2, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4a49      	ldr	r2, [pc, #292]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 800145c:	430b      	orrs	r3, r1
 800145e:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	7bb9      	ldrb	r1, [r7, #14]
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4611      	mov	r1, r2
 800146e:	4a44      	ldr	r2, [pc, #272]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001470:	430b      	orrs	r3, r1
 8001472:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	7b79      	ldrb	r1, [r7, #13]
 800147a:	79ba      	ldrb	r2, [r7, #6]
 800147c:	0052      	lsls	r2, r2, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	4611      	mov	r1, r2
 8001484:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 8001486:	430b      	orrs	r3, r1
 8001488:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	7b39      	ldrb	r1, [r7, #12]
 8001490:	79ba      	ldrb	r2, [r7, #6]
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4611      	mov	r1, r2
 800149a:	4a39      	ldr	r2, [pc, #228]	; (8001580 <GPIO_voidSetPinDirection+0x414>)
 800149c:	430b      	orrs	r3, r1
 800149e:	60d3      	str	r3, [r2, #12]
			}
			else
			{
				/* error */
			}
			break ;
 80014a0:	e063      	b.n	800156a <GPIO_voidSetPinDirection+0x3fe>
		case PORTD :
			if (Copy_Pin <= PIN15 )
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d862      	bhi.n	800156e <GPIO_voidSetPinDirection+0x402>
			{

				GPIOD->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	79ba      	ldrb	r2, [r7, #6]
 80014ae:	0052      	lsls	r2, r2, #1
 80014b0:	2103      	movs	r1, #3
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	43d2      	mvns	r2, r2
 80014b8:	4611      	mov	r1, r2
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014bc:	400b      	ands	r3, r1
 80014be:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER &= ~(1 << Copy_Pin );
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	79ba      	ldrb	r2, [r7, #6]
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	43d2      	mvns	r2, r2
 80014ce:	4611      	mov	r1, r2
 80014d0:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014d2:	400b      	ands	r3, r1
 80014d4:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	79ba      	ldrb	r2, [r7, #6]
 80014dc:	0052      	lsls	r2, r2, #1
 80014de:	2103      	movs	r1, #3
 80014e0:	fa01 f202 	lsl.w	r2, r1, r2
 80014e4:	43d2      	mvns	r2, r2
 80014e6:	4611      	mov	r1, r2
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014ea:	400b      	ands	r3, r1
 80014ec:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	79ba      	ldrb	r2, [r7, #6]
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	2103      	movs	r1, #3
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	43d2      	mvns	r2, r2
 80014fe:	4611      	mov	r1, r2
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001502:	400b      	ands	r3, r1
 8001504:	60d3      	str	r3, [r2, #12]

				GPIOD->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	7bf9      	ldrb	r1, [r7, #15]
 800150c:	79ba      	ldrb	r2, [r7, #6]
 800150e:	0052      	lsls	r2, r2, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4611      	mov	r1, r2
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001518:	430b      	orrs	r3, r1
 800151a:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	7bb9      	ldrb	r1, [r7, #14]
 8001522:	79ba      	ldrb	r2, [r7, #6]
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	4611      	mov	r1, r2
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 800152c:	430b      	orrs	r3, r1
 800152e:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	7b79      	ldrb	r1, [r7, #13]
 8001536:	79ba      	ldrb	r2, [r7, #6]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	4611      	mov	r1, r2
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001542:	430b      	orrs	r3, r1
 8001544:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	7b39      	ldrb	r1, [r7, #12]
 800154c:	79ba      	ldrb	r2, [r7, #6]
 800154e:	0052      	lsls	r2, r2, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <GPIO_voidSetPinDirection+0x418>)
 8001558:	430b      	orrs	r3, r1
 800155a:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 800155c:	e007      	b.n	800156e <GPIO_voidSetPinDirection+0x402>
		default : break ;	
 800155e:	bf00      	nop
 8001560:	e006      	b.n	8001570 <GPIO_voidSetPinDirection+0x404>
			break;
 8001562:	bf00      	nop
 8001564:	e004      	b.n	8001570 <GPIO_voidSetPinDirection+0x404>
			break;
 8001566:	bf00      	nop
 8001568:	e002      	b.n	8001570 <GPIO_voidSetPinDirection+0x404>
			break ;
 800156a:	bf00      	nop
 800156c:	e000      	b.n	8001570 <GPIO_voidSetPinDirection+0x404>
			break;
 800156e:	bf00      	nop
	}

}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800
 8001584:	48000c00 	.word	0x48000c00

08001588 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	460b      	mov	r3, r1
 8001594:	71bb      	strb	r3, [r7, #6]
 8001596:	4613      	mov	r3, r2
 8001598:	717b      	strb	r3, [r7, #5]
	//GPIOA->BSRR = 0x0000ffff;
	switch(Copy_u8Port)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	3b11      	subs	r3, #17
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d858      	bhi.n	8001654 <GPIO_voidSetPinValue+0xcc>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <GPIO_voidSetPinValue+0x20>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015e3 	.word	0x080015e3
 80015b0:	08001609 	.word	0x08001609
 80015b4:	0800162f 	.word	0x0800162f
	{
		case PORTA :		
			switch (Copy_u8Value)
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <GPIO_voidSetPinValue+0x4a>
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d000      	beq.n	80015c4 <GPIO_voidSetPinValue+0x3c>
				case LOW  :	
					GPIOA->BRR = (1 << Copy_Pin);
					break ;
				default :
					/*error */ 
					break ; 
 80015c2:	e00d      	b.n	80015e0 <GPIO_voidSetPinValue+0x58>
					GPIOA->BSRR = (1 << Copy_Pin);
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ce:	619a      	str	r2, [r3, #24]
					break ;
 80015d0:	e006      	b.n	80015e0 <GPIO_voidSetPinValue+0x58>
					GPIOA->BRR = (1 << Copy_Pin);
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	2201      	movs	r2, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
					break ;
 80015de:	bf00      	nop
			}	
			break ; 
 80015e0:	e039      	b.n	8001656 <GPIO_voidSetPinValue+0xce>
		case PORTB :
			switch (Copy_u8Value)
 80015e2:	797b      	ldrb	r3, [r7, #5]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <GPIO_voidSetPinValue+0x72>
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d000      	beq.n	80015ee <GPIO_voidSetPinValue+0x66>
				case LOW  :	
					GPIOB->BRR = (1 << Copy_Pin);
					break ;
				default :
					/*error */ 
					break ; 
 80015ec:	e00b      	b.n	8001606 <GPIO_voidSetPinValue+0x7e>
					GPIOB->BSRR = (1 << Copy_Pin);
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	2201      	movs	r2, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <GPIO_voidSetPinValue+0xdc>)
 80015f6:	619a      	str	r2, [r3, #24]
					break ;
 80015f8:	e005      	b.n	8001606 <GPIO_voidSetPinValue+0x7e>
					GPIOB->BRR = (1 << Copy_Pin);
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	2201      	movs	r2, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <GPIO_voidSetPinValue+0xdc>)
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
					break ;
 8001604:	bf00      	nop
			}			
			break ;
 8001606:	e026      	b.n	8001656 <GPIO_voidSetPinValue+0xce>
		case PORTC	:
			switch (Copy_u8Value)
 8001608:	797b      	ldrb	r3, [r7, #5]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <GPIO_voidSetPinValue+0x98>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d000      	beq.n	8001614 <GPIO_voidSetPinValue+0x8c>
				case LOW  :	
					GPIOC->BRR = (1 << Copy_Pin);
					break ;
				default :
					/*error */ 
					break ; 
 8001612:	e00b      	b.n	800162c <GPIO_voidSetPinValue+0xa4>
					GPIOC->BSRR = (1 << Copy_Pin);
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2201      	movs	r2, #1
 8001618:	409a      	lsls	r2, r3
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <GPIO_voidSetPinValue+0xe0>)
 800161c:	619a      	str	r2, [r3, #24]
					break ;
 800161e:	e005      	b.n	800162c <GPIO_voidSetPinValue+0xa4>
					GPIOC->BRR = (1 << Copy_Pin);
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	2201      	movs	r2, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <GPIO_voidSetPinValue+0xe0>)
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
					break ;
 800162a:	bf00      	nop
			}	
			break ;
 800162c:	e013      	b.n	8001656 <GPIO_voidSetPinValue+0xce>
			case PORTD	:
				switch (Copy_u8Value)
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <GPIO_voidSetPinValue+0xbe>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d000      	beq.n	800163a <GPIO_voidSetPinValue+0xb2>
					case LOW  :
						GPIOD->BRR = (1 << Copy_Pin);
						break ;
					default :
						/*error */
						break ;
 8001638:	e00b      	b.n	8001652 <GPIO_voidSetPinValue+0xca>
						GPIOD->BSRR = (1 << Copy_Pin);
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	2201      	movs	r2, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <GPIO_voidSetPinValue+0xe4>)
 8001642:	619a      	str	r2, [r3, #24]
						break ;
 8001644:	e005      	b.n	8001652 <GPIO_voidSetPinValue+0xca>
						GPIOD->BRR = (1 << Copy_Pin);
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	2201      	movs	r2, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <GPIO_voidSetPinValue+0xe4>)
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
						break ;
 8001650:	bf00      	nop
				}
				break ;
 8001652:	e000      	b.n	8001656 <GPIO_voidSetPinValue+0xce>
		default :
		//error
			break ;
 8001654:	bf00      	nop
	}

}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	48000c00 	.word	0x48000c00

08001670 <GPIO_voidSetAFIO>:
	}
	return LOC_u8Result ;
}

void GPIO_voidSetAFIO(u8 Copy_u8Port, Pin_t Copy_Pin ,AFR_t AFRy)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	460b      	mov	r3, r1
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	4613      	mov	r3, r2
 8001680:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3b11      	subs	r3, #17
 8001686:	2b03      	cmp	r3, #3
 8001688:	f200 808c 	bhi.w	80017a4 <GPIO_voidSetAFIO+0x134>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <GPIO_voidSetAFIO+0x24>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016eb 	.word	0x080016eb
 800169c:	08001729 	.word	0x08001729
 80016a0:	08001767 	.word	0x08001767
	{
		case PORTA :
			if(Copy_Pin <= PIN7)
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d80d      	bhi.n	80016c6 <GPIO_voidSetAFIO+0x56>
			{
				/* 			RESET		*/
				GPIOA->AFRL |= (AFRy << Copy_Pin*4) ;
 80016aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	7979      	ldrb	r1, [r7, #5]
 80016b2:	79ba      	ldrb	r2, [r7, #6]
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	4611      	mov	r1, r2
 80016bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 80016c4:	e070      	b.n	80017a8 <GPIO_voidSetAFIO+0x138>
			else if (Copy_Pin <= PIN15 )
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d86d      	bhi.n	80017a8 <GPIO_voidSetAFIO+0x138>
				GPIOA->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 80016cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	7979      	ldrb	r1, [r7, #5]
 80016d4:	79ba      	ldrb	r2, [r7, #6]
 80016d6:	3a08      	subs	r2, #8
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	4611      	mov	r1, r2
 80016e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 80016e8:	e05e      	b.n	80017a8 <GPIO_voidSetAFIO+0x138>
		case PORTB :
			if(Copy_Pin <= PIN7)
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d80b      	bhi.n	8001708 <GPIO_voidSetAFIO+0x98>
			{
				/* 			RESET		*/
				GPIOB->AFRL |= (AFRy << Copy_Pin*4) ;
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <GPIO_voidSetAFIO+0x154>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	7979      	ldrb	r1, [r7, #5]
 80016f6:	79ba      	ldrb	r2, [r7, #6]
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	4611      	mov	r1, r2
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <GPIO_voidSetAFIO+0x154>)
 8001702:	430b      	orrs	r3, r1
 8001704:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 8001706:	e051      	b.n	80017ac <GPIO_voidSetAFIO+0x13c>
			else if (Copy_Pin <= PIN15 )
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	d84e      	bhi.n	80017ac <GPIO_voidSetAFIO+0x13c>
				GPIOB->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <GPIO_voidSetAFIO+0x154>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	7979      	ldrb	r1, [r7, #5]
 8001714:	79ba      	ldrb	r2, [r7, #6]
 8001716:	3a08      	subs	r2, #8
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	4611      	mov	r1, r2
 8001720:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <GPIO_voidSetAFIO+0x154>)
 8001722:	430b      	orrs	r3, r1
 8001724:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 8001726:	e041      	b.n	80017ac <GPIO_voidSetAFIO+0x13c>
		case PORTC :
			if(Copy_Pin <= PIN7)
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	2b07      	cmp	r3, #7
 800172c:	d80b      	bhi.n	8001746 <GPIO_voidSetAFIO+0xd6>
			{
				/* 			RESET		*/
				GPIOC->AFRL |= (AFRy << Copy_Pin*4) ;
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <GPIO_voidSetAFIO+0x158>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	7979      	ldrb	r1, [r7, #5]
 8001734:	79ba      	ldrb	r2, [r7, #6]
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	4611      	mov	r1, r2
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <GPIO_voidSetAFIO+0x158>)
 8001740:	430b      	orrs	r3, r1
 8001742:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 8001744:	e034      	b.n	80017b0 <GPIO_voidSetAFIO+0x140>
			else if (Copy_Pin <= PIN15 )
 8001746:	79bb      	ldrb	r3, [r7, #6]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d831      	bhi.n	80017b0 <GPIO_voidSetAFIO+0x140>
				GPIOC->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <GPIO_voidSetAFIO+0x158>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	7979      	ldrb	r1, [r7, #5]
 8001752:	79ba      	ldrb	r2, [r7, #6]
 8001754:	3a08      	subs	r2, #8
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4611      	mov	r1, r2
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <GPIO_voidSetAFIO+0x158>)
 8001760:	430b      	orrs	r3, r1
 8001762:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 8001764:	e024      	b.n	80017b0 <GPIO_voidSetAFIO+0x140>
		case PORTD :
			if(Copy_Pin <= PIN7)
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	2b07      	cmp	r3, #7
 800176a:	d80b      	bhi.n	8001784 <GPIO_voidSetAFIO+0x114>
			{
				/* 			RESET		*/
				GPIOD->AFRL |= (AFRy << Copy_Pin*4) ;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <GPIO_voidSetAFIO+0x15c>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	7979      	ldrb	r1, [r7, #5]
 8001772:	79ba      	ldrb	r2, [r7, #6]
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4611      	mov	r1, r2
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <GPIO_voidSetAFIO+0x15c>)
 800177e:	430b      	orrs	r3, r1
 8001780:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 8001782:	e017      	b.n	80017b4 <GPIO_voidSetAFIO+0x144>
			else if (Copy_Pin <= PIN15 )
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d814      	bhi.n	80017b4 <GPIO_voidSetAFIO+0x144>
				GPIOD->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <GPIO_voidSetAFIO+0x15c>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	7979      	ldrb	r1, [r7, #5]
 8001790:	79ba      	ldrb	r2, [r7, #6]
 8001792:	3a08      	subs	r2, #8
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	4611      	mov	r1, r2
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <GPIO_voidSetAFIO+0x15c>)
 800179e:	430b      	orrs	r3, r1
 80017a0:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 80017a2:	e007      	b.n	80017b4 <GPIO_voidSetAFIO+0x144>
		default :
			/* error */
			break ;
 80017a4:	bf00      	nop
 80017a6:	e006      	b.n	80017b6 <GPIO_voidSetAFIO+0x146>
			break ;
 80017a8:	bf00      	nop
 80017aa:	e004      	b.n	80017b6 <GPIO_voidSetAFIO+0x146>
			break ;
 80017ac:	bf00      	nop
 80017ae:	e002      	b.n	80017b6 <GPIO_voidSetAFIO+0x146>
			break ;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <GPIO_voidSetAFIO+0x146>
			break ;
 80017b4:	bf00      	nop
	}}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48000c00 	.word	0x48000c00

080017d0 <ICU_voidInit>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void ICU_voidInit(ICU_Config_t * p_userConfig)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    // Checking which Timer Used 
    if(p_userConfig->Timerx == Timer2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 8275 	bne.w	8001ccc <ICU_voidInit+0x4fc>
    {
        // Prescaler 
        TIM2->PSC = p_userConfig->ICU_u16Prescaler ; 
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	895a      	ldrh	r2, [r3, #10]
 80017e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
        TIM2->ARR = p_userConfig->ICU_Max_Counting ;
 80017ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e252      	b.n	8001ca2 <ICU_voidInit+0x4d2>
        {
        if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] != ICU_NOT_USED || p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] != ICU_NOT_USED)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	795b      	ldrb	r3, [r3, #5]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <ICU_voidInit+0x46>
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8243 	beq.w	8001c9c <ICU_voidInit+0x4cc>
        {
          if(LOC_u8Counter == 0)
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 808d 	bne.w	8001938 <ICU_voidInit+0x168>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR1 |= (0b01<<0) ;                  //CC1 channel is configured as input, IC1 is mapped on TI1
 800181e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6193      	str	r3, [r2, #24]
            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d110      	bne.n	800185c <ICU_voidInit+0x8c>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC1IE) ; 
 800183a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001844:	f023 0302 	bic.w	r3, r3, #2
 8001848:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC1DE) ; 
 800184a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001858:	60d3      	str	r3, [r2, #12]
 800185a:	e026      	b.n	80018aa <ICU_voidInit+0xda>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d110      	bne.n	800188a <ICU_voidInit+0xba>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC1IE) ; 
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC1DE) ; 
 8001878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001886:	60d3      	str	r3, [r2, #12]
 8001888:	e00f      	b.n	80018aa <ICU_voidInit+0xda>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC1IE) ; 
 800188a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC1DE) ; 
 800189a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a8:	60d3      	str	r3, [r2, #12]
            }

            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	795b      	ldrb	r3, [r3, #5]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d110      	bne.n	80018d8 <ICU_voidInit+0x108>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC1NP);
 80018b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c0:	f023 0308 	bic.w	r3, r3, #8
 80018c4:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC1P);
 80018c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d0:	f023 0302 	bic.w	r3, r3, #2
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	e026      	b.n	8001926 <ICU_voidInit+0x156>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	795b      	ldrb	r3, [r3, #5]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d110      	bne.n	8001906 <ICU_voidInit+0x136>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC1NP);
 80018e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC1P);
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e00f      	b.n	8001926 <ICU_voidInit+0x156>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC1NP);
 8001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC1P);
 8001916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC1E); 
 8001926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	e1b1      	b.n	8001c9c <ICU_voidInit+0x4cc>
          }
          else if (LOC_u8Counter == 1)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b01      	cmp	r3, #1
 800193c:	f040 808d 	bne.w	8001a5a <ICU_voidInit+0x28a>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR1 |= (0b01<<8) ;                  //CC2 channel is configured as input, IC1 is mapped on TI1
 8001940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6193      	str	r3, [r2, #24]
            
            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d110      	bne.n	800197e <ICU_voidInit+0x1ae>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC2IE) ; 
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC2DE) ; 
 800196c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800197a:	60d3      	str	r3, [r2, #12]
 800197c:	e026      	b.n	80019cc <ICU_voidInit+0x1fc>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d110      	bne.n	80019ac <ICU_voidInit+0x1dc>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC2IE) ; 
 800198a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC2DE) ; 
 800199a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019a8:	60d3      	str	r3, [r2, #12]
 80019aa:	e00f      	b.n	80019cc <ICU_voidInit+0x1fc>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC2IE) ; 
 80019ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC2DE) ; 
 80019bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ca:	60d3      	str	r3, [r2, #12]
            }
            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	795b      	ldrb	r3, [r3, #5]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d110      	bne.n	80019fa <ICU_voidInit+0x22a>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC2NP);
 80019d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019e6:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC2P);
 80019e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f2:	f023 0320 	bic.w	r3, r3, #32
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	e026      	b.n	8001a48 <ICU_voidInit+0x278>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	795b      	ldrb	r3, [r3, #5]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d110      	bne.n	8001a28 <ICU_voidInit+0x258>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC2NP);
 8001a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a14:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC2P);
 8001a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	e00f      	b.n	8001a48 <ICU_voidInit+0x278>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC2NP);
 8001a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a36:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC2P);
 8001a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC2E);            
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	e120      	b.n	8001c9c <ICU_voidInit+0x4cc>

          }
          else if (LOC_u8Counter == 2)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f040 808d 	bne.w	8001b7c <ICU_voidInit+0x3ac>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR2 |= (0b01<<0) ;                  //CC3 channel is configured as input, IC1 is mapped on TI1
 8001a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	61d3      	str	r3, [r2, #28]

            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d110      	bne.n	8001aa0 <ICU_voidInit+0x2d0>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC3IE) ; 
 8001a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a88:	f023 0308 	bic.w	r3, r3, #8
 8001a8c:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC3DE) ; 
 8001a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a9c:	60d3      	str	r3, [r2, #12]
 8001a9e:	e026      	b.n	8001aee <ICU_voidInit+0x31e>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	785b      	ldrb	r3, [r3, #1]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d110      	bne.n	8001ace <ICU_voidInit+0x2fe>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC3IE) ; 
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC3DE) ; 
 8001abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aca:	60d3      	str	r3, [r2, #12]
 8001acc:	e00f      	b.n	8001aee <ICU_voidInit+0x31e>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC3IE) ; 
 8001ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad8:	f023 0308 	bic.w	r3, r3, #8
 8001adc:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC3DE) ; 
 8001ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aec:	60d3      	str	r3, [r2, #12]
            }
            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	795b      	ldrb	r3, [r3, #5]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d110      	bne.n	8001b1c <ICU_voidInit+0x34c>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC3NP);
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b08:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC3P);
 8001b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	e026      	b.n	8001b6a <ICU_voidInit+0x39a>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	795b      	ldrb	r3, [r3, #5]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d110      	bne.n	8001b4a <ICU_voidInit+0x37a>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC3NP);
 8001b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b36:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC3P);
 8001b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e00f      	b.n	8001b6a <ICU_voidInit+0x39a>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC3NP);
 8001b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b58:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC3P);
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b68:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC3E); 
 8001b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	e08f      	b.n	8001c9c <ICU_voidInit+0x4cc>
          }
          else if (LOC_u8Counter == 3)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	f040 808c 	bne.w	8001c9c <ICU_voidInit+0x4cc>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR2 |= (0b01<<8) ;                  //CC4 channel is configured as input, IC1 is mapped on TI1
 8001b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	61d3      	str	r3, [r2, #28]

            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d110      	bne.n	8001bc2 <ICU_voidInit+0x3f2>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC4IE) ; 
 8001ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001baa:	f023 0310 	bic.w	r3, r3, #16
 8001bae:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC4DE) ; 
 8001bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bbe:	60d3      	str	r3, [r2, #12]
 8001bc0:	e026      	b.n	8001c10 <ICU_voidInit+0x440>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d110      	bne.n	8001bf0 <ICU_voidInit+0x420>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC4IE) ; 
 8001bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC4DE) ; 
 8001bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bec:	60d3      	str	r3, [r2, #12]
 8001bee:	e00f      	b.n	8001c10 <ICU_voidInit+0x440>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC4IE) ; 
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	f023 0310 	bic.w	r3, r3, #16
 8001bfe:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC4DE) ; 
 8001c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c0e:	60d3      	str	r3, [r2, #12]
            }
            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	795b      	ldrb	r3, [r3, #5]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d110      	bne.n	8001c3e <ICU_voidInit+0x46e>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC4NP);
 8001c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c2a:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC4P);
 8001c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e026      	b.n	8001c8c <ICU_voidInit+0x4bc>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d110      	bne.n	8001c6c <ICU_voidInit+0x49c>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC4NP);
 8001c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c58:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC4P);
 8001c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e00f      	b.n	8001c8c <ICU_voidInit+0x4bc>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC4NP);
 8001c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7a:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC4P);
 8001c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8a:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC4E); 
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9a:	6213      	str	r3, [r2, #32]
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	f67f ada9 	bls.w	80017fc <ICU_voidInit+0x2c>

          }
        }
      }  
    TIM2->SR |= (1<<0);
 8001caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6113      	str	r3, [r2, #16]
    // Enable Timer 
    TIM2->CR1 |= (1<< CR1_CEN);        
 8001cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6013      	str	r3, [r2, #0]
      }  
    TIM17->SR |= (1<<0);
    // Enable Timer 
    TIM17->CR1 |= (1<< CR1_CEN);        
    }  
}
 8001cca:	e148      	b.n	8001f5e <ICU_voidInit+0x78e>
    else if(p_userConfig->Timerx == Timer4)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	f040 809e 	bne.w	8001e12 <ICU_voidInit+0x642>
        TIM4->PSC = p_userConfig->ICU_u16Prescaler ; 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	895a      	ldrh	r2, [r3, #10]
 8001cda:	4b8c      	ldr	r3, [pc, #560]	; (8001f0c <ICU_voidInit+0x73c>)
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
        TIM4->ARR = p_userConfig->ICU_Max_Counting ;
 8001cde:	4a8b      	ldr	r2, [pc, #556]	; (8001f0c <ICU_voidInit+0x73c>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73bb      	strb	r3, [r7, #14]
 8001cea:	e081      	b.n	8001df0 <ICU_voidInit+0x620>
        if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] != ICU_NOT_USED || p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] != ICU_NOT_USED)
 8001cec:	7bbb      	ldrb	r3, [r7, #14]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <ICU_voidInit+0x534>
 8001cf8:	7bbb      	ldrb	r3, [r7, #14]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d072      	beq.n	8001dea <ICU_voidInit+0x61a>
          if(LOC_u8Counter == 0)
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d16f      	bne.n	8001dea <ICU_voidInit+0x61a>
            TIM4->CCMR1 |= (0b01<<0) ;                  //CC1 channel is configured as input, IC1 is mapped on TI1
 8001d0a:	4b80      	ldr	r3, [pc, #512]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a7f      	ldr	r2, [pc, #508]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6193      	str	r3, [r2, #24]
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001d16:	7bbb      	ldrb	r3, [r7, #14]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10c      	bne.n	8001d3c <ICU_voidInit+0x56c>
                TIM4->DIER &= ~(1<< DIER_CC1IE) ; 
 8001d22:	4b7a      	ldr	r3, [pc, #488]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4a79      	ldr	r2, [pc, #484]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d28:	f023 0302 	bic.w	r3, r3, #2
 8001d2c:	60d3      	str	r3, [r2, #12]
                TIM4->DIER &= ~(1<< DIER_CC1DE) ; 
 8001d2e:	4b77      	ldr	r3, [pc, #476]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4a76      	ldr	r2, [pc, #472]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d38:	60d3      	str	r3, [r2, #12]
 8001d3a:	e01e      	b.n	8001d7a <ICU_voidInit+0x5aa>
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d10c      	bne.n	8001d62 <ICU_voidInit+0x592>
                TIM4->DIER |= (1<< DIER_CC1IE) ; 
 8001d48:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a6f      	ldr	r2, [pc, #444]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	60d3      	str	r3, [r2, #12]
                TIM4->DIER &= ~(1<< DIER_CC1DE) ; 
 8001d54:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a6c      	ldr	r2, [pc, #432]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d5e:	60d3      	str	r3, [r2, #12]
 8001d60:	e00b      	b.n	8001d7a <ICU_voidInit+0x5aa>
                TIM4->DIER &= ~(1<< DIER_CC1IE) ; 
 8001d62:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d68:	f023 0302 	bic.w	r3, r3, #2
 8001d6c:	60d3      	str	r3, [r2, #12]
                TIM4->DIER |=  (1<< DIER_CC1DE) ; 
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d78:	60d3      	str	r3, [r2, #12]
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	795b      	ldrb	r3, [r3, #5]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10c      	bne.n	8001da0 <ICU_voidInit+0x5d0>
                TIM4->CCER &= ~(1<<CCER_CC1NP);
 8001d86:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d8c:	f023 0308 	bic.w	r3, r3, #8
 8001d90:	6213      	str	r3, [r2, #32]
                TIM4->CCER &= ~(1<<CCER_CC1P);
 8001d92:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a5d      	ldr	r2, [pc, #372]	; (8001f0c <ICU_voidInit+0x73c>)
 8001d98:	f023 0302 	bic.w	r3, r3, #2
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e01e      	b.n	8001dde <ICU_voidInit+0x60e>
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	795b      	ldrb	r3, [r3, #5]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d10c      	bne.n	8001dc6 <ICU_voidInit+0x5f6>
                TIM4->CCER &= ~(1<<CCER_CC1NP);
 8001dac:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <ICU_voidInit+0x73c>)
 8001db2:	f023 0308 	bic.w	r3, r3, #8
 8001db6:	6213      	str	r3, [r2, #32]
                TIM4->CCER |=  (1<<CCER_CC1P);
 8001db8:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e00b      	b.n	8001dde <ICU_voidInit+0x60e>
                TIM4->CCER |=  (1<<CCER_CC1NP);
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6213      	str	r3, [r2, #32]
                TIM4->CCER |=  (1<<CCER_CC1P);
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6213      	str	r3, [r2, #32]
            TIM4->CCER |= (1<< CCER_CC1E); 
 8001dde:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <ICU_voidInit+0x73c>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a4a      	ldr	r2, [pc, #296]	; (8001f0c <ICU_voidInit+0x73c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	3301      	adds	r3, #1
 8001dee:	73bb      	strb	r3, [r7, #14]
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f67f af7a 	bls.w	8001cec <ICU_voidInit+0x51c>
    TIM4->SR |= (1<<0);
 8001df8:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a43      	ldr	r2, [pc, #268]	; (8001f0c <ICU_voidInit+0x73c>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6113      	str	r3, [r2, #16]
    TIM4->CR1 |= (1<< CR1_CEN);        
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <ICU_voidInit+0x73c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a40      	ldr	r2, [pc, #256]	; (8001f0c <ICU_voidInit+0x73c>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	e0a5      	b.n	8001f5e <ICU_voidInit+0x78e>
    else if(p_userConfig->Timerx == Timer17)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	f040 80a1 	bne.w	8001f5e <ICU_voidInit+0x78e>
        TIM17->PSC = p_userConfig->ICU_u16Prescaler ; 
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	895a      	ldrh	r2, [r3, #10]
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <ICU_voidInit+0x740>)
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
        TIM17->ARR = p_userConfig->ICU_Max_Counting ;
 8001e24:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <ICU_voidInit+0x740>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	737b      	strb	r3, [r7, #13]
 8001e30:	e085      	b.n	8001f3e <ICU_voidInit+0x76e>
        if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] != ICU_NOT_USED || p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] != ICU_NOT_USED)
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	795b      	ldrb	r3, [r3, #5]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <ICU_voidInit+0x67a>
 8001e3e:	7b7b      	ldrb	r3, [r7, #13]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d076      	beq.n	8001f38 <ICU_voidInit+0x768>
          if(LOC_u8Counter == 0)
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d173      	bne.n	8001f38 <ICU_voidInit+0x768>
            TIM17->CCMR1 |= (0b01<<0) ;                  //CC1 channel is configured as input, IC1 is mapped on TI1
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <ICU_voidInit+0x740>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <ICU_voidInit+0x740>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6193      	str	r3, [r2, #24]
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10c      	bne.n	8001e82 <ICU_voidInit+0x6b2>
                TIM17->DIER &= ~(1<< DIER_CC1IE) ; 
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <ICU_voidInit+0x740>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <ICU_voidInit+0x740>)
 8001e6e:	f023 0302 	bic.w	r3, r3, #2
 8001e72:	60d3      	str	r3, [r2, #12]
                TIM17->DIER &= ~(1<< DIER_CC1DE) ; 
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <ICU_voidInit+0x740>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <ICU_voidInit+0x740>)
 8001e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e7e:	60d3      	str	r3, [r2, #12]
 8001e80:	e01e      	b.n	8001ec0 <ICU_voidInit+0x6f0>
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d10c      	bne.n	8001ea8 <ICU_voidInit+0x6d8>
                TIM17->DIER |= (1<< DIER_CC1IE) ; 
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <ICU_voidInit+0x740>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <ICU_voidInit+0x740>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	60d3      	str	r3, [r2, #12]
                TIM17->DIER &= ~(1<< DIER_CC1DE) ; 
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <ICU_voidInit+0x740>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <ICU_voidInit+0x740>)
 8001ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ea4:	60d3      	str	r3, [r2, #12]
 8001ea6:	e00b      	b.n	8001ec0 <ICU_voidInit+0x6f0>
                TIM17->DIER &= ~(1<< DIER_CC1IE) ; 
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <ICU_voidInit+0x740>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <ICU_voidInit+0x740>)
 8001eae:	f023 0302 	bic.w	r3, r3, #2
 8001eb2:	60d3      	str	r3, [r2, #12]
                TIM17->DIER |=  (1<< DIER_CC1DE) ; 
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <ICU_voidInit+0x740>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <ICU_voidInit+0x740>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebe:	60d3      	str	r3, [r2, #12]
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	795b      	ldrb	r3, [r3, #5]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10c      	bne.n	8001ee6 <ICU_voidInit+0x716>
                TIM17->CCER &= ~(1<<CCER_CC1NP);
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <ICU_voidInit+0x740>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <ICU_voidInit+0x740>)
 8001ed2:	f023 0308 	bic.w	r3, r3, #8
 8001ed6:	6213      	str	r3, [r2, #32]
                TIM17->CCER &= ~(1<<CCER_CC1P);
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <ICU_voidInit+0x740>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <ICU_voidInit+0x740>)
 8001ede:	f023 0302 	bic.w	r3, r3, #2
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e022      	b.n	8001f2c <ICU_voidInit+0x75c>
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	795b      	ldrb	r3, [r3, #5]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d110      	bne.n	8001f14 <ICU_voidInit+0x744>
                TIM17->CCER &= ~(1<<CCER_CC1NP);
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <ICU_voidInit+0x740>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <ICU_voidInit+0x740>)
 8001ef8:	f023 0308 	bic.w	r3, r3, #8
 8001efc:	6213      	str	r3, [r2, #32]
                TIM17->CCER |=  (1<<CCER_CC1P);
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <ICU_voidInit+0x740>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <ICU_voidInit+0x740>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	e00f      	b.n	8001f2c <ICU_voidInit+0x75c>
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40014800 	.word	0x40014800
                TIM17->CCER |=  (1<<CCER_CC1NP);
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6213      	str	r3, [r2, #32]
                TIM17->CCER |=  (1<<CCER_CC1P);
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6213      	str	r3, [r2, #32]
            TIM17->CCER |= (1<< CCER_CC1E); 
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001f38:	7b7b      	ldrb	r3, [r7, #13]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	737b      	strb	r3, [r7, #13]
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	f67f af76 	bls.w	8001e32 <ICU_voidInit+0x662>
    TIM17->SR |= (1<<0);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6113      	str	r3, [r2, #16]
    TIM17->CR1 |= (1<< CR1_CEN);        
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <ICU_voidInit+0x79c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40014800 	.word	0x40014800

08001f70 <ICU_voidGetCapturedValueSynch>:

ICU_Error_t ICU_voidGetCapturedValueSynch(ICU_Config_t * p_userConfig , Channel_ID_t CHANNEL_x , u32 *ptr_u32CapturedValue)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	72fb      	strb	r3, [r7, #11]

#define FLAG_DETECTED (( TIM2->SR & ( 1<< ( CHANNEL_x+1 ) ) ) )
#define OVC_DTECTED	(( TIM2->SR & ( 1<< ( CHANNEL_x+9 ) ) ) )
#define PREDEFINED_TIMOUT	480000	// 60 ms
#define CHECK_TIMOUT	(LOC_u32TimeoutCounter > PREDEFINED_TIMOUT)
	ICU_Error_t LOC_eReturnError = ICU_OK ;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	75fb      	strb	r3, [r7, #23]
	u8 LOC_u8IsOvercapturedDetected = 0 ;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75bb      	strb	r3, [r7, #22]
	u32 LOC_u32TimeoutCounter = 0 ;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
    // Check Timer
    if(p_userConfig->Timerx == Timer2)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d142      	bne.n	8002018 <ICU_voidGetCapturedValueSynch+0xa8>
    {
    //		 ( ! ( ( FLAG == 0) || (OVC ==0) ) && !(TIMOUT > PRD)
       while ((! ( FLAG_DETECTED || LOC_u8IsOvercapturedDetected)) && !CHECK_TIMOUT)
 8001f92:	e00e      	b.n	8001fb2 <ICU_voidGetCapturedValueSynch+0x42>
        {
            // Wait for the capture flag to be set
        	LOC_u8IsOvercapturedDetected = OVC_DTECTED ;
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	3309      	adds	r3, #9
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	75bb      	strb	r3, [r7, #22]
        	LOC_u32TimeoutCounter++;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
       while ((! ( FLAG_DETECTED || LOC_u8IsOvercapturedDetected)) && !CHECK_TIMOUT)
 8001fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	7afa      	ldrb	r2, [r7, #11]
 8001fba:	3201      	adds	r2, #1
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <ICU_voidGetCapturedValueSynch+0x66>
 8001fc8:	7dbb      	ldrb	r3, [r7, #22]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <ICU_voidGetCapturedValueSynch+0x66>
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <ICU_voidGetCapturedValueSynch+0x114>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d9de      	bls.n	8001f94 <ICU_voidGetCapturedValueSynch+0x24>
        }
        if(LOC_u8IsOvercapturedDetected == 0 && !CHECK_TIMOUT)
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <ICU_voidGetCapturedValueSynch+0x88>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <ICU_voidGetCapturedValueSynch+0x114>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d809      	bhi.n	8001ff8 <ICU_voidGetCapturedValueSynch+0x88>
        {
            *ptr_u32CapturedValue = TIM2->CCRx[CHANNEL_x]    ;
 8001fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	330c      	adds	r3, #12
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e03e      	b.n	8002076 <ICU_voidGetCapturedValueSynch+0x106>
        }
        else
        {
        	if(LOC_u8IsOvercapturedDetected == 1)
 8001ff8:	7dbb      	ldrb	r3, [r7, #22]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <ICU_voidGetCapturedValueSynch+0x94>
        		LOC_eReturnError = ICU_OVER_CAPTURED ;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]
 8002002:	e038      	b.n	8002076 <ICU_voidGetCapturedValueSynch+0x106>
        	else if (CHECK_TIMOUT)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <ICU_voidGetCapturedValueSynch+0x114>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d902      	bls.n	8002012 <ICU_voidGetCapturedValueSynch+0xa2>
        	{
        		LOC_eReturnError = ICU_TIME_OUT ;
 800200c:	2301      	movs	r3, #1
 800200e:	75fb      	strb	r3, [r7, #23]
 8002010:	e031      	b.n	8002076 <ICU_voidGetCapturedValueSynch+0x106>
        	}
        	else
        	{
        		LOC_eReturnError = ICU_UNKOWN_ERR ;
 8002012:	2302      	movs	r3, #2
 8002014:	75fb      	strb	r3, [r7, #23]
 8002016:	e02e      	b.n	8002076 <ICU_voidGetCapturedValueSynch+0x106>
        	}
        }
    }
    else if(p_userConfig->Timerx == Timer4)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d113      	bne.n	8002048 <ICU_voidGetCapturedValueSynch+0xd8>
    {
        while (! ( TIM4->SR & ( 1<< ( CHANNEL_x+1 ) ) ) )
 8002020:	bf00      	nop
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <ICU_voidGetCapturedValueSynch+0x118>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	7afa      	ldrb	r2, [r7, #11]
 8002028:	3201      	adds	r2, #1
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f5      	beq.n	8002022 <ICU_voidGetCapturedValueSynch+0xb2>
        {
            // Wait for the capture flag to be set
        }
        *ptr_u32CapturedValue = TIM4->CCRx[CHANNEL_x]    ;
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <ICU_voidGetCapturedValueSynch+0x118>)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	330c      	adds	r3, #12
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e016      	b.n	8002076 <ICU_voidGetCapturedValueSynch+0x106>
    }
    else if(p_userConfig->Timerx == Timer17)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b12      	cmp	r3, #18
 800204e:	d112      	bne.n	8002076 <ICU_voidGetCapturedValueSynch+0x106>
    {
        while (! ( TIM17->SR & ( 1<< ( CHANNEL_x+1 ) ) ) )
 8002050:	bf00      	nop
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <ICU_voidGetCapturedValueSynch+0x11c>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	7afa      	ldrb	r2, [r7, #11]
 8002058:	3201      	adds	r2, #1
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f5      	beq.n	8002052 <ICU_voidGetCapturedValueSynch+0xe2>
        {
            // Wait for the capture flag to be set
        }
        *ptr_u32CapturedValue = TIM17->CCRx[CHANNEL_x]    ;
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <ICU_voidGetCapturedValueSynch+0x11c>)
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	330c      	adds	r3, #12
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
    }
    return LOC_eReturnError ;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	00075300 	.word	0x00075300
 8002088:	40000800 	.word	0x40000800
 800208c:	40014800 	.word	0x40014800

08002090 <ICU_voidGetCapturedValueAsynch>:

void ICU_voidGetCapturedValueAsynch(ICU_Config_t * p_userConfig , Channel_ID_t CHANNEL_x , void (*pCallback)(u32 CurrentCounts) )
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	460b      	mov	r3, r1
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	72fb      	strb	r3, [r7, #11]
    // Check Timer
    if(p_userConfig->Timerx == Timer2)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <ICU_voidGetCapturedValueAsynch+0x22>
    {
    	GlobalP2F_TIM2[CHANNEL_x] = pCallback ;
 80020a6:	7afb      	ldrb	r3, [r7, #11]
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <ICU_voidGetCapturedValueAsynch+0x54>)
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    else if(p_userConfig->Timerx == Timer17)
    {
    	GlobalP2F_TIM17[CHANNEL_x] = pCallback ;
    }
}
 80020b0:	e012      	b.n	80020d8 <ICU_voidGetCapturedValueAsynch+0x48>
    else if(p_userConfig->Timerx == Timer4)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d105      	bne.n	80020c6 <ICU_voidGetCapturedValueAsynch+0x36>
    	GlobalP2F_TIM4[CHANNEL_x] = pCallback ;
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	490a      	ldr	r1, [pc, #40]	; (80020e8 <ICU_voidGetCapturedValueAsynch+0x58>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020c4:	e008      	b.n	80020d8 <ICU_voidGetCapturedValueAsynch+0x48>
    else if(p_userConfig->Timerx == Timer17)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d104      	bne.n	80020d8 <ICU_voidGetCapturedValueAsynch+0x48>
    	GlobalP2F_TIM17[CHANNEL_x] = pCallback ;
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	4906      	ldr	r1, [pc, #24]	; (80020ec <ICU_voidGetCapturedValueAsynch+0x5c>)
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	20000108 	.word	0x20000108
 80020e8:	200000f8 	.word	0x200000f8
 80020ec:	200000e8 	.word	0x200000e8

080020f0 <ICU_voidDisableChannelIRQ>:

    }
}

void ICU_voidDisableChannelIRQ(ICU_Config_t * p_userConfig , Channel_ID_t CHANNEL_x )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
    if(p_userConfig->Timerx == Timer2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d12f      	bne.n	8002164 <ICU_voidDisableChannelIRQ+0x74>
    {
  	  if (CHANNEL_x == 0)
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <ICU_voidDisableChannelIRQ+0x2c>
  	  {
          TIM2->DIER &= ~(1<< DIER_CC1IE) ;
 800210a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002114:	f023 0302 	bic.w	r3, r3, #2
 8002118:	60d3      	str	r3, [r2, #12]
	  else
	  {

	  }
    }
}
 800211a:	e07a      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 1)
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d108      	bne.n	8002134 <ICU_voidDisableChannelIRQ+0x44>
          TIM2->DIER &= ~(1<< DIER_CC2IE) ;
 8002122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	60d3      	str	r3, [r2, #12]
}
 8002132:	e06e      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 2)
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d108      	bne.n	800214c <ICU_voidDisableChannelIRQ+0x5c>
          TIM2->DIER &= ~(1<< DIER_CC3IE) ;
 800213a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002144:	f023 0308 	bic.w	r3, r3, #8
 8002148:	60d3      	str	r3, [r2, #12]
}
 800214a:	e062      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 3)
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d15f      	bne.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
          TIM2->DIER &= ~(1<< DIER_CC4IE) ;
 8002152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800215c:	f023 0310 	bic.w	r3, r3, #16
 8002160:	60d3      	str	r3, [r2, #12]
}
 8002162:	e056      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
    else if(p_userConfig->Timerx == Timer4)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d127      	bne.n	80021bc <ICU_voidDisableChannelIRQ+0xcc>
  	  if (CHANNEL_x == 0)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <ICU_voidDisableChannelIRQ+0x90>
          TIM4->DIER &= ~(1<< DIER_CC1IE) ;
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	60d3      	str	r3, [r2, #12]
}
 800217e:	e048      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 1)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d106      	bne.n	8002194 <ICU_voidDisableChannelIRQ+0xa4>
          TIM4->DIER &= ~(1<< DIER_CC2IE) ;
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	60d3      	str	r3, [r2, #12]
}
 8002192:	e03e      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 2)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d106      	bne.n	80021a8 <ICU_voidDisableChannelIRQ+0xb8>
          TIM4->DIER &= ~(1<< DIER_CC3IE) ;
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4a20      	ldr	r2, [pc, #128]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 80021a0:	f023 0308 	bic.w	r3, r3, #8
 80021a4:	60d3      	str	r3, [r2, #12]
}
 80021a6:	e034      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 3)
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d131      	bne.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
          TIM4->DIER &= ~(1<< DIER_CC4IE) ;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <ICU_voidDisableChannelIRQ+0x130>)
 80021b4:	f023 0310 	bic.w	r3, r3, #16
 80021b8:	60d3      	str	r3, [r2, #12]
}
 80021ba:	e02a      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
    else if(p_userConfig->Timerx == Timer17)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d126      	bne.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
  	  if (CHANNEL_x == 0)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <ICU_voidDisableChannelIRQ+0xe8>
          TIM17->DIER &= ~(1<< DIER_CC1IE) ;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 80021d0:	f023 0302 	bic.w	r3, r3, #2
 80021d4:	60d3      	str	r3, [r2, #12]
}
 80021d6:	e01c      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 1)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <ICU_voidDisableChannelIRQ+0xfc>
          TIM17->DIER &= ~(1<< DIER_CC2IE) ;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	60d3      	str	r3, [r2, #12]
}
 80021ea:	e012      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 2)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d106      	bne.n	8002200 <ICU_voidDisableChannelIRQ+0x110>
          TIM17->DIER &= ~(1<< DIER_CC3IE) ;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 80021f8:	f023 0308 	bic.w	r3, r3, #8
 80021fc:	60d3      	str	r3, [r2, #12]
}
 80021fe:	e008      	b.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 3)
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d105      	bne.n	8002212 <ICU_voidDisableChannelIRQ+0x122>
          TIM17->DIER &= ~(1<< DIER_CC4IE) ;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4a06      	ldr	r2, [pc, #24]	; (8002224 <ICU_voidDisableChannelIRQ+0x134>)
 800220c:	f023 0310 	bic.w	r3, r3, #16
 8002210:	60d3      	str	r3, [r2, #12]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40000800 	.word	0x40000800
 8002224:	40014800 	.word	0x40014800

08002228 <ICU_voidResetTimer>:
	  }

    }
}
void ICU_voidResetTimer(ICU_Config_t * p_userConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    if(p_userConfig->Timerx == Timer2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <ICU_voidResetTimer+0x1a>
    {
        TIM2->CNT  = 0 ;
 8002238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800223c:	2200      	movs	r2, #0
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    else if(p_userConfig->Timerx == Timer17)
    {
        TIM17->CNT  = 0 ;
    }
}
 8002240:	e00e      	b.n	8002260 <ICU_voidResetTimer+0x38>
    else if(p_userConfig->Timerx == Timer4)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d103      	bne.n	8002252 <ICU_voidResetTimer+0x2a>
        TIM4->CNT  = 0 ;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <ICU_voidResetTimer+0x44>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002250:	e006      	b.n	8002260 <ICU_voidResetTimer+0x38>
    else if(p_userConfig->Timerx == Timer17)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b12      	cmp	r3, #18
 8002258:	d102      	bne.n	8002260 <ICU_voidResetTimer+0x38>
        TIM17->CNT  = 0 ;
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <ICU_voidResetTimer+0x48>)
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40000800 	.word	0x40000800
 8002270:	40014800 	.word	0x40014800

08002274 <TIM2_IRQHandler>:
/************************************* IRQs ******************************************/

void TIM2_IRQHandler (void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
	u32 ChannelReading = 0 ;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
	// Check Channel
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_3+1 ) ) ) )
 800227e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <TIM2_IRQHandler+0x30>
    {
    	if(GlobalP2F_TIM2[CHANNEL_3] != NULL)
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <TIM2_IRQHandler+0xac>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <TIM2_IRQHandler+0x30>
    	{
    		ChannelReading = TIM2->CCRx[CHANNEL_3] ;
 8002294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	607b      	str	r3, [r7, #4]
    		GlobalP2F_TIM2[CHANNEL_3](ChannelReading) ;
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <TIM2_IRQHandler+0xac>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
    	}

    }
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_1+1 ) ) ) )
 80022a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <TIM2_IRQHandler+0x56>
	{
		// CH1
    	if(GlobalP2F_TIM2[CHANNEL_1] != NULL)
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <TIM2_IRQHandler+0xac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <TIM2_IRQHandler+0x56>
    	{
			ChannelReading = TIM2->CCRx[CHANNEL_1] ;
 80022ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	607b      	str	r3, [r7, #4]
			GlobalP2F_TIM2[CHANNEL_1](ChannelReading) ;
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <TIM2_IRQHandler+0xac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    	}
	}
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_2+1 ) ) ) )
 80022ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <TIM2_IRQHandler+0x7c>
	{
		if(GlobalP2F_TIM2[CHANNEL_2] != NULL)
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <TIM2_IRQHandler+0xac>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <TIM2_IRQHandler+0x7c>
		{
			ChannelReading = TIM2->CCRx[CHANNEL_2] ;
 80022e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	607b      	str	r3, [r7, #4]
			GlobalP2F_TIM2[CHANNEL_2](ChannelReading) ;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <TIM2_IRQHandler+0xac>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
		}
	}
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_4+1 ) ) ) )
 80022f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <TIM2_IRQHandler+0xa2>
	{
    	if(GlobalP2F_TIM2[CHANNEL_4] != NULL)
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <TIM2_IRQHandler+0xac>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <TIM2_IRQHandler+0xa2>
    	{
			ChannelReading = TIM2->CCRx[CHANNEL_4] ;
 8002306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	607b      	str	r3, [r7, #4]
			GlobalP2F_TIM2[CHANNEL_4](ChannelReading) ;
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <TIM2_IRQHandler+0xac>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
    	}
	}
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000108 	.word	0x20000108

08002324 <TIM4_IRQHandler>:

void TIM4_IRQHandler (void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
	u32 ChannelReading = 0 ;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
	// Check Channel
    if ( ( TIM4->SR & ( 1<< ( CHANNEL_1+1 ) ) ) )
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <TIM4_IRQHandler+0x34>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <TIM4_IRQHandler+0x2c>
    {
    	if(GlobalP2F_TIM4[CHANNEL_1] != NULL)
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <TIM4_IRQHandler+0x38>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <TIM4_IRQHandler+0x2c>
    	{
    		ChannelReading = TIM4->CCRx[CHANNEL_1] ;
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <TIM4_IRQHandler+0x34>)
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	607b      	str	r3, [r7, #4]
    		GlobalP2F_TIM4[CHANNEL_1](ChannelReading) ;
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <TIM4_IRQHandler+0x38>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
    	}

    }

}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40000800 	.word	0x40000800
 800235c:	200000f8 	.word	0x200000f8

08002360 <nvic_enableInterrupt>:
#include "nvic_reg.h"
#include "std_types.h"
#include "bit_math.h"

void nvic_enableInterrupt(u8 intId)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	if (intId>=0 && intId<32)
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b1f      	cmp	r3, #31
 800236e:	d805      	bhi.n	800237c <nvic_enableInterrupt+0x1c>
	{
		NVIC_ISER0_REG = (1<<intId);
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2201      	movs	r2, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <nvic_enableInterrupt+0x40>)
 8002378:	601a      	str	r2, [r3, #0]
	}
	else
	{

	}
}
 800237a:	e00b      	b.n	8002394 <nvic_enableInterrupt+0x34>
	else if (intId>=32 && intId<64)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2b1f      	cmp	r3, #31
 8002380:	d908      	bls.n	8002394 <nvic_enableInterrupt+0x34>
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b3f      	cmp	r3, #63	; 0x3f
 8002386:	d805      	bhi.n	8002394 <nvic_enableInterrupt+0x34>
		NVIC_ISER1_REG = (1<<(intId-32));
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	3b20      	subs	r3, #32
 800238c:	2201      	movs	r2, #1
 800238e:	409a      	lsls	r2, r3
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <nvic_enableInterrupt+0x44>)
 8002392:	601a      	str	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000e104 	.word	0xe000e104

080023a8 <PWM_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void PWM_voidInit(PWM_Config_t * p_userConfig)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

    if(p_userConfig->Timerx == Timer3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	f040 80b4 	bne.w	8002522 <PWM_voidInit+0x17a>
    {
      // Reset Usage Regs 
      TIM3->CCMR1 = 0x0000 ;
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <PWM_voidInit+0x188>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
      TIM3->CCMR2 = 0x0000 ;
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <PWM_voidInit+0x188>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
      TIM3->CR1 = 0x0000 ;
 80023c6:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <PWM_voidInit+0x188>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
      TIM3->CR2 = 0x0000 ;
 80023cc:	4b58      	ldr	r3, [pc, #352]	; (8002530 <PWM_voidInit+0x188>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
      TIM3->SMCR = 0x0000 ;
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <PWM_voidInit+0x188>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
      TIM3->DIER = 0x0000 ;
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <PWM_voidInit+0x188>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
      
      // Clock Selection : Internal Clock Source 
      TIM3->SMCR  &= ~(0b111 << SMCR_SMS) ;
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <PWM_voidInit+0x188>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4a53      	ldr	r2, [pc, #332]	; (8002530 <PWM_voidInit+0x188>)
 80023e4:	f023 0307 	bic.w	r3, r3, #7
 80023e8:	6093      	str	r3, [r2, #8]

      // Counting DIR      
      TIM3->CR1 &= ~(1<<4) ; // DIR BIT : 4
 80023ea:	4b51      	ldr	r3, [pc, #324]	; (8002530 <PWM_voidInit+0x188>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a50      	ldr	r2, [pc, #320]	; (8002530 <PWM_voidInit+0x188>)
 80023f0:	f023 0310 	bic.w	r3, r3, #16
 80023f4:	6013      	str	r3, [r2, #0]
      TIM3->CR1 |= (p_userConfig->DIR_xCOUNTING) ;
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <PWM_voidInit+0x188>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	7852      	ldrb	r2, [r2, #1]
 80023fe:	4611      	mov	r1, r2
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <PWM_voidInit+0x188>)
 8002402:	430b      	orrs	r3, r1
 8002404:	6013      	str	r3, [r2, #0]

      // Configure the prescaler 
      //   clock frequency = fCK_PSC / (PSC[15:0] + 1)
      //	975               = 8*10^6  / X            X ==
      TIM3->PSC  = 0 ;
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <PWM_voidInit+0x188>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	; 0x28

      // TOP Value 
      TIM3->ARR = (u16) p_userConfig->TIMx_u32TopValue ;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <PWM_voidInit+0x188>)
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
      
      // PWM Mode :  writing 110 (PWM mode 1) or ‘111 (PWM mode 2) in the OCxM bits in the TIMx_CCMRx register
      // enable the corresponding preload register by setting the OCxPE bit in the TIMx_CCMRx register
      // Enable capture/compare For Used Channels
      for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e073      	b.n	8002504 <PWM_voidInit+0x15c>
      {
        if(p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] != PWM_NOT_USED)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	7a1b      	ldrb	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d06a      	beq.n	80024fe <PWM_voidInit+0x156>
        {
          if(LOC_u8Counter == 0)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d117      	bne.n	800245e <PWM_voidInit+0xb6>
          {
              // CCMR1
              TIM3->CCMR1 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR1_OC1M);
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <PWM_voidInit+0x188>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	440a      	add	r2, r1
 8002438:	7a12      	ldrb	r2, [r2, #8]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	4611      	mov	r1, r2
 800243e:	4a3c      	ldr	r2, [pc, #240]	; (8002530 <PWM_voidInit+0x188>)
 8002440:	430b      	orrs	r3, r1
 8002442:	6193      	str	r3, [r2, #24]
              // enable the corresponding preload REGISTER
              TIM3->CCMR1 |=  (1 << CCMR1_OC1PE) ;
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <PWM_voidInit+0x188>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a39      	ldr	r2, [pc, #228]	; (8002530 <PWM_voidInit+0x188>)
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	6193      	str	r3, [r2, #24]
              // Enable capture/compare channel 1 output
              TIM3->CCER |= (1<<CCER_CC1E);
 8002450:	4b37      	ldr	r3, [pc, #220]	; (8002530 <PWM_voidInit+0x188>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a36      	ldr	r2, [pc, #216]	; (8002530 <PWM_voidInit+0x188>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e04f      	b.n	80024fe <PWM_voidInit+0x156>

          }
          else if (LOC_u8Counter == 1)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d117      	bne.n	8002494 <PWM_voidInit+0xec>
          {
              TIM3->CCMR1 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR1_OC2M);
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <PWM_voidInit+0x188>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	440a      	add	r2, r1
 800246e:	7a12      	ldrb	r2, [r2, #8]
 8002470:	0312      	lsls	r2, r2, #12
 8002472:	4611      	mov	r1, r2
 8002474:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <PWM_voidInit+0x188>)
 8002476:	430b      	orrs	r3, r1
 8002478:	6193      	str	r3, [r2, #24]
              TIM3->CCMR1 |=  (1 << CCMR1_OC2PE) ;
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <PWM_voidInit+0x188>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	4a2c      	ldr	r2, [pc, #176]	; (8002530 <PWM_voidInit+0x188>)
 8002480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002484:	6193      	str	r3, [r2, #24]
              TIM3->CCER |= (1<<CCER_CC2E);
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <PWM_voidInit+0x188>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <PWM_voidInit+0x188>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	e034      	b.n	80024fe <PWM_voidInit+0x156>

          }
          else if (LOC_u8Counter == 2)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d117      	bne.n	80024ca <PWM_voidInit+0x122>
          {
              TIM3->CCMR2 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR2_OC3M);
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <PWM_voidInit+0x188>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	440a      	add	r2, r1
 80024a4:	7a12      	ldrb	r2, [r2, #8]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	4611      	mov	r1, r2
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <PWM_voidInit+0x188>)
 80024ac:	430b      	orrs	r3, r1
 80024ae:	61d3      	str	r3, [r2, #28]
              TIM3->CCMR2 |=  (1 << CCMR2_OC3PE) ;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <PWM_voidInit+0x188>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <PWM_voidInit+0x188>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	61d3      	str	r3, [r2, #28]
              TIM3->CCER |= (1<<CCER_CC3E);
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <PWM_voidInit+0x188>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <PWM_voidInit+0x188>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e019      	b.n	80024fe <PWM_voidInit+0x156>
          }
          else if (LOC_u8Counter == 3)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d116      	bne.n	80024fe <PWM_voidInit+0x156>
          {
              TIM3->CCMR2 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR2_OC4M);
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <PWM_voidInit+0x188>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	440a      	add	r2, r1
 80024da:	7a12      	ldrb	r2, [r2, #8]
 80024dc:	0312      	lsls	r2, r2, #12
 80024de:	4611      	mov	r1, r2
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <PWM_voidInit+0x188>)
 80024e2:	430b      	orrs	r3, r1
 80024e4:	61d3      	str	r3, [r2, #28]
              TIM3->CCMR2 |=  (1 << CCMR2_OC4PE) ;
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <PWM_voidInit+0x188>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <PWM_voidInit+0x188>)
 80024ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f0:	61d3      	str	r3, [r2, #28]
              TIM3->CCER |= (1<<CCER_CC4E);
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <PWM_voidInit+0x188>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <PWM_voidInit+0x188>)
 80024f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fc:	6213      	str	r3, [r2, #32]
      for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	3301      	adds	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d988      	bls.n	800241c <PWM_voidInit+0x74>

          }
        }
      }  
      // Auto Preload Value
      TIM3->CR1 |= (1<<CR1_ARPE);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <PWM_voidInit+0x188>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <PWM_voidInit+0x188>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	6013      	str	r3, [r2, #0]
      // Finally Enable TIM3 
      TIM3->CR1 |= (1<<CR1_CEN);
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <PWM_voidInit+0x188>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <PWM_voidInit+0x188>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6013      	str	r3, [r2, #0]
    }

}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40000400 	.word	0x40000400

08002534 <PWM_voidSetDutyCycle>:

void PWM_voidSetDutyCycle(PWM_Config_t * p_userConfig , u16 copy_u16DutyCycle , Channel_ID_t CHANNEL_x)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
    if(p_userConfig->Timerx == Timer3)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <PWM_voidSetDutyCycle+0x26>
    {
      TIM3->CCRx[CHANNEL_x] = (0xFFFF &copy_u16DutyCycle) ;
 800254c:	4906      	ldr	r1, [pc, #24]	; (8002568 <PWM_voidSetDutyCycle+0x34>)
 800254e:	787b      	ldrb	r3, [r7, #1]
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	330c      	adds	r3, #12
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	605a      	str	r2, [r3, #4]

    }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40000400 	.word	0x40000400

0800256c <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	460a      	mov	r2, r1
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	2b1f      	cmp	r3, #31
 8002580:	d828      	bhi.n	80025d4 <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d00f      	beq.n	80025a8 <RCC_voidEnableClock+0x3c>
 8002588:	2b02      	cmp	r3, #2
 800258a:	d018      	beq.n	80025be <RCC_voidEnableClock+0x52>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d000      	beq.n	8002592 <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8002590:	e020      	b.n	80025d4 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <RCC_voidEnableClock+0x74>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	79ba      	ldrb	r2, [r7, #6]
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <RCC_voidEnableClock+0x74>)
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e015      	b.n	80025d4 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <RCC_voidEnableClock+0x78>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	79ba      	ldrb	r2, [r7, #6]
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f202 	lsl.w	r2, r1, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <RCC_voidEnableClock+0x78>)
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e00a      	b.n	80025d4 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <RCC_voidEnableClock+0x7c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	79ba      	ldrb	r2, [r7, #6]
 80025c4:	2101      	movs	r1, #1
 80025c6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ca:	4611      	mov	r1, r2
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <RCC_voidEnableClock+0x7c>)
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	bf00      	nop
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40021014 	.word	0x40021014
 80025e4:	4002101c 	.word	0x4002101c
 80025e8:	40021018 	.word	0x40021018

080025ec <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <RCC_voidInitSysClocks+0x48>)
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
		SET_BIT(RCC_CR, RCC_CR_HSEON);
		while(!(CHECK_BIT(RCC_CR, RCC_CR_HSERDY)));   // Wait Until CLK Ready
		RCC_CFGR |= RCC_CFGR_SW_HSE;
	    SET_BIT(RCC_CR, RCC_CR_CSSON);
	#elif  RCC_CLOCK_TYPE == RCC_HSI
	    SET_BIT(RCC_CR, RCC_CR_HSION);
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <RCC_voidInitSysClocks+0x48>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <RCC_voidInitSysClocks+0x48>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]
	//	while(!(CHECK_BIT(RCC_CR, RCC_CR_HSIRDY)));   // Wait Until CLK Ready
        RCC_CFGR |= RCC_CFGR_SW_HSI;
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 800261a:	4a07      	ldr	r2, [pc, #28]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <RCC_voidInitSysClocks+0x4c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40021004 	.word	0x40021004

0800263c <STK_u32ConfigInterval>:
/******************************************************************************
* Private Function Definitions
*******************************************************************************/

u32 STK_u32ConfigInterval(STK_TimeUnit_t timeUnit)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    u32 LOC_u32Clock ;
    // Get STK Clock 
    #if   STK_CLK_SOURCE_SELECTION	 == STK_AHB_OVER_8
    LOC_u32Clock = AHB_CLOCK_FREQ / 8;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <STK_u32ConfigInterval+0x24>)
 8002646:	60fb      	str	r3, [r7, #12]
    LOC_u32Clock = AHB_CLOCK_FREQ;
    #else
	//	#error "Choose Correct Clock Source From Config File"
    #endif
    // Freq of One Tick 
    LOC_u32Clock = LOC_u32Clock / timeUnit ;
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	60fb      	str	r3, [r7, #12]
    // Return Time Of One Tick
    return LOC_u32Clock ;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	000f4240 	.word	0x000f4240

08002664 <STK_voidInit>:
/******************************************************************************
* Public Function Definitions
*******************************************************************************/

void STK_voidInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
    STK->CTRL  = 0;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <STK_voidInit+0x1c>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    STK->CTRL |= STK_CLK_SOURCE_SELECTION;
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <STK_voidInit+0x1c>)
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <STK_voidInit+0x1c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6013      	str	r3, [r2, #0]
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e010 	.word	0xe000e010

08002684 <STK_voidSetBusyWait_MS>:
        STK -> VAL  = 0;
    }
    else{ /* <!TODO> ERROR */ }
}
void STK_voidSetBusyWait_MS(u16 Copy_u16TimeMS)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
    /* GET TICK CONFIG  */
    u16 Local_u16Ticks = STK_u32ConfigInterval(STK_MS);
 800268e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002692:	f7ff ffd3 	bl	800263c <STK_u32ConfigInterval>
 8002696:	4603      	mov	r3, r0
 8002698:	81fb      	strh	r3, [r7, #14]
    /*  Clear Val Reg   */
    STK->VAL  = 0;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
    /* Load Load Reg    */
    STK->LOAD = Local_u16Ticks * Copy_u16TimeMS;
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	fb02 f203 	mul.w	r2, r2, r3
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026aa:	605a      	str	r2, [r3, #4]
    /*  Enable Timer    */
    SET_BIT((STK -> CTRL) , 0);
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]
    /*  Wait    */
    while(GET_BIT((STK -> CTRL) , 16 )  == 0 );
 80026b8:	bf00      	nop
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f8      	beq.n	80026ba <STK_voidSetBusyWait_MS+0x36>
    /* Stop Timer */
    CLEAR_BIT(STK->CTRL, 0);
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]
    /* Clear LOAD and VAL Regs */
    STK -> LOAD = 0;
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
    STK -> VAL  = 0;
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <STK_voidSetBusyWait_MS+0x64>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	e000e010 	.word	0xe000e010

080026ec <STK_voidSetBusyWait_US>:
void STK_voidSetBusyWait_US(u16 Copy_u16TimeUS)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
    /* GET TICK CONFIG  */
    u16 Local_u16Ticks = STK_u32ConfigInterval(STK_US);
 80026f6:	4816      	ldr	r0, [pc, #88]	; (8002750 <STK_voidSetBusyWait_US+0x64>)
 80026f8:	f7ff ffa0 	bl	800263c <STK_u32ConfigInterval>
 80026fc:	4603      	mov	r3, r0
 80026fe:	81fb      	strh	r3, [r7, #14]
    /*  Clear Val Reg   */
    STK->VAL  = 0;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
    /* Load Load Reg    */
    STK->LOAD = Local_u16Ticks * Copy_u16TimeUS;
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	fb02 f203 	mul.w	r2, r2, r3
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002710:	605a      	str	r2, [r3, #4]
    /*  Enable Timer    */
    SET_BIT((STK -> CTRL) , 0);
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6013      	str	r3, [r2, #0]
    /*  Wait    */
    while(GET_BIT((STK -> CTRL) , 16 )  == 0 );
 800271e:	bf00      	nop
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f8      	beq.n	8002720 <STK_voidSetBusyWait_US+0x34>
    /* Stop Timer */
    CLEAR_BIT(STK->CTRL, 0);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]
    /* Clear LOAD and VAL Regs */
    STK -> LOAD = 0;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 800273c:	2200      	movs	r2, #0
 800273e:	605a      	str	r2, [r3, #4]
    STK -> VAL  = 0;
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <STK_voidSetBusyWait_US+0x68>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	000f4240 	.word	0x000f4240
 8002754:	e000e010 	.word	0xe000e010

08002758 <SysTick_Handler>:
	u32 LOC_u32ElapsedTime = 0 ;
    LOC_u32ElapsedTime = ( STK -> VAL ) * STK_u32ConfigInterval(STK_US);
	return LOC_u32ElapsedTime ; 
}
/************************************* IRQ  *************************************************/
void SysTick_Handler(void) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	71fb      	strb	r3, [r7, #7]
	if (STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <SysTick_Handler+0x54>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d111      	bne.n	800278e <SysTick_Handler+0x36>
	{
		/* Disable STK Interrupt */
		CLEAR_BIT(STK->CTRL, 1);
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <SysTick_Handler+0x58>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <SysTick_Handler+0x58>)
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	6013      	str	r3, [r2, #0]
		/*	Stop Timer	*/
		CLEAR_BIT(STK->CTRL, 0);
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <SysTick_Handler+0x58>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <SysTick_Handler+0x58>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6013      	str	r3, [r2, #0]
		STK -> LOAD = 0;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <SysTick_Handler+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
		STK -> VAL  = 0;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <SysTick_Handler+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
	}
	/* Callback notification */
	Glob_STKCallback();
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <SysTick_Handler+0x5c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4798      	blx	r3
	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(STK->CTRL,16);
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SysTick_Handler+0x58>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	71fb      	strb	r3, [r7, #7]
	(void)Local_u8Temporary;
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000118 	.word	0x20000118
 80027b0:	e000e010 	.word	0xe000e010
 80027b4:	200000b0 	.word	0x200000b0

080027b8 <USART_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void USART_voidInit(USART_Number_t  USART_Number , USART_Config * usrConfig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
	u16 LOC_u16CR1 = 0 ;
 80027c4:	2300      	movs	r3, #0
 80027c6:	82fb      	strh	r3, [r7, #22]
	u16 LOC_u16CR2 = 0 ;
 80027c8:	2300      	movs	r3, #0
 80027ca:	82bb      	strh	r3, [r7, #20]
	u16 LOC_u16CR3 = 0 ;
 80027cc:	2300      	movs	r3, #0
 80027ce:	827b      	strh	r3, [r7, #18]

/********************************************************* CR1 REG	****************************************************************/
	LOC_u16CR1 = (1<<0)									/*	Enable	*/
				|(usrConfig->USART_DataLength)			/*	Data Length	*/
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
				|(usrConfig->USART_Parity)				/*	 Parity control	*/
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	899b      	ldrh	r3, [r3, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	b29a      	uxth	r2, r3
				|(usrConfig->USART_OperationMode)		/*	Tx,Rx or Tx and Rx*/
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b29a      	uxth	r2, r3
				|(usrConfig->USART_IRQ_t) ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	8b1b      	ldrh	r3, [r3, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b29b      	uxth	r3, r3
	LOC_u16CR1 = (1<<0)									/*	Enable	*/
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	82fb      	strh	r3, [r7, #22]
			LOC_u16CR1 |= (usrConfig->USART_IRQ_t[LOC_u8Counter]) ;
		}
	}
*/
/******************************************************* CR2 REG ********************************************************************/
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	89da      	ldrh	r2, [r3, #14]
				|(usrConfig->USART_IdleLevel)			/*	Clock polarity		*/
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	8a5b      	ldrh	r3, [r3, #18]
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 80027fe:	4313      	orrs	r3, r2
 8002800:	b29a      	uxth	r2, r3
				|(usrConfig->USART_DataSampling);		/*	Clock phase			*/
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	8a9b      	ldrh	r3, [r3, #20]
	LOC_u16CR2 = (usrConfig->USART_StopBit) 			/*	Number of Stop Bits	*/
 8002806:	4313      	orrs	r3, r2
 8002808:	82bb      	strh	r3, [r7, #20]
/******************************************************* CR3 REG ********************************************************************/
	LOC_u16CR3 = (usrConfig->USART_DMA);			/*	DMA		*/
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7d9b      	ldrb	r3, [r3, #22]
 800280e:	827b      	strh	r3, [r7, #18]

/******************************************************* BuadRate ********************************************************************/
	Global_USART_Config[USART_Number] = usrConfig ;
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	4919      	ldr	r1, [pc, #100]	; (8002878 <USART_voidInit+0xc0>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	u32 BRR_Reg = 0 ;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
	USART_voidBuadRateCalc(usrConfig->USART_BuadRate , 8000000 , &BRR_Reg);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f107 020c 	add.w	r2, r7, #12
 8002826:	4915      	ldr	r1, [pc, #84]	; (800287c <USART_voidInit+0xc4>)
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f86b 	bl	8002904 <USART_voidBuadRateCalc>


/******************************************************* Regs ********************************************************************/


	switch(USART_Number)
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <USART_voidInit+0x82>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d00d      	beq.n	8002854 <USART_voidInit+0x9c>
	{
	case USART_1 : USART1->BRR =  BRR_Reg  ; USART1->CR1 = LOC_u16CR1 ;  USART1->CR2 = LOC_u16CR2 , USART1->CR3 = LOC_u16CR3 ; 	break ;
	case USART_3 : USART3->BRR =  BRR_Reg  ; USART3->CR1 = LOC_u16CR1 ;  USART3->CR2 = LOC_u16CR2 , USART3->CR3 = LOC_u16CR3 ; 	break ;

	default : break ;
 8002838:	e019      	b.n	800286e <USART_voidInit+0xb6>
	case USART_1 : USART1->BRR =  BRR_Reg  ; USART1->CR1 = LOC_u16CR1 ;  USART1->CR2 = LOC_u16CR2 , USART1->CR3 = LOC_u16CR3 ; 	break ;
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <USART_voidInit+0xc8>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <USART_voidInit+0xc8>)
 8002842:	8afb      	ldrh	r3, [r7, #22]
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <USART_voidInit+0xc8>)
 8002848:	8abb      	ldrh	r3, [r7, #20]
 800284a:	6053      	str	r3, [r2, #4]
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <USART_voidInit+0xc8>)
 800284e:	8a7b      	ldrh	r3, [r7, #18]
 8002850:	6093      	str	r3, [r2, #8]
 8002852:	e00c      	b.n	800286e <USART_voidInit+0xb6>
	case USART_3 : USART3->BRR =  BRR_Reg  ; USART3->CR1 = LOC_u16CR1 ;  USART3->CR2 = LOC_u16CR2 , USART3->CR3 = LOC_u16CR3 ; 	break ;
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <USART_voidInit+0xcc>)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	60d3      	str	r3, [r2, #12]
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <USART_voidInit+0xcc>)
 800285c:	8afb      	ldrh	r3, [r7, #22]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <USART_voidInit+0xcc>)
 8002862:	8abb      	ldrh	r3, [r7, #20]
 8002864:	6053      	str	r3, [r2, #4]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <USART_voidInit+0xcc>)
 8002868:	8a7b      	ldrh	r3, [r7, #18]
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	bf00      	nop

	}
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200000b4 	.word	0x200000b4
 800287c:	007a1200 	.word	0x007a1200
 8002880:	40013800 	.word	0x40013800
 8002884:	40004800 	.word	0x40004800

08002888 <USART_voidReceiveDataSynch>:
		break ;
	}
}

void USART_voidReceiveDataSynch(USART_Number_t USART_Number , u16 *P_u16Data)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
	// 8-bit is parity
	switch(USART_Number)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <USART_voidReceiveDataSynch+0x18>
 800289a:	2b02      	cmp	r3, #2
 800289c:	d014      	beq.n	80028c8 <USART_voidReceiveDataSynch+0x40>
		WAIT_TO_RXNE(USART3)	;
		*P_u16Data = (USART3->RDR)& ((u8)0xff) ;
		USART3->ICR = 0xffffffff;
		break ;
	default:
		break ;
 800289e:	e027      	b.n	80028f0 <USART_voidReceiveDataSynch+0x68>
		WAIT_TO_RXNE(USART1)	;
 80028a0:	bf00      	nop
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <USART_voidReceiveDataSynch+0x74>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f8      	beq.n	80028a2 <USART_voidReceiveDataSynch+0x1a>
		*P_u16Data = (USART1->RDR)& ((u8)0xff) ;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <USART_voidReceiveDataSynch+0x74>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	801a      	strh	r2, [r3, #0]
		USART1->ICR = 0xffffffff;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <USART_voidReceiveDataSynch+0x74>)
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	621a      	str	r2, [r3, #32]
		break ;
 80028c6:	e013      	b.n	80028f0 <USART_voidReceiveDataSynch+0x68>
		WAIT_TO_RXNE(USART3)	;
 80028c8:	bf00      	nop
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <USART_voidReceiveDataSynch+0x78>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f8      	beq.n	80028ca <USART_voidReceiveDataSynch+0x42>
		*P_u16Data = (USART3->RDR)& ((u8)0xff) ;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <USART_voidReceiveDataSynch+0x78>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	b29b      	uxth	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
		USART3->ICR = 0xffffffff;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <USART_voidReceiveDataSynch+0x78>)
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	621a      	str	r2, [r3, #32]
		break ;
 80028ee:	bf00      	nop
	}
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40013800 	.word	0x40013800
 8002900:	40004800 	.word	0x40004800

08002904 <USART_voidBuadRateCalc>:

}


void USART_voidBuadRateCalc(u32 BuadRate , u32 PClock , u32 *BRR_Reg)
{
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]

	

	u32 USARTDEV = ((PClock)/(16*BuadRate)) ;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	623b      	str	r3, [r7, #32]
	u32 USARTDEV_Mull_100 = ((25.0 * PClock)/(4.0*BuadRate)) ;
 800291c:	68b8      	ldr	r0, [r7, #8]
 800291e:	f7fd fd9d 	bl	800045c <__aeabi_ui2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <USART_voidBuadRateCalc+0xac>)
 8002928:	f7fd fe12 	bl	8000550 <__aeabi_dmul>
 800292c:	4603      	mov	r3, r0
 800292e:	460c      	mov	r4, r1
 8002930:	4625      	mov	r5, r4
 8002932:	461c      	mov	r4, r3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7fd fd91 	bl	800045c <__aeabi_ui2d>
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <USART_voidBuadRateCalc+0xb0>)
 8002940:	f7fd fe06 	bl	8000550 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd ff2a 	bl	80007a4 <__aeabi_ddiv>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	4618      	mov	r0, r3
 8002956:	4621      	mov	r1, r4
 8002958:	f7fe f80c 	bl	8000974 <__aeabi_d2uiz>
 800295c:	4603      	mov	r3, r0
 800295e:	61fb      	str	r3, [r7, #28]
	u32 Mantiessa_Mull_100 = USARTDEV * 100  ;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2264      	movs	r2, #100	; 0x64
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	61bb      	str	r3, [r7, #24]
	u32 Mantiessa = USARTDEV ;
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
	u32 Fraction = ((USARTDEV_Mull_100 - Mantiessa_Mull_100)*16) /100 ;
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <USART_voidBuadRateCalc+0xb4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	617b      	str	r3, [r7, #20]

	/*u32 Mantiessa = ((PClock)/(16*BuadRate)) ;
	u32 Fraction  = ((((1.0*PClock)/(16.0*BuadRate)) * 100) - (Mantiessa * 100)) * 16 ;
	*/
	if(Fraction > 16)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d902      	bls.n	800298c <USART_voidBuadRateCalc+0x88>
	{
		Mantiessa = Mantiessa+1 ;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*BRR_Reg = (u16) ((Mantiessa<<4) | (Fraction & 0x0F)) ;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	b29b      	uxth	r3, r3
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	b29a      	uxth	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	b29b      	uxth	r3, r3
 800299e:	4313      	orrs	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]

}
 80029a8:	bf00      	nop
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	40390000 	.word	0x40390000
 80029b4:	40100000 	.word	0x40100000
 80029b8:	51eb851f 	.word	0x51eb851f

080029bc <USART_voidSetPins>:

void USART_voidSetPins(USART_Number_t USART_Number)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
	if(USART_Number == USART_1)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d13c      	bne.n	8002a46 <USART_voidSetPins+0x8a>
	{
		RCC_voidEnableClock(RCC_AHB,PORTC);
 80029cc:	2113      	movs	r1, #19
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff fdcc 	bl	800256c <RCC_voidEnableClock>
		/*
		 * PC4 <-- TX
		 * PC5 <-- RX
		 */
		if(Global_USART_Config[USART_Number]->USART_OperationMode == USART_TRANSMIT)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <USART_voidSetPins+0xb4>)
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d10a      	bne.n	80029f8 <USART_voidSetPins+0x3c>
		{
			/*		AF Function		*/
			GPIO_voidSetPinDirection(PORTC, PIN4, GPIO_AF_HIGH_SPD);
 80029e2:	224c      	movs	r2, #76	; 0x4c
 80029e4:	2104      	movs	r1, #4
 80029e6:	2013      	movs	r0, #19
 80029e8:	f7fe fbc0 	bl	800116c <GPIO_voidSetPinDirection>
			GPIO_voidSetAFIO(PORTC, PIN4, AFIO_7) ;
 80029ec:	2207      	movs	r2, #7
 80029ee:	2104      	movs	r1, #4
 80029f0:	2013      	movs	r0, #19
 80029f2:	f7fe fe3d 	bl	8001670 <GPIO_voidSetAFIO>
		 */
		GPIO_voidSetPinDirection(PORTB, PIN11, GPIO_AF_HIGH_SPD);
		GPIO_voidSetAFIO(PORTB, PIN11,  AFIO_7) ;
	}

}
 80029f6:	e037      	b.n	8002a68 <USART_voidSetPins+0xac>
		else if (Global_USART_Config[USART_Number]->USART_OperationMode == USART_RECEIVE)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <USART_voidSetPins+0xb4>)
 80029fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d10a      	bne.n	8002a1c <USART_voidSetPins+0x60>
			GPIO_voidSetPinDirection(PORTC, PIN6, GPIO_AF_HIGH_SPD);
 8002a06:	224c      	movs	r2, #76	; 0x4c
 8002a08:	2106      	movs	r1, #6
 8002a0a:	2013      	movs	r0, #19
 8002a0c:	f7fe fbae 	bl	800116c <GPIO_voidSetPinDirection>
			GPIO_voidSetAFIO(PORTC, PIN5,  AFIO_7) ;
 8002a10:	2207      	movs	r2, #7
 8002a12:	2105      	movs	r1, #5
 8002a14:	2013      	movs	r0, #19
 8002a16:	f7fe fe2b 	bl	8001670 <GPIO_voidSetAFIO>
}
 8002a1a:	e025      	b.n	8002a68 <USART_voidSetPins+0xac>
			GPIO_voidSetPinDirection(PORTC, PIN4, GPIO_AF_HIGH_SPD);
 8002a1c:	224c      	movs	r2, #76	; 0x4c
 8002a1e:	2104      	movs	r1, #4
 8002a20:	2013      	movs	r0, #19
 8002a22:	f7fe fba3 	bl	800116c <GPIO_voidSetPinDirection>
			GPIO_voidSetPinDirection(PORTC, PIN5, GPIO_AF_HIGH_SPD);
 8002a26:	224c      	movs	r2, #76	; 0x4c
 8002a28:	2105      	movs	r1, #5
 8002a2a:	2013      	movs	r0, #19
 8002a2c:	f7fe fb9e 	bl	800116c <GPIO_voidSetPinDirection>
			GPIO_voidSetAFIO(PORTC, PIN4, AFIO_7) ;
 8002a30:	2207      	movs	r2, #7
 8002a32:	2104      	movs	r1, #4
 8002a34:	2013      	movs	r0, #19
 8002a36:	f7fe fe1b 	bl	8001670 <GPIO_voidSetAFIO>
			GPIO_voidSetAFIO(PORTC, PIN5,  AFIO_7) ;
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	2105      	movs	r1, #5
 8002a3e:	2013      	movs	r0, #19
 8002a40:	f7fe fe16 	bl	8001670 <GPIO_voidSetAFIO>
}
 8002a44:	e010      	b.n	8002a68 <USART_voidSetPins+0xac>
	else if(USART_Number == USART_3)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d10d      	bne.n	8002a68 <USART_voidSetPins+0xac>
		RCC_voidEnableClock(RCC_AHB,PORTB);
 8002a4c:	2112      	movs	r1, #18
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7ff fd8c 	bl	800256c <RCC_voidEnableClock>
		GPIO_voidSetPinDirection(PORTB, PIN11, GPIO_AF_HIGH_SPD);
 8002a54:	224c      	movs	r2, #76	; 0x4c
 8002a56:	210b      	movs	r1, #11
 8002a58:	2012      	movs	r0, #18
 8002a5a:	f7fe fb87 	bl	800116c <GPIO_voidSetPinDirection>
		GPIO_voidSetAFIO(PORTB, PIN11,  AFIO_7) ;
 8002a5e:	2207      	movs	r2, #7
 8002a60:	210b      	movs	r1, #11
 8002a62:	2012      	movs	r0, #18
 8002a64:	f7fe fe04 	bl	8001670 <GPIO_voidSetAFIO>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200000b4 	.word	0x200000b4

08002a74 <USART1_EXTI25_IRQHandler>:
	}
}

/************************************* ISR		*********************************************/
void USART1_EXTI25_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
			Global_USART_Config[0]->P_IRQ_CallBack(USART1->DR , irq_src);

		}
	}
	*/
	Global_USART_Config[0]->P_IRQ_CallBack(USART1->RDR);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <USART1_EXTI25_IRQHandler+0x30>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <USART1_EXTI25_IRQHandler+0x34>)
 8002a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a82:	b292      	uxth	r2, r2
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
	//	Clear Fflags
	 USART1->ISR &=~ (1<<6) ; // TXC
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <USART1_EXTI25_IRQHandler+0x34>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a06      	ldr	r2, [pc, #24]	; (8002aa8 <USART1_EXTI25_IRQHandler+0x34>)
 8002a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a92:	61d3      	str	r3, [r2, #28]
	 USART1->ISR &=~  (1<<5) ; // RXNE
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <USART1_EXTI25_IRQHandler+0x34>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <USART1_EXTI25_IRQHandler+0x34>)
 8002a9a:	f023 0320 	bic.w	r3, r3, #32
 8002a9e:	61d3      	str	r3, [r2, #28]

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200000b4 	.word	0x200000b4
 8002aa8:	40013800 	.word	0x40013800

08002aac <APPC1_Init>:
* Function Definitions
*******************************************************************************/


void APPC1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	/**********************************	US	 *************************************/
	Global_UltraSonics.Timerx       = Timer2 ;
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <APPC1_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
	Global_UltraSonics.CHANNEL_x    = CHANNEL_3 ;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <APPC1_Init+0x50>)
 8002ab8:	2202      	movs	r2, #2
 8002aba:	705a      	strb	r2, [r3, #1]
	Global_UltraSonics.Trig_Port[0] = US1_TRIG_PORT ;
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <APPC1_Init+0x50>)
 8002abe:	2212      	movs	r2, #18
 8002ac0:	709a      	strb	r2, [r3, #2]
	Global_UltraSonics.Trig_Pin[0]  = US1_TRIG_PIN	;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <APPC1_Init+0x50>)
 8002ac4:	2206      	movs	r2, #6
 8002ac6:	719a      	strb	r2, [r3, #6]
	Global_UltraSonics.Trig_Port[1] = US2_TRIG_PORT    ;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <APPC1_Init+0x50>)
 8002aca:	2211      	movs	r2, #17
 8002acc:	70da      	strb	r2, [r3, #3]
	Global_UltraSonics.Trig_Pin[1]  = US2_TRIG_PIN	;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <APPC1_Init+0x50>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	71da      	strb	r2, [r3, #7]
	Global_UltraSonics.Trig_Port[2] = US3_TRIG_PORT    ;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <APPC1_Init+0x50>)
 8002ad6:	2211      	movs	r2, #17
 8002ad8:	711a      	strb	r2, [r3, #4]
	Global_UltraSonics.Trig_Pin[2]  = US3_TRIG_PIN	;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <APPC1_Init+0x50>)
 8002adc:	2206      	movs	r2, #6
 8002ade:	721a      	strb	r2, [r3, #8]
    Global_UltraSonics.Trig_Port[3] = US4_TRIG_PORT    ;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <APPC1_Init+0x50>)
 8002ae2:	2211      	movs	r2, #17
 8002ae4:	715a      	strb	r2, [r3, #5]
	Global_UltraSonics.Trig_Pin[3]  = US4_TRIG_PIN	;
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <APPC1_Init+0x50>)
 8002ae8:	2205      	movs	r2, #5
 8002aea:	725a      	strb	r2, [r3, #9]
	Global_UltraSonics.US_x         = US_POLLING;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <APPC1_Init+0x50>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	729a      	strb	r2, [r3, #10]
	US_voidInit(&Global_UltraSonics);
 8002af2:	4802      	ldr	r0, [pc, #8]	; (8002afc <APPC1_Init+0x50>)
 8002af4:	f7fe f9ea 	bl	8000ecc <US_voidInit>

}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200000c0 	.word	0x200000c0

08002b00 <APPC1_SelectUltrasonc>:

US_ERROR_t APPC1_SelectUltrasonc(US_Selection_t copy_UltrasonicNumber , u16 *pData_DistanceInCM)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
	US_ERROR_t LOC_eReturnState = US_INVALID_READING ;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
    switch (copy_UltrasonicNumber)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d82a      	bhi.n	8002b6c <APPC1_SelectUltrasonc+0x6c>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <APPC1_SelectUltrasonc+0x1c>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b4d 	.word	0x08002b4d
 8002b20:	08002b2d 	.word	0x08002b2d
 8002b24:	08002b5d 	.word	0x08002b5d
 8002b28:	08002b3d 	.word	0x08002b3d
    {
		case FrontUS :
			LOC_eReturnState = US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , FrontUS);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	4811      	ldr	r0, [pc, #68]	; (8002b78 <APPC1_SelectUltrasonc+0x78>)
 8002b32:	f7fe fa4d 	bl	8000fd0 <US_voidGetDistanceSynch>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]
			break;
 8002b3a:	e018      	b.n	8002b6e <APPC1_SelectUltrasonc+0x6e>
		
		case BackUS :
			LOC_eReturnState = US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , BackUS);
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <APPC1_SelectUltrasonc+0x78>)
 8002b42:	f7fe fa45 	bl	8000fd0 <US_voidGetDistanceSynch>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]
			break;
 8002b4a:	e010      	b.n	8002b6e <APPC1_SelectUltrasonc+0x6e>
		case FrontRightUS :
			LOC_eReturnState = US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , FrontRightUS);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <APPC1_SelectUltrasonc+0x78>)
 8002b52:	f7fe fa3d 	bl	8000fd0 <US_voidGetDistanceSynch>
 8002b56:	4603      	mov	r3, r0
 8002b58:	73fb      	strb	r3, [r7, #15]
			break;
 8002b5a:	e008      	b.n	8002b6e <APPC1_SelectUltrasonc+0x6e>
		case RearRightUS :
			LOC_eReturnState =US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , RearRightUS);
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <APPC1_SelectUltrasonc+0x78>)
 8002b62:	f7fe fa35 	bl	8000fd0 <US_voidGetDistanceSynch>
 8002b66:	4603      	mov	r3, r0
 8002b68:	73fb      	strb	r3, [r7, #15]
			break;
 8002b6a:	e000      	b.n	8002b6e <APPC1_SelectUltrasonc+0x6e>
		default :
			/*Do Nothing*/
			break;
 8002b6c:	bf00      	nop
    }
    return LOC_eReturnState ;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200000c0 	.word	0x200000c0

08002b7c <C4_StaticGetFourDistance>:

	return LOC_eReturnState;
}

ERROR_t C4_StaticGetFourDistance(u16 *FD , u16 *BD , u16 *FRD , u16 *BRD)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
    US_ERROR_t LOC_xErrorTracing = 0 ;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
    ERROR_t LOC_xReturnError = E_OK ;
 8002b8e:	2306      	movs	r3, #6
 8002b90:	757b      	strb	r3, [r7, #21]
    u8 LOC_u8ErrorCounter = 0 ;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75bb      	strb	r3, [r7, #22]
    if(FD != NULL )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <C4_StaticGetFourDistance+0x58>
    {
        // Front Distance
        LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontUS,FD);
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f7ff ffae 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 8002ba8:	e00f      	b.n	8002bca <C4_StaticGetFourDistance+0x4e>
        {
            LOC_u8ErrorCounter++ ;
 8002baa:	7dbb      	ldrb	r3, [r7, #22]
 8002bac:	3301      	adds	r3, #1
 8002bae:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontUS,FD);
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff ffa4 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 8002bbc:	7dbb      	ldrb	r3, [r7, #22]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d903      	bls.n	8002bca <C4_StaticGetFourDistance+0x4e>
            {
                LOC_xReturnError = ERR_FRONT_US_FAILED ;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 8002bc6:	7d7b      	ldrb	r3, [r7, #21]
 8002bc8:	e062      	b.n	8002c90 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d1ec      	bne.n	8002baa <C4_StaticGetFourDistance+0x2e>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75bb      	strb	r3, [r7, #22]
    }

    if(BD != NULL)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01b      	beq.n	8002c12 <C4_StaticGetFourDistance+0x96>
    {
        // Back
        LOC_xErrorTracing = APPC1_SelectUltrasonc(BackUS,BD);
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f7ff ff8f 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 8002be6:	e00f      	b.n	8002c08 <C4_StaticGetFourDistance+0x8c>
        {
            LOC_u8ErrorCounter++ ;
 8002be8:	7dbb      	ldrb	r3, [r7, #22]
 8002bea:	3301      	adds	r3, #1
 8002bec:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(BackUS,BD);
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f7ff ff85 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 8002bfa:	7dbb      	ldrb	r3, [r7, #22]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d903      	bls.n	8002c08 <C4_StaticGetFourDistance+0x8c>
            {
                LOC_xReturnError = ERR_BACK_US_FAILED ;
 8002c00:	2301      	movs	r3, #1
 8002c02:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 8002c04:	7d7b      	ldrb	r3, [r7, #21]
 8002c06:	e043      	b.n	8002c90 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d1ec      	bne.n	8002be8 <C4_StaticGetFourDistance+0x6c>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75bb      	strb	r3, [r7, #22]
    }

    if(FRD != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <C4_StaticGetFourDistance+0xd4>
    {
        // Front Right
        LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontRightUS,FRD);
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7ff ff70 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002c20:	4603      	mov	r3, r0
 8002c22:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 8002c24:	e00f      	b.n	8002c46 <C4_StaticGetFourDistance+0xca>
        {
            LOC_u8ErrorCounter++ ;
 8002c26:	7dbb      	ldrb	r3, [r7, #22]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontRightUS,FRD);
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7ff ff66 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d903      	bls.n	8002c46 <C4_StaticGetFourDistance+0xca>
            {
                LOC_xReturnError = ERR_FRONT_RIGHT_US_FAILED ;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 8002c42:	7d7b      	ldrb	r3, [r7, #21]
 8002c44:	e024      	b.n	8002c90 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d1ec      	bne.n	8002c26 <C4_StaticGetFourDistance+0xaa>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75bb      	strb	r3, [r7, #22]
    }

    if(BRD != NULL)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01b      	beq.n	8002c8e <C4_StaticGetFourDistance+0x112>
    {
        // Rear Right
    	LOC_xErrorTracing = APPC1_SelectUltrasonc(RearRightUS,BRD);
 8002c56:	6839      	ldr	r1, [r7, #0]
 8002c58:	2002      	movs	r0, #2
 8002c5a:	f7ff ff51 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 8002c62:	e00f      	b.n	8002c84 <C4_StaticGetFourDistance+0x108>
        {
            LOC_u8ErrorCounter++ ;
 8002c64:	7dbb      	ldrb	r3, [r7, #22]
 8002c66:	3301      	adds	r3, #1
 8002c68:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(RearRightUS,BRD);
 8002c6a:	6839      	ldr	r1, [r7, #0]
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f7ff ff47 	bl	8002b00 <APPC1_SelectUltrasonc>
 8002c72:	4603      	mov	r3, r0
 8002c74:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 8002c76:	7dbb      	ldrb	r3, [r7, #22]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d903      	bls.n	8002c84 <C4_StaticGetFourDistance+0x108>
            {
                LOC_xReturnError = ERR_REAR_RIGHT_US_FAILED ;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 8002c80:	7d7b      	ldrb	r3, [r7, #21]
 8002c82:	e005      	b.n	8002c90 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d1ec      	bne.n	8002c64 <C4_StaticGetFourDistance+0xe8>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75bb      	strb	r3, [r7, #22]
    }
    return LOC_xReturnError;
 8002c8e:	7d7b      	ldrb	r3, [r7, #21]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <C2VCONTROL_voidInit>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void C2VCONTROL_voidInit(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	//_Global_Back_Motor
	_Global_Back_Motor.Timerx      = Timer3 ;
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
	_Global_Back_Motor.CHANNEL_x   = CHANNEL_1 ;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	705a      	strb	r2, [r3, #1]
	_Global_Back_Motor.CW_Port     = C2_MOT1_CW_PORT ;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002caa:	2212      	movs	r2, #18
 8002cac:	709a      	strb	r2, [r3, #2]
	_Global_Back_Motor.CW_Pin      = C2_MOT1_CW_PIN  ;
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002cb0:	220d      	movs	r2, #13
 8002cb2:	70da      	strb	r2, [r3, #3]
	_Global_Back_Motor.CCW_Port    = C2_MOT1_CCW_PORT ;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002cb6:	2212      	movs	r2, #18
 8002cb8:	711a      	strb	r2, [r3, #4]
	_Global_Back_Motor.CCW_Pin     = C2_MOT1_CCW_PIN  ;
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002cbc:	220e      	movs	r2, #14
 8002cbe:	715a      	strb	r2, [r3, #5]

	//_Global_Front_Motor
	_Global_Front_Motor.Timerx      = Timer3 ;
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
	_Global_Front_Motor.CHANNEL_x   = CHANNEL_2 ;
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
	_Global_Front_Motor.CW_Port     = C2_MOT2_CW_PORT ;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002cce:	2212      	movs	r2, #18
 8002cd0:	709a      	strb	r2, [r3, #2]
	_Global_Front_Motor.CW_Pin      = C2_MOT2_CW_PIN  ;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	70da      	strb	r2, [r3, #3]
	_Global_Front_Motor.CCW_Port    = C2_MOT2_CCW_PORT ;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002cda:	2212      	movs	r2, #18
 8002cdc:	711a      	strb	r2, [r3, #4]
	_Global_Front_Motor.CCW_Pin     = C2_MOT2_CCW_PIN  ;
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	715a      	strb	r2, [r3, #5]

	// Inits
	DCMOTOR_voidInit(&_Global_Back_Motor); 	 // For Right Motor
 8002ce4:	480d      	ldr	r0, [pc, #52]	; (8002d1c <C2VCONTROL_voidInit+0x84>)
 8002ce6:	f7fd ff7b 	bl	8000be0 <DCMOTOR_voidInit>
	DCMOTOR_voidInit(&_Global_Front_Motor);  // For Left Motor
 8002cea:	480d      	ldr	r0, [pc, #52]	; (8002d20 <C2VCONTROL_voidInit+0x88>)
 8002cec:	f7fd ff78 	bl	8000be0 <DCMOTOR_voidInit>


	// LEDs As Output
	GPIO_voidSetPinDirection(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	2109      	movs	r1, #9
 8002cf4:	2012      	movs	r0, #18
 8002cf6:	f7fe fa39 	bl	800116c <GPIO_voidSetPinDirection>
	GPIO_voidSetPinValue(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, LOW);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2109      	movs	r1, #9
 8002cfe:	2012      	movs	r0, #18
 8002d00:	f7fe fc42 	bl	8001588 <GPIO_voidSetPinValue>
	GPIO_voidSetPinDirection(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8002d04:	2220      	movs	r2, #32
 8002d06:	2108      	movs	r1, #8
 8002d08:	2012      	movs	r0, #18
 8002d0a:	f7fe fa2f 	bl	800116c <GPIO_voidSetPinDirection>
	GPIO_voidSetPinValue(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, LOW);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2108      	movs	r1, #8
 8002d12:	2012      	movs	r0, #18
 8002d14:	f7fe fc38 	bl	8001588 <GPIO_voidSetPinValue>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200000d0 	.word	0x200000d0
 8002d20:	200000d8 	.word	0x200000d8

08002d24 <C2VCONTROL_voidChangeDirection>:

void C2VCONTROL_voidChangeDirection(VCLE_Dir_t VCLE_x , u16 copy_u16VcleSpeed)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80bb      	strh	r3, [r7, #4]
	switch (VCLE_x)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	f200 80b1 	bhi.w	8002e9e <C2VCONTROL_voidChangeDirection+0x17a>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <C2VCONTROL_voidChangeDirection+0x20>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002e79 	.word	0x08002e79
 8002d48:	08002d61 	.word	0x08002d61
 8002d4c:	08002d7d 	.word	0x08002d7d
 8002d50:	08002d99 	.word	0x08002d99
 8002d54:	08002dd1 	.word	0x08002dd1
 8002d58:	08002e09 	.word	0x08002e09
 8002d5c:	08002e41 	.word	0x08002e41
	{
	case VCLE_FWD:
		/* code */
		//FRONT MOTOR
		// DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, MOTOR_ZERO_SPEED);    // Already Stopped
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_STOP);
 8002d60:	2100      	movs	r1, #0
 8002d62:	4851      	ldr	r0, [pc, #324]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002d64:	f7fd ffb6 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CW);
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4850      	ldr	r0, [pc, #320]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002d6c:	f7fd ffb2 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002d70:	88bb      	ldrh	r3, [r7, #4]
 8002d72:	4619      	mov	r1, r3
 8002d74:	484d      	ldr	r0, [pc, #308]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002d76:	f7fd fff7 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		break;
 8002d7a:	e091      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>

	case VCLE_BWD:
		/* code */
		//FRONT MOTOR
		// DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, MOTOR_ZERO_SPEED);	// Already Stopped
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_STOP);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	484a      	ldr	r0, [pc, #296]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002d80:	f7fd ffa8 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CCW);
 8002d84:	2102      	movs	r1, #2
 8002d86:	4849      	ldr	r0, [pc, #292]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002d88:	f7fd ffa4 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002d8c:	88bb      	ldrh	r3, [r7, #4]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4846      	ldr	r0, [pc, #280]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002d92:	f7fd ffe9 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		break;
 8002d96:	e083      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>


	case VCLE_RIGHT_FWD:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CW);
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4843      	ldr	r0, [pc, #268]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002d9c:	f7fd ff9a 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 8002da0:	2196      	movs	r1, #150	; 0x96
 8002da2:	4841      	ldr	r0, [pc, #260]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002da4:	f7fd ffe0 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CW);
 8002da8:	2101      	movs	r1, #1
 8002daa:	4840      	ldr	r0, [pc, #256]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002dac:	f7fd ff92 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	4619      	mov	r1, r3
 8002db4:	483d      	ldr	r0, [pc, #244]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002db6:	f7fd ffd7 	bl	8000d68 <DCMOTOR_voidSetSpeed>

		// LEDs
		GPIO_voidSetPinValue(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, HIGH);
 8002dba:	2201      	movs	r2, #1
 8002dbc:	2109      	movs	r1, #9
 8002dbe:	2012      	movs	r0, #18
 8002dc0:	f7fe fbe2 	bl	8001588 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, LOW);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	2012      	movs	r0, #18
 8002dca:	f7fe fbdd 	bl	8001588 <GPIO_voidSetPinValue>

		break;
 8002dce:	e067      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>

	case VCLE_RIGHT_BWD:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CW);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4835      	ldr	r0, [pc, #212]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002dd4:	f7fd ff7e 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 8002dd8:	2196      	movs	r1, #150	; 0x96
 8002dda:	4833      	ldr	r0, [pc, #204]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002ddc:	f7fd ffc4 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CCW);
 8002de0:	2102      	movs	r1, #2
 8002de2:	4832      	ldr	r0, [pc, #200]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002de4:	f7fd ff76 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002de8:	88bb      	ldrh	r3, [r7, #4]
 8002dea:	4619      	mov	r1, r3
 8002dec:	482f      	ldr	r0, [pc, #188]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002dee:	f7fd ffbb 	bl	8000d68 <DCMOTOR_voidSetSpeed>

		// LEDs
		GPIO_voidSetPinValue(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, HIGH);
 8002df2:	2201      	movs	r2, #1
 8002df4:	2109      	movs	r1, #9
 8002df6:	2012      	movs	r0, #18
 8002df8:	f7fe fbc6 	bl	8001588 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, LOW);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2108      	movs	r1, #8
 8002e00:	2012      	movs	r0, #18
 8002e02:	f7fe fbc1 	bl	8001588 <GPIO_voidSetPinValue>
		break;
 8002e06:	e04b      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>

	case VCLE_LEFT_BWD:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CCW);
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4827      	ldr	r0, [pc, #156]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002e0c:	f7fd ff62 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 8002e10:	2196      	movs	r1, #150	; 0x96
 8002e12:	4825      	ldr	r0, [pc, #148]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002e14:	f7fd ffa8 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CCW);
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4824      	ldr	r0, [pc, #144]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002e1c:	f7fd ff5a 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002e20:	88bb      	ldrh	r3, [r7, #4]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4821      	ldr	r0, [pc, #132]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002e26:	f7fd ff9f 	bl	8000d68 <DCMOTOR_voidSetSpeed>

		// LEDs
		GPIO_voidSetPinValue(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, LOW);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2109      	movs	r1, #9
 8002e2e:	2012      	movs	r0, #18
 8002e30:	f7fe fbaa 	bl	8001588 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, HIGH);
 8002e34:	2201      	movs	r2, #1
 8002e36:	2108      	movs	r1, #8
 8002e38:	2012      	movs	r0, #18
 8002e3a:	f7fe fba5 	bl	8001588 <GPIO_voidSetPinValue>

		break;
 8002e3e:	e02f      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>

	case  VCLE_LEFT_FWD :
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CCW);
 8002e40:	2102      	movs	r1, #2
 8002e42:	4819      	ldr	r0, [pc, #100]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002e44:	f7fd ff46 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 8002e48:	2196      	movs	r1, #150	; 0x96
 8002e4a:	4817      	ldr	r0, [pc, #92]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002e4c:	f7fd ff8c 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CW);
 8002e50:	2101      	movs	r1, #1
 8002e52:	4816      	ldr	r0, [pc, #88]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002e54:	f7fd ff3e 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002e58:	88bb      	ldrh	r3, [r7, #4]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4813      	ldr	r0, [pc, #76]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002e5e:	f7fd ff83 	bl	8000d68 <DCMOTOR_voidSetSpeed>
		// LEDs
		GPIO_voidSetPinValue(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, LOW);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2109      	movs	r1, #9
 8002e66:	2012      	movs	r0, #18
 8002e68:	f7fe fb8e 	bl	8001588 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, HIGH);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2108      	movs	r1, #8
 8002e70:	2012      	movs	r0, #18
 8002e72:	f7fe fb89 	bl	8001588 <GPIO_voidSetPinValue>
		break;
 8002e76:	e013      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>
	case VCLE_STOP:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& _Global_Front_Motor, MTR_STOP)	;
 8002e78:	2100      	movs	r1, #0
 8002e7a:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <C2VCONTROL_voidChangeDirection+0x184>)
 8002e7c:	f7fd ff2a 	bl	8000cd4 <DCMOTOR_voidSetDirection>
		//BACK MOTOR
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, MOTOR_ZERO_SPEED);
 8002e80:	2100      	movs	r1, #0
 8002e82:	480a      	ldr	r0, [pc, #40]	; (8002eac <C2VCONTROL_voidChangeDirection+0x188>)
 8002e84:	f7fd ff70 	bl	8000d68 <DCMOTOR_voidSetSpeed>

		// LEDs
		GPIO_voidSetPinValue(BACK_RIGHT_LED_PORT, BACK_RIGHT_LED_PIN, LOW);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2109      	movs	r1, #9
 8002e8c:	2012      	movs	r0, #18
 8002e8e:	f7fe fb7b 	bl	8001588 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(BACK_LEFT_LED_PORT, BACK_LEFT_LED_PIN, LOW);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2108      	movs	r1, #8
 8002e96:	2012      	movs	r0, #18
 8002e98:	f7fe fb76 	bl	8001588 <GPIO_voidSetPinValue>
		break;
 8002e9c:	e000      	b.n	8002ea0 <C2VCONTROL_voidChangeDirection+0x17c>
	default:
		break;
 8002e9e:	bf00      	nop
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200000d8 	.word	0x200000d8
 8002eac:	200000d0 	.word	0x200000d0

08002eb0 <C4SLTFIND_voidInit>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void C4SLTFIND_voidInit(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <C4SLTFIND_voidSearchingforSlot>:
    return LOC_xReturnError ;
}


ERROR_t C4SLTFIND_voidSearchingforSlot(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
	u16 loc_u16Front,loc_u16Back,loc_u16FrontRight,loc_u16BackRight;
	u32 LOC_u32SlotTimeOut = 0 ;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
	ERROR_t loc_udErrorStat = NO_SLOT;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	72fb      	strb	r3, [r7, #11]
	loc_udErrorStat = C4_StaticGetFourDistance(&loc_u16Front,&loc_u16Back,&loc_u16FrontRight,&loc_u16BackRight);
 8002ece:	1cbb      	adds	r3, r7, #2
 8002ed0:	1d3a      	adds	r2, r7, #4
 8002ed2:	1db9      	adds	r1, r7, #6
 8002ed4:	f107 0008 	add.w	r0, r7, #8
 8002ed8:	f7ff fe50 	bl	8002b7c <C4_StaticGetFourDistance>
 8002edc:	4603      	mov	r3, r0
 8002ede:	72fb      	strb	r3, [r7, #11]
	if(E_OK != loc_udErrorStat)
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d005      	beq.n	8002ef2 <C4SLTFIND_voidSearchingforSlot+0x32>
	{
		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7ff ff1b 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		return loc_udErrorStat;
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	e073      	b.n	8002fda <C4SLTFIND_voidSearchingforSlot+0x11a>
	}
	else
	{
		/*1st motion until the slot is detected*/
		C2VCONTROL_voidChangeDirection(VCLE_FWD,FIND_SLOT_SPEED);
 8002ef2:	2196      	movs	r1, #150	; 0x96
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f7ff ff15 	bl	8002d24 <C2VCONTROL_voidChangeDirection>

		while(( (MIN_DEPTH_TO_DETECT_SLOT > loc_u16BackRight) || (MIN_DEPTH_TO_DETECT_SLOT >loc_u16FrontRight) ))
 8002efa:	e016      	b.n	8002f2a <C4SLTFIND_voidSearchingforSlot+0x6a>
		{
			loc_udErrorStat = C4_StaticGetFourDistance(&loc_u16Front,&loc_u16Back,&loc_u16FrontRight,&loc_u16BackRight);
 8002efc:	1cbb      	adds	r3, r7, #2
 8002efe:	1d3a      	adds	r2, r7, #4
 8002f00:	1db9      	adds	r1, r7, #6
 8002f02:	f107 0008 	add.w	r0, r7, #8
 8002f06:	f7ff fe39 	bl	8002b7c <C4_StaticGetFourDistance>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	72fb      	strb	r3, [r7, #11]
			if(E_OK != loc_udErrorStat)
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	2b06      	cmp	r3, #6
 8002f12:	d005      	beq.n	8002f20 <C4SLTFIND_voidSearchingforSlot+0x60>
			{
				C2VCONTROL_voidChangeDirection(VCLE_FWD,0);
 8002f14:	2100      	movs	r1, #0
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7ff ff04 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
				return loc_udErrorStat;
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	e05c      	b.n	8002fda <C4SLTFIND_voidSearchingforSlot+0x11a>
			}
			if(loc_u16Front < 16)
 8002f20:	893b      	ldrh	r3, [r7, #8]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	d801      	bhi.n	8002f2a <C4SLTFIND_voidSearchingforSlot+0x6a>
			{
				// End of Lane, No Parking Slot
				return NO_SLOT ;
 8002f26:	2304      	movs	r3, #4
 8002f28:	e057      	b.n	8002fda <C4SLTFIND_voidSearchingforSlot+0x11a>
		while(( (MIN_DEPTH_TO_DETECT_SLOT > loc_u16BackRight) || (MIN_DEPTH_TO_DETECT_SLOT >loc_u16FrontRight) ))
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	2b1d      	cmp	r3, #29
 8002f2e:	d9e5      	bls.n	8002efc <C4SLTFIND_voidSearchingforSlot+0x3c>
 8002f30:	88bb      	ldrh	r3, [r7, #4]
 8002f32:	2b1d      	cmp	r3, #29
 8002f34:	d9e2      	bls.n	8002efc <C4SLTFIND_voidSearchingforSlot+0x3c>
			}
		}
		// brake By Backward movement
		FORCE_BREAK_FRM_FWD();
 8002f36:	21ff      	movs	r1, #255	; 0xff
 8002f38:	2002      	movs	r0, #2
 8002f3a:	f7ff fef3 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8002f3e:	2078      	movs	r0, #120	; 0x78
 8002f40:	f7fe f907 	bl	8001152 <delay_ms>
 8002f44:	2100      	movs	r1, #0
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7ff feec 	bl	8002d24 <C2VCONTROL_voidChangeDirection>

		// Update Vehicle Position
		C2VCONTROL_voidChangeDirection(VCLE_RIGHT_FWD, FIND_SLOT_SPEED+50);
 8002f4c:	21c8      	movs	r1, #200	; 0xc8
 8002f4e:	2003      	movs	r0, #3
 8002f50:	f7ff fee8 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		delay_ms(900);
 8002f54:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002f58:	f7fe f8fb 	bl	8001152 <delay_ms>
		/******************************************************************/
		/* now the slot is detected by the two us's so continue to move */
		/* until the right back us read the minimum value or smaller */
		/* Make An Timeout Event for Forward movement 			*/

		loc_udErrorStat = C4_StaticGetFourDistance(NULL,NULL,&loc_u16FrontRight,&loc_u16BackRight);
 8002f5c:	1cbb      	adds	r3, r7, #2
 8002f5e:	1d3a      	adds	r2, r7, #4
 8002f60:	2100      	movs	r1, #0
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7ff fe0a 	bl	8002b7c <C4_StaticGetFourDistance>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	72fb      	strb	r3, [r7, #11]
		if(E_OK != loc_udErrorStat)
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d005      	beq.n	8002f7e <C4SLTFIND_voidSearchingforSlot+0xbe>
		{
			C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8002f72:	2100      	movs	r1, #0
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff fed5 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
			return loc_udErrorStat;
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	e02d      	b.n	8002fda <C4SLTFIND_voidSearchingforSlot+0x11a>
		}
		else
		{
			C2VCONTROL_voidChangeDirection(VCLE_FWD,FIND_SLOT_SPEED);
 8002f7e:	2196      	movs	r1, #150	; 0x96
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7ff fecf 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
			while(MIN_DEPTH_TO_DETECT_SLOT < loc_u16BackRight)
 8002f86:	e017      	b.n	8002fb8 <C4SLTFIND_voidSearchingforSlot+0xf8>
			{
				loc_udErrorStat = C4_StaticGetFourDistance(NULL,NULL,&loc_u16FrontRight,&loc_u16BackRight);
 8002f88:	1cbb      	adds	r3, r7, #2
 8002f8a:	1d3a      	adds	r2, r7, #4
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7ff fdf4 	bl	8002b7c <C4_StaticGetFourDistance>
 8002f94:	4603      	mov	r3, r0
 8002f96:	72fb      	strb	r3, [r7, #11]
				if(E_OK != loc_udErrorStat)
 8002f98:	7afb      	ldrb	r3, [r7, #11]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d005      	beq.n	8002faa <C4SLTFIND_voidSearchingforSlot+0xea>
				{
					C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7ff febf 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
					return loc_udErrorStat;
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	e017      	b.n	8002fda <C4SLTFIND_voidSearchingforSlot+0x11a>
				}
				// For Time out
				if(LOC_u32SlotTimeOut > TIME_OUT_FOR_SLOT_SEARCH)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <C4SLTFIND_voidSearchingforSlot+0x124>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d806      	bhi.n	8002fc0 <C4SLTFIND_voidSearchingforSlot+0x100>
				{
					break ;
				}
				LOC_u32SlotTimeOut++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
			while(MIN_DEPTH_TO_DETECT_SLOT < loc_u16BackRight)
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	2b1e      	cmp	r3, #30
 8002fbc:	d8e4      	bhi.n	8002f88 <C4SLTFIND_voidSearchingforSlot+0xc8>
 8002fbe:	e000      	b.n	8002fc2 <C4SLTFIND_voidSearchingforSlot+0x102>
					break ;
 8002fc0:	bf00      	nop
			}

		}
		FORCE_BREAK_FRM_FWD();
 8002fc2:	21ff      	movs	r1, #255	; 0xff
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f7ff fead 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
 8002fca:	2078      	movs	r0, #120	; 0x78
 8002fcc:	f7fe f8c1 	bl	8001152 <delay_ms>
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7ff fea6 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
	}

	return loc_udErrorStat;
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	01e84800 	.word	0x01e84800

08002fe8 <C5VCLEPRK_voidInitParking>:
 * Function Definitions
 *******************************************************************************/


void C5VCLEPRK_voidInitParking(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0

	/*initialize the US sensor select component*/
	APPC1_Init();
 8002fec:	f7ff fd5e 	bl	8002aac <APPC1_Init>
	/*initialize motion control component*/
	//C2VCONTROL_voidInit();

}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <C5VCLEPRK_voidStartParking>:

ERROR_t C5VCLEPRK_voidStartParking(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
	u16 LOC_u16BackDistance ;
	u16 LOC_u16FrontRightDistance ;
	u16 LOC_u16BackRightDistance ;
	u8 LOC_u8AlignmentDiffer ;
	(void)LOC_u8AlignmentDiffer;
	u8 StartParkingPrecedure = 0 ;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	737b      	strb	r3, [r7, #13]

	// Stop Vehicle
	C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8002ffe:	2100      	movs	r1, #0
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff fe8f 	bl	8002d24 <C2VCONTROL_voidChangeDirection>

	// Evaluate First Impression
	LOC_xReturnError = C4_StaticGetFourDistance(&LOC_u16FrontDistance , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	1dba      	adds	r2, r7, #6
 800300a:	f107 0108 	add.w	r1, r7, #8
 800300e:	f107 000a 	add.w	r0, r7, #10
 8003012:	f7ff fdb3 	bl	8002b7c <C4_StaticGetFourDistance>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
	if(LOC_xReturnError != E_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d001      	beq.n	8003024 <C5VCLEPRK_voidStartParking+0x30>
		return LOC_xReturnError ;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	e0f7      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>
	LOC_u8AlignmentDiffer = _ABS_((LOC_u16FrontRightDistance-LOC_u16BackRightDistance)) ;
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	461a      	mov	r2, r3
 8003028:	88bb      	ldrh	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bfb8      	it	lt
 8003030:	425b      	neglt	r3, r3
 8003032:	73bb      	strb	r3, [r7, #14]
//		StartParkingPrecedure = 0 ;
//	}



	StartParkingPrecedure = 1 ;
 8003034:	2301      	movs	r3, #1
 8003036:	737b      	strb	r3, [r7, #13]

	if(StartParkingPrecedure == 1)
 8003038:	7b7b      	ldrb	r3, [r7, #13]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 80e9 	bne.w	8003212 <C5VCLEPRK_voidStartParking+0x21e>
	{
		// Because of we have poor steering
		C2VCONTROL_voidChangeDirection( VCLE_LEFT_FWD , PARKING_SPEED+30);
 8003040:	21c8      	movs	r1, #200	; 0xc8
 8003042:	2006      	movs	r0, #6
 8003044:	f7ff fe6e 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		delay_ms(600);
 8003048:	f44f 7016 	mov.w	r0, #600	; 0x258
 800304c:	f7fe f881 	bl	8001152 <delay_ms>

		// First Movement The Vehicle
		C2VCONTROL_voidChangeDirection( VCLE_RIGHT_BWD , PARKING_SPEED);
 8003050:	21aa      	movs	r1, #170	; 0xaa
 8003052:	2004      	movs	r0, #4
 8003054:	f7ff fe66 	bl	8002d24 <C2VCONTROL_voidChangeDirection>

		while(LOC_u16BackDistance >= (40+3) )
 8003058:	e00d      	b.n	8003076 <C5VCLEPRK_voidStartParking+0x82>
		{
			LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	1dba      	adds	r2, r7, #6
 800305e:	f107 0108 	add.w	r1, r7, #8
 8003062:	2000      	movs	r0, #0
 8003064:	f7ff fd8a 	bl	8002b7c <C4_StaticGetFourDistance>
 8003068:	4603      	mov	r3, r0
 800306a:	73fb      	strb	r3, [r7, #15]
			if(LOC_xReturnError != E_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d001      	beq.n	8003076 <C5VCLEPRK_voidStartParking+0x82>
				return LOC_xReturnError ;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	e0ce      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>
		while(LOC_u16BackDistance >= (40+3) )
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	2b2a      	cmp	r3, #42	; 0x2a
 800307a:	d8ee      	bhi.n	800305a <C5VCLEPRK_voidStartParking+0x66>

		}
		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 800307c:	2100      	movs	r1, #0
 800307e:	2000      	movs	r0, #0
 8003080:	f7ff fe50 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		delay_ms((MOVEMENT_DELAY));
 8003084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003088:	f7fe f863 	bl	8001152 <delay_ms>
		C2VCONTROL_voidChangeDirection( VCLE_RIGHT_BWD , PARKING_SPEED);
 800308c:	21aa      	movs	r1, #170	; 0xaa
 800308e:	2004      	movs	r0, #4
 8003090:	f7ff fe48 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
#if ENABLE_FORS_BRK	== 1
		C2VCONTROL_voidChangeDirection(VCLE_FWD,255	);
		delay_ms(FORCE_STOP_DELAY);
		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
#else
		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8003094:	2100      	movs	r1, #0
 8003096:	2000      	movs	r0, #0
 8003098:	f7ff fe44 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
#endif

	//
		delay_ms((MOVEMENT_DELAY));
 800309c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a0:	f7fe f857 	bl	8001152 <delay_ms>

		// Now Vehicle is stops at angle ~45 with slot
		LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	1dba      	adds	r2, r7, #6
 80030a8:	f107 0108 	add.w	r1, r7, #8
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7ff fd65 	bl	8002b7c <C4_StaticGetFourDistance>
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
		if(LOC_xReturnError != E_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	d001      	beq.n	80030c0 <C5VCLEPRK_voidStartParking+0xcc>
			return LOC_xReturnError ;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	e0a9      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>

		C2VCONTROL_voidChangeDirection(VCLE_LEFT_BWD  , PARKING_SPEED+50);
 80030c0:	21dc      	movs	r1, #220	; 0xdc
 80030c2:	2005      	movs	r0, #5
 80030c4:	f7ff fe2e 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		while(LOC_u16BackDistance > BACK_THERSHOLD-7 && StartParkingPrecedure != 2)
 80030c8:	e04b      	b.n	8003162 <C5VCLEPRK_voidStartParking+0x16e>
		{
			// Stop With The Same Angle
			LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	1dba      	adds	r2, r7, #6
 80030ce:	f107 0108 	add.w	r1, r7, #8
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7ff fd52 	bl	8002b7c <C4_StaticGetFourDistance>
 80030d8:	4603      	mov	r3, r0
 80030da:	73fb      	strb	r3, [r7, #15]
			if(LOC_xReturnError != E_OK)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d023      	beq.n	800312a <C5VCLEPRK_voidStartParking+0x136>
				return LOC_xReturnError ;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	e096      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>
			// عشان لو لبست
			while (LOC_u16BackDistance >= 2000 || LOC_u16BackRightDistance >= 2000 || LOC_u16FrontRightDistance >= 2000)
			{
				// The vehicle on wall :)
				C2VCONTROL_voidChangeDirection(VCLE_FWD  , PARKING_SPEED);
 80030e6:	21aa      	movs	r1, #170	; 0xaa
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7ff fe1b 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
				delay_ms((MOVEMENT_DELAY/2));
 80030ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030f2:	f7fe f82e 	bl	8001152 <delay_ms>
				C2VCONTROL_voidChangeDirection(VCLE_STOP  , PARKING_SPEED);
 80030f6:	21aa      	movs	r1, #170	; 0xaa
 80030f8:	2000      	movs	r0, #0
 80030fa:	f7ff fe13 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
				delay_ms((MOVEMENT_DELAY/2));
 80030fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003102:	f7fe f826 	bl	8001152 <delay_ms>
				C2VCONTROL_voidChangeDirection(VCLE_LEFT_BWD  , PARKING_SPEED);
 8003106:	21aa      	movs	r1, #170	; 0xaa
 8003108:	2005      	movs	r0, #5
 800310a:	f7ff fe0b 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
				LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	1dba      	adds	r2, r7, #6
 8003112:	f107 0108 	add.w	r1, r7, #8
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff fd30 	bl	8002b7c <C4_StaticGetFourDistance>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]
				if(LOC_xReturnError != E_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d001      	beq.n	800312a <C5VCLEPRK_voidStartParking+0x136>
					return LOC_xReturnError ;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	e074      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>
			while (LOC_u16BackDistance >= 2000 || LOC_u16BackRightDistance >= 2000 || LOC_u16FrontRightDistance >= 2000)
 800312a:	893b      	ldrh	r3, [r7, #8]
 800312c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003130:	d2d9      	bcs.n	80030e6 <C5VCLEPRK_voidStartParking+0xf2>
 8003132:	88bb      	ldrh	r3, [r7, #4]
 8003134:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003138:	d2d5      	bcs.n	80030e6 <C5VCLEPRK_voidStartParking+0xf2>
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003140:	d2d1      	bcs.n	80030e6 <C5VCLEPRK_voidStartParking+0xf2>
			}
			// Check End Point From Loop
			LOC_u8AlignmentDiffer = _ABS_((LOC_u16FrontRightDistance-LOC_u16BackRightDistance)) ;
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	461a      	mov	r2, r3
 8003146:	88bb      	ldrh	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	bfb8      	it	lt
 800314e:	425b      	neglt	r3, r3
 8003150:	73bb      	strb	r3, [r7, #14]
			if(LOC_u8AlignmentDiffer <= 2 && LOC_u16FrontRightDistance < BACK_RIGHT_THERSHOLD )
 8003152:	7bbb      	ldrb	r3, [r7, #14]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d804      	bhi.n	8003162 <C5VCLEPRK_voidStartParking+0x16e>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d801      	bhi.n	8003162 <C5VCLEPRK_voidStartParking+0x16e>
			{
				StartParkingPrecedure = 2 ;
 800315e:	2302      	movs	r3, #2
 8003160:	737b      	strb	r3, [r7, #13]
		while(LOC_u16BackDistance > BACK_THERSHOLD-7 && StartParkingPrecedure != 2)
 8003162:	893b      	ldrh	r3, [r7, #8]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d902      	bls.n	800316e <C5VCLEPRK_voidStartParking+0x17a>
 8003168:	7b7b      	ldrb	r3, [r7, #13]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d1ad      	bne.n	80030ca <C5VCLEPRK_voidStartParking+0xd6>
			}
		}

		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 800316e:	2100      	movs	r1, #0
 8003170:	2000      	movs	r0, #0
 8003172:	f7ff fdd7 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		delay_ms((MOVEMENT_DELAY));
 8003176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800317a:	f7fd ffea 	bl	8001152 <delay_ms>

		if(StartParkingPrecedure == 1)
 800317e:	7b7b      	ldrb	r3, [r7, #13]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d13f      	bne.n	8003204 <C5VCLEPRK_voidStartParking+0x210>
		{
			// Exit Due to Back Distance Isn't Enough
			// Start Alignment Procedure
			LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	1dba      	adds	r2, r7, #6
 8003188:	f107 0108 	add.w	r1, r7, #8
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff fcf5 	bl	8002b7c <C4_StaticGetFourDistance>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
			if(LOC_xReturnError != E_OK)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d001      	beq.n	80031a0 <C5VCLEPRK_voidStartParking+0x1ac>
				return LOC_xReturnError ;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	e039      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>
			LOC_u8AlignmentDiffer = _ABS_((LOC_u16FrontRightDistance-LOC_u16BackRightDistance)) ;
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	461a      	mov	r2, r3
 80031a4:	88bb      	ldrh	r3, [r7, #4]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bfb8      	it	lt
 80031ac:	425b      	neglt	r3, r3
 80031ae:	73bb      	strb	r3, [r7, #14]
			while(LOC_u8AlignmentDiffer > 2)
 80031b0:	e025      	b.n	80031fe <C5VCLEPRK_voidStartParking+0x20a>
			{
				C2VCONTROL_voidChangeDirection(VCLE_RIGHT_FWD, PARKING_SPEED+25);
 80031b2:	21c3      	movs	r1, #195	; 0xc3
 80031b4:	2003      	movs	r0, #3
 80031b6:	f7ff fdb5 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
				delay_ms(500);
 80031ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031be:	f7fd ffc8 	bl	8001152 <delay_ms>
				C2VCONTROL_voidChangeDirection(VCLE_LEFT_BWD  , PARKING_SPEED);
 80031c2:	21aa      	movs	r1, #170	; 0xaa
 80031c4:	2005      	movs	r0, #5
 80031c6:	f7ff fdad 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
				delay_ms(500);
 80031ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031ce:	f7fd ffc0 	bl	8001152 <delay_ms>
				LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	1dba      	adds	r2, r7, #6
 80031d6:	f107 0108 	add.w	r1, r7, #8
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff fcce 	bl	8002b7c <C4_StaticGetFourDistance>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
				if(LOC_xReturnError != E_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d001      	beq.n	80031ee <C5VCLEPRK_voidStartParking+0x1fa>
					return LOC_xReturnError ;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	e012      	b.n	8003214 <C5VCLEPRK_voidStartParking+0x220>
				LOC_u8AlignmentDiffer = _ABS_((LOC_u16FrontRightDistance-LOC_u16BackRightDistance)) ;
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	461a      	mov	r2, r3
 80031f2:	88bb      	ldrh	r3, [r7, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bfb8      	it	lt
 80031fa:	425b      	neglt	r3, r3
 80031fc:	73bb      	strb	r3, [r7, #14]
			while(LOC_u8AlignmentDiffer > 2)
 80031fe:	7bbb      	ldrb	r3, [r7, #14]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d8d6      	bhi.n	80031b2 <C5VCLEPRK_voidStartParking+0x1be>
		else // StartParkingPrecedure == 2
		{
			// Exit Due to Parking Is Complete
			// Then Go Forward Until Back Distance == Front Distance
		}
		C2VCONTROL_voidChangeDirection(VCLE_STOP  , 0);
 8003204:	2100      	movs	r1, #0
 8003206:	2000      	movs	r0, #0
 8003208:	f7ff fd8c 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
		delay_ms(100);
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	f7fd ffa0 	bl	8001152 <delay_ms>

	}
	return LOC_xReturnError;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <C6TL_voidTrafficV2I_init>:

USART_Config _V2I_UART_PORT_ ;


void C6TL_voidTrafficV2I_init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
	RCC_voidEnableClock(RCC_APB1,18);		/*	USART3	*/
 8003220:	2112      	movs	r1, #18
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff f9a2 	bl	800256c <RCC_voidEnableClock>
	USART_voidSetPins(USART_3);
 8003228:	2002      	movs	r0, #2
 800322a:	f7ff fbc7 	bl	80029bc <USART_voidSetPins>
	_V2I_UART_PORT_.USART_OperationMode = USART_RECEIVE;
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003230:	2204      	movs	r2, #4
 8003232:	701a      	strb	r2, [r3, #0]
	_V2I_UART_PORT_.USART_BuadRate = 9600 ;
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003236:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800323a:	605a      	str	r2, [r3, #4]
	_V2I_UART_PORT_.USART_DataLength = USART_8BIT ;
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
	_V2I_UART_PORT_.USART_Parity =USART_DISABLE_PARITY ;
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003244:	2200      	movs	r2, #0
 8003246:	819a      	strh	r2, [r3, #12]
	_V2I_UART_PORT_.USART_StopBit = USART_1_STOPBIT ;
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	81da      	strh	r2, [r3, #14]
	_V2I_UART_PORT_.USART_HWFlowControl = USART_HW_FLOW_CONTROLLED_DISALBED ;
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003250:	2200      	movs	r2, #0
 8003252:	821a      	strh	r2, [r3, #16]
	_V2I_UART_PORT_.USART_IdleLevel     = USART_ASYNC ;
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003256:	2200      	movs	r2, #0
 8003258:	825a      	strh	r2, [r3, #18]
	_V2I_UART_PORT_.USART_DataSampling  = USART_ASYNC ;
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 800325c:	2200      	movs	r2, #0
 800325e:	829a      	strh	r2, [r3, #20]
	_V2I_UART_PORT_.USART_DMA = DMA_DISABLE ;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003262:	2200      	movs	r2, #0
 8003264:	759a      	strb	r2, [r3, #22]
	_V2I_UART_PORT_.P_IRQ_CallBack = NULL ;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003268:	2200      	movs	r2, #0
 800326a:	61da      	str	r2, [r3, #28]
	_V2I_UART_PORT_.USART_IRQ_t = USART_DISABLE_IRQs ;
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 800326e:	2200      	movs	r2, #0
 8003270:	831a      	strh	r2, [r3, #24]
	USART_voidInit(USART_3, &_V2I_UART_PORT_);
 8003272:	4903      	ldr	r1, [pc, #12]	; (8003280 <C6TL_voidTrafficV2I_init+0x64>)
 8003274:	2002      	movs	r0, #2
 8003276:	f7ff fa9f 	bl	80027b8 <USART_voidInit>
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000011c 	.word	0x2000011c

08003284 <C6TL_voidStartV2I>:

void C6TL_voidStartV2I(VehicleStates_t *ptr2VehivleState)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	while(*ptr2VehivleState == TF_START_V2I)
 800328c:	e01e      	b.n	80032cc <C6TL_voidStartV2I+0x48>
	{
		u16 LOC_u16CommingData = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	81fb      	strh	r3, [r7, #14]
		// Vehcile Start Moving FWD

		// Get Data
		USART_voidReceiveDataSynch(USART_1,  &LOC_u16CommingData);
 8003292:	f107 030e 	add.w	r3, r7, #14
 8003296:	4619      	mov	r1, r3
 8003298:	2000      	movs	r0, #0
 800329a:	f7ff faf5 	bl	8002888 <USART_voidReceiveDataSynch>
		// Check Communication
		switch(LOC_u16CommingData)
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	2b19      	cmp	r3, #25
 80032a2:	d006      	beq.n	80032b2 <C6TL_voidStartV2I+0x2e>
 80032a4:	2b32      	cmp	r3, #50	; 0x32
 80032a6:	d109      	bne.n	80032bc <C6TL_voidStartV2I+0x38>
		{
		case TL_ON_STATE :
			C2VCONTROL_voidChangeDirection(VCLE_FWD, TL_AUTO_SPD);
 80032a8:	2196      	movs	r1, #150	; 0x96
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7ff fd3a 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
			break ;
 80032b0:	e00c      	b.n	80032cc <C6TL_voidStartV2I+0x48>
		case TL_OFF_STATE:
			C2VCONTROL_voidChangeDirection(VCLE_FWD, 0);
 80032b2:	2100      	movs	r1, #0
 80032b4:	2001      	movs	r0, #1
 80032b6:	f7ff fd35 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
			break ;
 80032ba:	e007      	b.n	80032cc <C6TL_voidStartV2I+0x48>
		default:
			// Hacking
			C2VCONTROL_voidChangeDirection(VCLE_STOP, 0);
 80032bc:	2100      	movs	r1, #0
 80032be:	2000      	movs	r0, #0
 80032c0:	f7ff fd30 	bl	8002d24 <C2VCONTROL_voidChangeDirection>
			*ptr2VehivleState = USR_CONTROLLED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
			break ;
 80032ca:	bf00      	nop
	while(*ptr2VehivleState == TF_START_V2I)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d0dc      	beq.n	800328e <C6TL_voidStartV2I+0xa>
		}


	}
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <DIGMngr_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void DIGMngr_voidInit(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    // Init Array of Errors 
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <DIGMngr_voidLoggError>:

void DIGMngr_voidLoggError(ERROR_t copy_xLoggErrorID , u8 ClearOldErrors)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	460a      	mov	r2, r1
 80032f6:	71fb      	strb	r3, [r7, #7]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71bb      	strb	r3, [r7, #6]
    if(ClearOldErrors != 1)
 80032fc:	79bb      	ldrb	r3, [r7, #6]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d007      	beq.n	8003312 <DIGMngr_voidLoggError+0x26>
    {
        // Increase Logged Error 
        Global_Logged_Error_Arr[copy_xLoggErrorID]++ ; 
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <DIGMngr_voidLoggError+0x48>)
 8003306:	5cd2      	ldrb	r2, [r2, r3]
 8003308:	3201      	adds	r2, #1
 800330a:	b2d1      	uxtb	r1, r2
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <DIGMngr_voidLoggError+0x48>)
 800330e:	54d1      	strb	r1, [r2, r3]
 8003310:	e003      	b.n	800331a <DIGMngr_voidLoggError+0x2e>
    }
    else
    {
        // Clear Errors 
        Global_Logged_Error_Arr[copy_xLoggErrorID] = 0 ; 
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <DIGMngr_voidLoggError+0x48>)
 8003316:	2100      	movs	r1, #0
 8003318:	54d1      	strb	r1, [r2, r3]
    }

    /*     Soft System Reset   */  
    if (Global_Logged_Error_Arr[copy_xLoggErrorID] >= MAX_LOGGED_ERROR_BEFORE_REST)
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	4a05      	ldr	r2, [pc, #20]	; (8003334 <DIGMngr_voidLoggError+0x48>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <DIGMngr_voidLoggError+0x3c>
    {
        __asm("b Reset_Handler");
 8003324:	f000 b8d2 	b.w	80034cc <Reset_Handler>
    }
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	200000e0 	.word	0x200000e0

08003338 <main>:
	}
	return TRUE ;
}

int main(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0

	/*
	 * Local Variables
	 */
	ERROR_t    LOC_eReturnForSystemLog = 0 ;
 800333e:	2300      	movs	r3, #0
 8003340:	75bb      	strb	r3, [r7, #22]
#if TESTING_PHASE == 1 && MAIN_CODE == 0
	VehicleStates_t LOC_xSystemState = PARKING_MODE ;
#else
	VehicleStates_t LOC_xSystemState = USR_CONTROLLED ;
 8003342:	2300      	movs	r3, #0
 8003344:	747b      	strb	r3, [r7, #17]
     * System Clock : SYSCLK	 = 8 MHz
     * AHB    Clock : HCLK	     = 8 MHz
     * APB1   Clock : APB1CLK    = 8 MHz
     * APB2   Clock : APB2CLK    = 8 MHz
     */
	RCC_voidInitSysClocks();
 8003346:	f7ff f951 	bl	80025ec <RCC_voidInitSysClocks>
	 *  C4_SLOT_FIND		: Used to Find Slot
	 *
	 *  SYS_DIG_Mng			: Used to log Errors
	 *
	 */
	C2VCONTROL_voidInit();
 800334a:	f7ff fca5 	bl	8002c98 <C2VCONTROL_voidInit>
	C4SLTFIND_voidInit();
 800334e:	f7ff fdaf 	bl	8002eb0 <C4SLTFIND_voidInit>
	DIGMngr_voidInit();
 8003352:	f7ff ffc3 	bl	80032dc <DIGMngr_voidInit>
	C5VCLEPRK_voidInitParking();
 8003356:	f7ff fe47 	bl	8002fe8 <C5VCLEPRK_voidInitParking>
	C6TL_voidTrafficV2I_init();
 800335a:	f7ff ff5f 	bl	800321c <C6TL_voidTrafficV2I_init>
	delay_init();
 800335e:	f7fd fee5 	bl	800112c <delay_init>

	/*
	 * APP Component Initialization
	 *	APP1_UsrControllerd           : For Free Running Mode
	 */
	APP1_voidSetup();
 8003362:	f7fd fb27 	bl	80009b4 <APP1_voidSetup>
	ERROR_t LOC_eReturnState = E_OK ;
 8003366:	2306      	movs	r3, #6
 8003368:	757b      	strb	r3, [r7, #21]
	u8 LOC_u8NumberOfTests =  NUM_OF_US_TEST_BEG;
 800336a:	2303      	movs	r3, #3
 800336c:	753b      	strb	r3, [r7, #20]
	u16 dataf = 0 , datab = 0 ,dataFR = 0 , dataBR = 0  ;
 800336e:	2300      	movs	r3, #0
 8003370:	80fb      	strh	r3, [r7, #6]
 8003372:	2300      	movs	r3, #0
 8003374:	80bb      	strh	r3, [r7, #4]
 8003376:	2300      	movs	r3, #0
 8003378:	807b      	strh	r3, [r7, #2]
 800337a:	2300      	movs	r3, #0
 800337c:	803b      	strh	r3, [r7, #0]
 800337e:	e023      	b.n	80033c8 <main+0x90>
		LOC_eReturnState = C4_StaticGetFourDistance(&dataf, &datab, &dataFR, &dataBR);
 8003380:	463b      	mov	r3, r7
 8003382:	1cba      	adds	r2, r7, #2
 8003384:	1d39      	adds	r1, r7, #4
 8003386:	1db8      	adds	r0, r7, #6
 8003388:	f7ff fbf8 	bl	8002b7c <C4_StaticGetFourDistance>
 800338c:	4603      	mov	r3, r0
 800338e:	757b      	strb	r3, [r7, #21]
		if(LOC_eReturnState != E_OK)
 8003390:	7d7b      	ldrb	r3, [r7, #21]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d015      	beq.n	80033c2 <main+0x8a>
			LOG_ERROR(LOC_eReturnState);
 8003396:	7d7b      	ldrb	r3, [r7, #21]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d105      	bne.n	80033a8 <main+0x70>
 800339c:	7d7b      	ldrb	r3, [r7, #21]
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d102      	bne.n	80033a8 <main+0x70>
 80033a2:	7d7b      	ldrb	r3, [r7, #21]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d005      	beq.n	80033b4 <main+0x7c>
 80033a8:	7d7b      	ldrb	r3, [r7, #21]
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff9d 	bl	80032ec <DIGMngr_voidLoggError>
 80033b2:	e004      	b.n	80033be <main+0x86>
 80033b4:	7d7b      	ldrb	r3, [r7, #21]
 80033b6:	2101      	movs	r1, #1
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff97 	bl	80032ec <DIGMngr_voidLoggError>
			return FALSE ;
 80033be:	2300      	movs	r3, #0
 80033c0:	e006      	b.n	80033d0 <main+0x98>
			LOC_u8NumberOfTests-- ;
 80033c2:	7d3b      	ldrb	r3, [r7, #20]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	753b      	strb	r3, [r7, #20]
	while (LOC_u8NumberOfTests)
 80033c8:	7d3b      	ldrb	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1d8      	bne.n	8003380 <main+0x48>
	return TRUE ;
 80033ce:	2301      	movs	r3, #1

	// Check Ultrasonics
	u8 LOC_u8SystemCheck = APP_boolCheckUltrasonics();
 80033d0:	75fb      	strb	r3, [r7, #23]
	while (LOC_u8SystemCheck != TRUE)
 80033d2:	e039      	b.n	8003448 <main+0x110>
	ERROR_t LOC_eReturnState = E_OK ;
 80033d4:	2306      	movs	r3, #6
 80033d6:	74fb      	strb	r3, [r7, #19]
	u8 LOC_u8NumberOfTests =  NUM_OF_US_TEST_BEG;
 80033d8:	2303      	movs	r3, #3
 80033da:	74bb      	strb	r3, [r7, #18]
	u16 dataf = 0 , datab = 0 ,dataFR = 0 , dataBR = 0  ;
 80033dc:	2300      	movs	r3, #0
 80033de:	81fb      	strh	r3, [r7, #14]
 80033e0:	2300      	movs	r3, #0
 80033e2:	81bb      	strh	r3, [r7, #12]
 80033e4:	2300      	movs	r3, #0
 80033e6:	817b      	strh	r3, [r7, #10]
 80033e8:	2300      	movs	r3, #0
 80033ea:	813b      	strh	r3, [r7, #8]
 80033ec:	e027      	b.n	800343e <main+0x106>
		LOC_eReturnState = C4_StaticGetFourDistance(&dataf, &datab, &dataFR, &dataBR);
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	f107 020a 	add.w	r2, r7, #10
 80033f6:	f107 010c 	add.w	r1, r7, #12
 80033fa:	f107 000e 	add.w	r0, r7, #14
 80033fe:	f7ff fbbd 	bl	8002b7c <C4_StaticGetFourDistance>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]
		if(LOC_eReturnState != E_OK)
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d015      	beq.n	8003438 <main+0x100>
			LOG_ERROR(LOC_eReturnState);
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d105      	bne.n	800341e <main+0xe6>
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d102      	bne.n	800341e <main+0xe6>
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d005      	beq.n	800342a <main+0xf2>
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff62 	bl	80032ec <DIGMngr_voidLoggError>
 8003428:	e004      	b.n	8003434 <main+0xfc>
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff5c 	bl	80032ec <DIGMngr_voidLoggError>
			return FALSE ;
 8003434:	2300      	movs	r3, #0
 8003436:	e006      	b.n	8003446 <main+0x10e>
			LOC_u8NumberOfTests-- ;
 8003438:	7cbb      	ldrb	r3, [r7, #18]
 800343a:	3b01      	subs	r3, #1
 800343c:	74bb      	strb	r3, [r7, #18]
	while (LOC_u8NumberOfTests)
 800343e:	7cbb      	ldrb	r3, [r7, #18]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1d4      	bne.n	80033ee <main+0xb6>
	return TRUE ;
 8003444:	2301      	movs	r3, #1
	{
		LOC_u8SystemCheck = APP_boolCheckUltrasonics();
 8003446:	75fb      	strb	r3, [r7, #23]
	while (LOC_u8SystemCheck != TRUE)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d1c2      	bne.n	80033d4 <main+0x9c>
	}

	for(;;)
	{
#if MAIN_CODE == 1 && PWM_TEST == 0 && STEERING_TST == 0
		switch (LOC_xSystemState) {
 800344e:	7c7b      	ldrb	r3, [r7, #17]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d00a      	beq.n	800346a <main+0x132>
 8003454:	2b02      	cmp	r3, #2
 8003456:	d032      	beq.n	80034be <main+0x186>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d000      	beq.n	800345e <main+0x126>
			case TF_START_V2I :
				/*	That Handled Automatically in state of USR_CONTROLLED but can be enable automatically by driver */ 
				C6TL_voidStartV2I(&LOC_xSystemState);
				break ;
			default:
				break;
 800345c:	e035      	b.n	80034ca <main+0x192>
				APP1_voidControlVehcileThroughBTL(&LOC_xSystemState);
 800345e:	f107 0311 	add.w	r3, r7, #17
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fadc 	bl	8000a20 <APP1_voidControlVehcileThroughBTL>
				break;
 8003468:	e02f      	b.n	80034ca <main+0x192>
				LOC_eReturnForSystemLog = C4SLTFIND_voidSearchingforSlot();
 800346a:	f7ff fd29 	bl	8002ec0 <C4SLTFIND_voidSearchingforSlot>
 800346e:	4603      	mov	r3, r0
 8003470:	75bb      	strb	r3, [r7, #22]
				if (LOC_eReturnForSystemLog != E_OK )
 8003472:	7dbb      	ldrb	r3, [r7, #22]
 8003474:	2b06      	cmp	r3, #6
 8003476:	d014      	beq.n	80034a2 <main+0x16a>
					LOG_ERROR(LOC_eReturnForSystemLog);
 8003478:	7dbb      	ldrb	r3, [r7, #22]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d105      	bne.n	800348a <main+0x152>
 800347e:	7dbb      	ldrb	r3, [r7, #22]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d102      	bne.n	800348a <main+0x152>
 8003484:	7dbb      	ldrb	r3, [r7, #22]
 8003486:	2b05      	cmp	r3, #5
 8003488:	d005      	beq.n	8003496 <main+0x15e>
 800348a:	7dbb      	ldrb	r3, [r7, #22]
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff2c 	bl	80032ec <DIGMngr_voidLoggError>
 8003494:	e010      	b.n	80034b8 <main+0x180>
 8003496:	7dbb      	ldrb	r3, [r7, #22]
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff26 	bl	80032ec <DIGMngr_voidLoggError>
 80034a0:	e00a      	b.n	80034b8 <main+0x180>
				else if (LOC_eReturnForSystemLog == E_OK)
 80034a2:	7dbb      	ldrb	r3, [r7, #22]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d107      	bne.n	80034b8 <main+0x180>
					delay_ms(700);
 80034a8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80034ac:	f7fd fe51 	bl	8001152 <delay_ms>
					LOC_eReturnForSystemLog = C5VCLEPRK_voidStartParking();
 80034b0:	f7ff fda0 	bl	8002ff4 <C5VCLEPRK_voidStartParking>
 80034b4:	4603      	mov	r3, r0
 80034b6:	75bb      	strb	r3, [r7, #22]
				LOC_xSystemState = USR_CONTROLLED ;
 80034b8:	2300      	movs	r3, #0
 80034ba:	747b      	strb	r3, [r7, #17]
				break ;
 80034bc:	e005      	b.n	80034ca <main+0x192>
				C6TL_voidStartV2I(&LOC_xSystemState);
 80034be:	f107 0311 	add.w	r3, r7, #17
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fede 	bl	8003284 <C6TL_voidStartV2I>
				break ;
 80034c8:	bf00      	nop
		switch (LOC_xSystemState) {
 80034ca:	e7c0      	b.n	800344e <main+0x116>

080034cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034d4:	480c      	ldr	r0, [pc, #48]	; (8003508 <LoopForever+0x6>)
  ldr r1, =_edata
 80034d6:	490d      	ldr	r1, [pc, #52]	; (800350c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <LoopForever+0xe>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034dc:	e002      	b.n	80034e4 <LoopCopyDataInit>

080034de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e2:	3304      	adds	r3, #4

080034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e8:	d3f9      	bcc.n	80034de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034ec:	4c0a      	ldr	r4, [pc, #40]	; (8003518 <LoopForever+0x16>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f0:	e001      	b.n	80034f6 <LoopFillZerobss>

080034f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f4:	3204      	adds	r2, #4

080034f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f8:	d3fb      	bcc.n	80034f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034fa:	f000 f811 	bl	8003520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034fe:	f7ff ff1b 	bl	8003338 <main>

08003502 <LoopForever>:

LoopForever:
    b LoopForever
 8003502:	e7fe      	b.n	8003502 <LoopForever>
  ldr   r0, =_estack
 8003504:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800350c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8003510:	08003588 	.word	0x08003588
  ldr r2, =_sbss
 8003514:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8003518:	2000013c 	.word	0x2000013c

0800351c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800351c:	e7fe      	b.n	800351c <ADC1_2_IRQHandler>
	...

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4e0d      	ldr	r6, [pc, #52]	; (8003558 <__libc_init_array+0x38>)
 8003524:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003526:	1ba4      	subs	r4, r4, r6
 8003528:	10a4      	asrs	r4, r4, #2
 800352a:	2500      	movs	r5, #0
 800352c:	42a5      	cmp	r5, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	4e0b      	ldr	r6, [pc, #44]	; (8003560 <__libc_init_array+0x40>)
 8003532:	4c0c      	ldr	r4, [pc, #48]	; (8003564 <__libc_init_array+0x44>)
 8003534:	f000 f818 	bl	8003568 <_init>
 8003538:	1ba4      	subs	r4, r4, r6
 800353a:	10a4      	asrs	r4, r4, #2
 800353c:	2500      	movs	r5, #0
 800353e:	42a5      	cmp	r5, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003548:	4798      	blx	r3
 800354a:	3501      	adds	r5, #1
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003552:	4798      	blx	r3
 8003554:	3501      	adds	r5, #1
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	08003580 	.word	0x08003580
 800355c:	08003580 	.word	0x08003580
 8003560:	08003580 	.word	0x08003580
 8003564:	08003584 	.word	0x08003584

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
